// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file orders/v1/accounts.proto (package account.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message account.v1.AddBalanceRequest
 */
export class AddBalanceRequest extends Message<AddBalanceRequest> {
  /**
   * @generated from field: string UserID = 1;
   */
  UserID = "";

  /**
   * @generated from field: int32 Balance = 4;
   */
  Balance = 0;

  constructor(data?: PartialMessage<AddBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.AddBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Balance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBalanceRequest {
    return new AddBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBalanceRequest {
    return new AddBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBalanceRequest {
    return new AddBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddBalanceRequest | PlainMessage<AddBalanceRequest> | undefined, b: AddBalanceRequest | PlainMessage<AddBalanceRequest> | undefined): boolean {
    return proto3.util.equals(AddBalanceRequest, a, b);
  }
}

/**
 * @generated from message account.v1.AddBalanceResponse
 */
export class AddBalanceResponse extends Message<AddBalanceResponse> {
  /**
   * @generated from field: string UserID = 1;
   */
  UserID = "";

  constructor(data?: PartialMessage<AddBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "account.v1.AddBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UserID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddBalanceResponse {
    return new AddBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddBalanceResponse {
    return new AddBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddBalanceResponse {
    return new AddBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddBalanceResponse | PlainMessage<AddBalanceResponse> | undefined, b: AddBalanceResponse | PlainMessage<AddBalanceResponse> | undefined): boolean {
    return proto3.util.equals(AddBalanceResponse, a, b);
  }
}

