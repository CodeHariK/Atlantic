// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file order/v1/order.proto (package order.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message order.v1.CreateOrderItemRequest
 */
export class CreateOrderItemRequest extends Message<CreateOrderItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string order_id = 2;
   */
  orderId = "";

  /**
   * @generated from field: string product_id = 3;
   */
  productId = "";

  /**
   * @generated from field: int32 quantity = 4;
   */
  quantity = 0;

  /**
   * @generated from field: int32 price = 5;
   */
  price = 0;

  constructor(data?: PartialMessage<CreateOrderItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.CreateOrderItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrderItemRequest {
    return new CreateOrderItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrderItemRequest {
    return new CreateOrderItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrderItemRequest {
    return new CreateOrderItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrderItemRequest | PlainMessage<CreateOrderItemRequest> | undefined, b: CreateOrderItemRequest | PlainMessage<CreateOrderItemRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrderItemRequest, a, b);
  }
}

/**
 * @generated from message order.v1.CreateOrderItemResponse
 */
export class CreateOrderItemResponse extends Message<CreateOrderItemResponse> {
  /**
   * @generated from field: order.v1.OrderItem order_item = 1;
   */
  orderItem?: OrderItem;

  constructor(data?: PartialMessage<CreateOrderItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.CreateOrderItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_item", kind: "message", T: OrderItem },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrderItemResponse {
    return new CreateOrderItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrderItemResponse {
    return new CreateOrderItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrderItemResponse {
    return new CreateOrderItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrderItemResponse | PlainMessage<CreateOrderItemResponse> | undefined, b: CreateOrderItemResponse | PlainMessage<CreateOrderItemResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrderItemResponse, a, b);
  }
}

/**
 * @generated from message order.v1.CreateOrderRequest
 */
export class CreateOrderRequest extends Message<CreateOrderRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: int32 price = 3;
   */
  price = 0;

  /**
   * @generated from field: string status = 4;
   */
  status = "";

  /**
   * @generated from field: string payment_status = 5;
   */
  paymentStatus = "";

  constructor(data?: PartialMessage<CreateOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.CreateOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "payment_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrderRequest {
    return new CreateOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrderRequest {
    return new CreateOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrderRequest {
    return new CreateOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrderRequest | PlainMessage<CreateOrderRequest> | undefined, b: CreateOrderRequest | PlainMessage<CreateOrderRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrderRequest, a, b);
  }
}

/**
 * @generated from message order.v1.CreateOrderResponse
 */
export class CreateOrderResponse extends Message<CreateOrderResponse> {
  /**
   * @generated from field: order.v1.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<CreateOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.CreateOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrderResponse {
    return new CreateOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrderResponse {
    return new CreateOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrderResponse {
    return new CreateOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrderResponse | PlainMessage<CreateOrderResponse> | undefined, b: CreateOrderResponse | PlainMessage<CreateOrderResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrderResponse, a, b);
  }
}

/**
 * @generated from message order.v1.DeleteOrderByIDRequest
 */
export class DeleteOrderByIDRequest extends Message<DeleteOrderByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteOrderByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.DeleteOrderByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrderByIDRequest {
    return new DeleteOrderByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrderByIDRequest {
    return new DeleteOrderByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrderByIDRequest {
    return new DeleteOrderByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrderByIDRequest | PlainMessage<DeleteOrderByIDRequest> | undefined, b: DeleteOrderByIDRequest | PlainMessage<DeleteOrderByIDRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrderByIDRequest, a, b);
  }
}

/**
 * @generated from message order.v1.DeleteOrderByIDResponse
 */
export class DeleteOrderByIDResponse extends Message<DeleteOrderByIDResponse> {
  constructor(data?: PartialMessage<DeleteOrderByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.DeleteOrderByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrderByIDResponse {
    return new DeleteOrderByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrderByIDResponse {
    return new DeleteOrderByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrderByIDResponse {
    return new DeleteOrderByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrderByIDResponse | PlainMessage<DeleteOrderByIDResponse> | undefined, b: DeleteOrderByIDResponse | PlainMessage<DeleteOrderByIDResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrderByIDResponse, a, b);
  }
}

/**
 * @generated from message order.v1.DeleteOrderItemByIDRequest
 */
export class DeleteOrderItemByIDRequest extends Message<DeleteOrderItemByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteOrderItemByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.DeleteOrderItemByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrderItemByIDRequest {
    return new DeleteOrderItemByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrderItemByIDRequest {
    return new DeleteOrderItemByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrderItemByIDRequest {
    return new DeleteOrderItemByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrderItemByIDRequest | PlainMessage<DeleteOrderItemByIDRequest> | undefined, b: DeleteOrderItemByIDRequest | PlainMessage<DeleteOrderItemByIDRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrderItemByIDRequest, a, b);
  }
}

/**
 * @generated from message order.v1.DeleteOrderItemByIDResponse
 */
export class DeleteOrderItemByIDResponse extends Message<DeleteOrderItemByIDResponse> {
  constructor(data?: PartialMessage<DeleteOrderItemByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.DeleteOrderItemByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrderItemByIDResponse {
    return new DeleteOrderItemByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrderItemByIDResponse {
    return new DeleteOrderItemByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrderItemByIDResponse {
    return new DeleteOrderItemByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrderItemByIDResponse | PlainMessage<DeleteOrderItemByIDResponse> | undefined, b: DeleteOrderItemByIDResponse | PlainMessage<DeleteOrderItemByIDResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrderItemByIDResponse, a, b);
  }
}

/**
 * @generated from message order.v1.GetOrderByIDRequest
 */
export class GetOrderByIDRequest extends Message<GetOrderByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetOrderByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GetOrderByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderByIDRequest {
    return new GetOrderByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderByIDRequest {
    return new GetOrderByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderByIDRequest {
    return new GetOrderByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderByIDRequest | PlainMessage<GetOrderByIDRequest> | undefined, b: GetOrderByIDRequest | PlainMessage<GetOrderByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetOrderByIDRequest, a, b);
  }
}

/**
 * @generated from message order.v1.GetOrderByIDResponse
 */
export class GetOrderByIDResponse extends Message<GetOrderByIDResponse> {
  /**
   * @generated from field: order.v1.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<GetOrderByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GetOrderByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderByIDResponse {
    return new GetOrderByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderByIDResponse {
    return new GetOrderByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderByIDResponse {
    return new GetOrderByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderByIDResponse | PlainMessage<GetOrderByIDResponse> | undefined, b: GetOrderByIDResponse | PlainMessage<GetOrderByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetOrderByIDResponse, a, b);
  }
}

/**
 * @generated from message order.v1.GetOrderItemByIDRequest
 */
export class GetOrderItemByIDRequest extends Message<GetOrderItemByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetOrderItemByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GetOrderItemByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderItemByIDRequest {
    return new GetOrderItemByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderItemByIDRequest {
    return new GetOrderItemByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderItemByIDRequest {
    return new GetOrderItemByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderItemByIDRequest | PlainMessage<GetOrderItemByIDRequest> | undefined, b: GetOrderItemByIDRequest | PlainMessage<GetOrderItemByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetOrderItemByIDRequest, a, b);
  }
}

/**
 * @generated from message order.v1.GetOrderItemByIDResponse
 */
export class GetOrderItemByIDResponse extends Message<GetOrderItemByIDResponse> {
  /**
   * @generated from field: order.v1.OrderItem order_item = 1;
   */
  orderItem?: OrderItem;

  constructor(data?: PartialMessage<GetOrderItemByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GetOrderItemByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_item", kind: "message", T: OrderItem },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderItemByIDResponse {
    return new GetOrderItemByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderItemByIDResponse {
    return new GetOrderItemByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderItemByIDResponse {
    return new GetOrderItemByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderItemByIDResponse | PlainMessage<GetOrderItemByIDResponse> | undefined, b: GetOrderItemByIDResponse | PlainMessage<GetOrderItemByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetOrderItemByIDResponse, a, b);
  }
}

/**
 * @generated from message order.v1.GetOrderItemsByOrderIDRequest
 */
export class GetOrderItemsByOrderIDRequest extends Message<GetOrderItemsByOrderIDRequest> {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId = "";

  constructor(data?: PartialMessage<GetOrderItemsByOrderIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GetOrderItemsByOrderIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderItemsByOrderIDRequest {
    return new GetOrderItemsByOrderIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderItemsByOrderIDRequest {
    return new GetOrderItemsByOrderIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderItemsByOrderIDRequest {
    return new GetOrderItemsByOrderIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderItemsByOrderIDRequest | PlainMessage<GetOrderItemsByOrderIDRequest> | undefined, b: GetOrderItemsByOrderIDRequest | PlainMessage<GetOrderItemsByOrderIDRequest> | undefined): boolean {
    return proto3.util.equals(GetOrderItemsByOrderIDRequest, a, b);
  }
}

/**
 * @generated from message order.v1.GetOrderItemsByOrderIDResponse
 */
export class GetOrderItemsByOrderIDResponse extends Message<GetOrderItemsByOrderIDResponse> {
  /**
   * @generated from field: repeated order.v1.OrderItem list = 1;
   */
  list: OrderItem[] = [];

  constructor(data?: PartialMessage<GetOrderItemsByOrderIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GetOrderItemsByOrderIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: OrderItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderItemsByOrderIDResponse {
    return new GetOrderItemsByOrderIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderItemsByOrderIDResponse {
    return new GetOrderItemsByOrderIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderItemsByOrderIDResponse {
    return new GetOrderItemsByOrderIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderItemsByOrderIDResponse | PlainMessage<GetOrderItemsByOrderIDResponse> | undefined, b: GetOrderItemsByOrderIDResponse | PlainMessage<GetOrderItemsByOrderIDResponse> | undefined): boolean {
    return proto3.util.equals(GetOrderItemsByOrderIDResponse, a, b);
  }
}

/**
 * @generated from message order.v1.GetOrdersByUserIDRequest
 */
export class GetOrdersByUserIDRequest extends Message<GetOrdersByUserIDRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetOrdersByUserIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GetOrdersByUserIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrdersByUserIDRequest {
    return new GetOrdersByUserIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrdersByUserIDRequest {
    return new GetOrdersByUserIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrdersByUserIDRequest {
    return new GetOrdersByUserIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrdersByUserIDRequest | PlainMessage<GetOrdersByUserIDRequest> | undefined, b: GetOrdersByUserIDRequest | PlainMessage<GetOrdersByUserIDRequest> | undefined): boolean {
    return proto3.util.equals(GetOrdersByUserIDRequest, a, b);
  }
}

/**
 * @generated from message order.v1.GetOrdersByUserIDResponse
 */
export class GetOrdersByUserIDResponse extends Message<GetOrdersByUserIDResponse> {
  /**
   * @generated from field: repeated order.v1.Order list = 1;
   */
  list: Order[] = [];

  constructor(data?: PartialMessage<GetOrdersByUserIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GetOrdersByUserIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Order, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrdersByUserIDResponse {
    return new GetOrdersByUserIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrdersByUserIDResponse {
    return new GetOrdersByUserIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrdersByUserIDResponse {
    return new GetOrdersByUserIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrdersByUserIDResponse | PlainMessage<GetOrdersByUserIDResponse> | undefined, b: GetOrdersByUserIDResponse | PlainMessage<GetOrdersByUserIDResponse> | undefined): boolean {
    return proto3.util.equals(GetOrdersByUserIDResponse, a, b);
  }
}

/**
 * @generated from message order.v1.GooseDbVersion
 */
export class GooseDbVersion extends Message<GooseDbVersion> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int64 version_id = 2;
   */
  versionId = protoInt64.zero;

  /**
   * @generated from field: bool is_applied = 3;
   */
  isApplied = false;

  /**
   * @generated from field: google.protobuf.Timestamp tstamp = 4;
   */
  tstamp?: Timestamp;

  constructor(data?: PartialMessage<GooseDbVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.GooseDbVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "version_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "is_applied", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "tstamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromJsonString(jsonString, options);
  }

  static equals(a: GooseDbVersion | PlainMessage<GooseDbVersion> | undefined, b: GooseDbVersion | PlainMessage<GooseDbVersion> | undefined): boolean {
    return proto3.util.equals(GooseDbVersion, a, b);
  }
}

/**
 * @generated from message order.v1.Order
 */
export class Order extends Message<Order> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: int32 price = 5;
   */
  price = 0;

  /**
   * @generated from field: string status = 6;
   */
  status = "";

  /**
   * @generated from field: string payment_status = 7;
   */
  paymentStatus = "";

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
    { no: 5, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "payment_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

/**
 * @generated from message order.v1.OrderItem
 */
export class OrderItem extends Message<OrderItem> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string order_id = 2;
   */
  orderId = "";

  /**
   * @generated from field: string product_id = 3;
   */
  productId = "";

  /**
   * @generated from field: int32 quantity = 4;
   */
  quantity = 0;

  /**
   * @generated from field: int32 price = 5;
   */
  price = 0;

  constructor(data?: PartialMessage<OrderItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.OrderItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderItem {
    return new OrderItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJsonString(jsonString, options);
  }

  static equals(a: OrderItem | PlainMessage<OrderItem> | undefined, b: OrderItem | PlainMessage<OrderItem> | undefined): boolean {
    return proto3.util.equals(OrderItem, a, b);
  }
}

/**
 * @generated from message order.v1.Product
 */
export class Product extends Message<Product> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: int32 price = 3;
   */
  price = 0;

  constructor(data?: PartialMessage<Product>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.Product";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Product {
    return new Product().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJsonString(jsonString, options);
  }

  static equals(a: Product | PlainMessage<Product> | undefined, b: Product | PlainMessage<Product> | undefined): boolean {
    return proto3.util.equals(Product, a, b);
  }
}

/**
 * @generated from message order.v1.ProductReview
 */
export class ProductReview extends Message<ProductReview> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string product_id = 3;
   */
  productId = "";

  /**
   * @generated from field: google.protobuf.StringValue comment = 4;
   */
  comment?: string;

  /**
   * @generated from field: int32 rating = 5;
   */
  rating = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<ProductReview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.ProductReview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "comment", kind: "message", T: StringValue },
    { no: 5, name: "rating", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductReview {
    return new ProductReview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductReview {
    return new ProductReview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductReview {
    return new ProductReview().fromJsonString(jsonString, options);
  }

  static equals(a: ProductReview | PlainMessage<ProductReview> | undefined, b: ProductReview | PlainMessage<ProductReview> | undefined): boolean {
    return proto3.util.equals(ProductReview, a, b);
  }
}

/**
 * @generated from message order.v1.UpdateOrderPaymentStatusRequest
 */
export class UpdateOrderPaymentStatusRequest extends Message<UpdateOrderPaymentStatusRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string payment_status = 2;
   */
  paymentStatus = "";

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 3;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<UpdateOrderPaymentStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.UpdateOrderPaymentStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "payment_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrderPaymentStatusRequest {
    return new UpdateOrderPaymentStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrderPaymentStatusRequest {
    return new UpdateOrderPaymentStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrderPaymentStatusRequest {
    return new UpdateOrderPaymentStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrderPaymentStatusRequest | PlainMessage<UpdateOrderPaymentStatusRequest> | undefined, b: UpdateOrderPaymentStatusRequest | PlainMessage<UpdateOrderPaymentStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrderPaymentStatusRequest, a, b);
  }
}

/**
 * @generated from message order.v1.UpdateOrderPaymentStatusResponse
 */
export class UpdateOrderPaymentStatusResponse extends Message<UpdateOrderPaymentStatusResponse> {
  /**
   * @generated from field: order.v1.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<UpdateOrderPaymentStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.UpdateOrderPaymentStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrderPaymentStatusResponse {
    return new UpdateOrderPaymentStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrderPaymentStatusResponse {
    return new UpdateOrderPaymentStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrderPaymentStatusResponse {
    return new UpdateOrderPaymentStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrderPaymentStatusResponse | PlainMessage<UpdateOrderPaymentStatusResponse> | undefined, b: UpdateOrderPaymentStatusResponse | PlainMessage<UpdateOrderPaymentStatusResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrderPaymentStatusResponse, a, b);
  }
}

/**
 * @generated from message order.v1.UpdateOrderStatusRequest
 */
export class UpdateOrderStatusRequest extends Message<UpdateOrderStatusRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  constructor(data?: PartialMessage<UpdateOrderStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.UpdateOrderStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrderStatusRequest {
    return new UpdateOrderStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrderStatusRequest {
    return new UpdateOrderStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrderStatusRequest {
    return new UpdateOrderStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrderStatusRequest | PlainMessage<UpdateOrderStatusRequest> | undefined, b: UpdateOrderStatusRequest | PlainMessage<UpdateOrderStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrderStatusRequest, a, b);
  }
}

/**
 * @generated from message order.v1.UpdateOrderStatusResponse
 */
export class UpdateOrderStatusResponse extends Message<UpdateOrderStatusResponse> {
  /**
   * @generated from field: order.v1.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<UpdateOrderStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.UpdateOrderStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrderStatusResponse {
    return new UpdateOrderStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrderStatusResponse {
    return new UpdateOrderStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrderStatusResponse {
    return new UpdateOrderStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrderStatusResponse | PlainMessage<UpdateOrderStatusResponse> | undefined, b: UpdateOrderStatusResponse | PlainMessage<UpdateOrderStatusResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrderStatusResponse, a, b);
  }
}

/**
 * @generated from message order.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.StringValue username = 2;
   */
  username?: string;

  /**
   * @generated from field: google.protobuf.StringValue password_hash = 3;
   */
  passwordHash?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 4;
   */
  email?: string;

  /**
   * @generated from field: bool verified = 5;
   */
  verified = false;

  /**
   * @generated from field: google.protobuf.StringValue phone_number = 6;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue gender = 7;
   */
  gender?: string;

  /**
   * @generated from field: int64 role = 8;
   */
  role = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp date_of_birth = 9;
   */
  dateOfBirth?: Timestamp;

  /**
   * @generated from field: string address = 10;
   */
  address = "";

  /**
   * @generated from field: int32 balance = 11;
   */
  balance = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 12;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 13;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "order.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "message", T: StringValue },
    { no: 3, name: "password_hash", kind: "message", T: StringValue },
    { no: 4, name: "email", kind: "message", T: StringValue },
    { no: 5, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "phone_number", kind: "message", T: StringValue },
    { no: 7, name: "gender", kind: "message", T: StringValue },
    { no: 8, name: "role", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "date_of_birth", kind: "message", T: Timestamp },
    { no: 10, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "balance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "created_at", kind: "message", T: Timestamp },
    { no: 13, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

