// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file user/v1/user.proto (package user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message user.v1.CreateUserRequest
 */
export class CreateUserRequest extends Message<CreateUserRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: google.protobuf.StringValue username = 2;
   */
  username?: string;

  /**
   * @generated from field: google.protobuf.StringValue password_hash = 3;
   */
  passwordHash?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 4;
   */
  email?: string;

  /**
   * @generated from field: bool verified = 5;
   */
  verified = false;

  /**
   * @generated from field: google.protobuf.StringValue phone_number = 6;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue gender = 7;
   */
  gender?: string;

  /**
   * @generated from field: int64 role = 8;
   */
  role = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp date_of_birth = 9;
   */
  dateOfBirth?: Timestamp;

  /**
   * @generated from field: string address = 10;
   */
  address = "";

  /**
   * @generated from field: int32 balance = 11;
   */
  balance = 0;

  constructor(data?: PartialMessage<CreateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.CreateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "message", T: StringValue },
    { no: 3, name: "password_hash", kind: "message", T: StringValue },
    { no: 4, name: "email", kind: "message", T: StringValue },
    { no: 5, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "phone_number", kind: "message", T: StringValue },
    { no: 7, name: "gender", kind: "message", T: StringValue },
    { no: 8, name: "role", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "date_of_birth", kind: "message", T: Timestamp },
    { no: 10, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "balance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRequest {
    return new CreateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined, b: CreateUserRequest | PlainMessage<CreateUserRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserRequest, a, b);
  }
}

/**
 * @generated from message user.v1.CreateUserResponse
 */
export class CreateUserResponse extends Message<CreateUserResponse> {
  constructor(data?: PartialMessage<CreateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.CreateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserResponse {
    return new CreateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined, b: CreateUserResponse | PlainMessage<CreateUserResponse> | undefined): boolean {
    return proto3.util.equals(CreateUserResponse, a, b);
  }
}

/**
 * @generated from message user.v1.DeleteUserRequest
 */
export class DeleteUserRequest extends Message<DeleteUserRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<DeleteUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.DeleteUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserRequest {
    return new DeleteUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined, b: DeleteUserRequest | PlainMessage<DeleteUserRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserRequest, a, b);
  }
}

/**
 * @generated from message user.v1.DeleteUserResponse
 */
export class DeleteUserResponse extends Message<DeleteUserResponse> {
  constructor(data?: PartialMessage<DeleteUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.DeleteUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserResponse {
    return new DeleteUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined, b: DeleteUserResponse | PlainMessage<DeleteUserResponse> | undefined): boolean {
    return proto3.util.equals(DeleteUserResponse, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserByEmailRequest
 */
export class GetUserByEmailRequest extends Message<GetUserByEmailRequest> {
  /**
   * @generated from field: google.protobuf.StringValue email = 1;
   */
  email?: string;

  constructor(data?: PartialMessage<GetUserByEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserByEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByEmailRequest {
    return new GetUserByEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByEmailRequest {
    return new GetUserByEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByEmailRequest {
    return new GetUserByEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByEmailRequest | PlainMessage<GetUserByEmailRequest> | undefined, b: GetUserByEmailRequest | PlainMessage<GetUserByEmailRequest> | undefined): boolean {
    return proto3.util.equals(GetUserByEmailRequest, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserByEmailResponse
 */
export class GetUserByEmailResponse extends Message<GetUserByEmailResponse> {
  /**
   * @generated from field: user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserByEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserByEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByEmailResponse {
    return new GetUserByEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByEmailResponse {
    return new GetUserByEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByEmailResponse {
    return new GetUserByEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByEmailResponse | PlainMessage<GetUserByEmailResponse> | undefined, b: GetUserByEmailResponse | PlainMessage<GetUserByEmailResponse> | undefined): boolean {
    return proto3.util.equals(GetUserByEmailResponse, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserByIDRequest
 */
export class GetUserByIDRequest extends Message<GetUserByIDRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetUserByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByIDRequest {
    return new GetUserByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByIDRequest {
    return new GetUserByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByIDRequest {
    return new GetUserByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByIDRequest | PlainMessage<GetUserByIDRequest> | undefined, b: GetUserByIDRequest | PlainMessage<GetUserByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetUserByIDRequest, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserByIDResponse
 */
export class GetUserByIDResponse extends Message<GetUserByIDResponse> {
  /**
   * @generated from field: user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserByIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserByIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByIDResponse {
    return new GetUserByIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByIDResponse {
    return new GetUserByIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByIDResponse {
    return new GetUserByIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByIDResponse | PlainMessage<GetUserByIDResponse> | undefined, b: GetUserByIDResponse | PlainMessage<GetUserByIDResponse> | undefined): boolean {
    return proto3.util.equals(GetUserByIDResponse, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserByUsernameRequest
 */
export class GetUserByUsernameRequest extends Message<GetUserByUsernameRequest> {
  /**
   * @generated from field: google.protobuf.StringValue username = 1;
   */
  username?: string;

  constructor(data?: PartialMessage<GetUserByUsernameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserByUsernameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByUsernameRequest {
    return new GetUserByUsernameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByUsernameRequest {
    return new GetUserByUsernameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByUsernameRequest {
    return new GetUserByUsernameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByUsernameRequest | PlainMessage<GetUserByUsernameRequest> | undefined, b: GetUserByUsernameRequest | PlainMessage<GetUserByUsernameRequest> | undefined): boolean {
    return proto3.util.equals(GetUserByUsernameRequest, a, b);
  }
}

/**
 * @generated from message user.v1.GetUserByUsernameResponse
 */
export class GetUserByUsernameResponse extends Message<GetUserByUsernameResponse> {
  /**
   * @generated from field: user.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserByUsernameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GetUserByUsernameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserByUsernameResponse {
    return new GetUserByUsernameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserByUsernameResponse {
    return new GetUserByUsernameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserByUsernameResponse {
    return new GetUserByUsernameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserByUsernameResponse | PlainMessage<GetUserByUsernameResponse> | undefined, b: GetUserByUsernameResponse | PlainMessage<GetUserByUsernameResponse> | undefined): boolean {
    return proto3.util.equals(GetUserByUsernameResponse, a, b);
  }
}

/**
 * @generated from message user.v1.GooseDbVersion
 */
export class GooseDbVersion extends Message<GooseDbVersion> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int64 version_id = 2;
   */
  versionId = protoInt64.zero;

  /**
   * @generated from field: bool is_applied = 3;
   */
  isApplied = false;

  /**
   * @generated from field: google.protobuf.Timestamp tstamp = 4;
   */
  tstamp?: Timestamp;

  constructor(data?: PartialMessage<GooseDbVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.GooseDbVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "version_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "is_applied", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "tstamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromJsonString(jsonString, options);
  }

  static equals(a: GooseDbVersion | PlainMessage<GooseDbVersion> | undefined, b: GooseDbVersion | PlainMessage<GooseDbVersion> | undefined): boolean {
    return proto3.util.equals(GooseDbVersion, a, b);
  }
}

/**
 * @generated from message user.v1.ListUsersRequest
 */
export class ListUsersRequest extends Message<ListUsersRequest> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  constructor(data?: PartialMessage<ListUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.ListUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersRequest {
    return new ListUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined, b: ListUsersRequest | PlainMessage<ListUsersRequest> | undefined): boolean {
    return proto3.util.equals(ListUsersRequest, a, b);
  }
}

/**
 * @generated from message user.v1.ListUsersResponse
 */
export class ListUsersResponse extends Message<ListUsersResponse> {
  /**
   * @generated from field: repeated user.v1.ListUsersRow list = 1;
   */
  list: ListUsersRow[] = [];

  constructor(data?: PartialMessage<ListUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.ListUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ListUsersRow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersResponse {
    return new ListUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined, b: ListUsersResponse | PlainMessage<ListUsersResponse> | undefined): boolean {
    return proto3.util.equals(ListUsersResponse, a, b);
  }
}

/**
 * @generated from message user.v1.ListUsersRow
 */
export class ListUsersRow extends Message<ListUsersRow> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: google.protobuf.StringValue username = 2;
   */
  username?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 3;
   */
  email?: string;

  /**
   * @generated from field: google.protobuf.StringValue phone_number = 4;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue gender = 5;
   */
  gender?: string;

  /**
   * @generated from field: int64 role = 6;
   */
  role = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp date_of_birth = 7;
   */
  dateOfBirth?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<ListUsersRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.ListUsersRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "message", T: StringValue },
    { no: 3, name: "email", kind: "message", T: StringValue },
    { no: 4, name: "phone_number", kind: "message", T: StringValue },
    { no: 5, name: "gender", kind: "message", T: StringValue },
    { no: 6, name: "role", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "date_of_birth", kind: "message", T: Timestamp },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUsersRow {
    return new ListUsersRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUsersRow {
    return new ListUsersRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUsersRow {
    return new ListUsersRow().fromJsonString(jsonString, options);
  }

  static equals(a: ListUsersRow | PlainMessage<ListUsersRow> | undefined, b: ListUsersRow | PlainMessage<ListUsersRow> | undefined): boolean {
    return proto3.util.equals(ListUsersRow, a, b);
  }
}

/**
 * @generated from message user.v1.Order
 */
export class Order extends Message<Order> {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: int32 price = 5;
   */
  price = 0;

  /**
   * @generated from field: string status = 6;
   */
  status = "";

  /**
   * @generated from field: string payment_status = 7;
   */
  paymentStatus = "";

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
    { no: 5, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "payment_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

/**
 * @generated from message user.v1.OrderItem
 */
export class OrderItem extends Message<OrderItem> {
  /**
   * @generated from field: string orderitem_id = 1;
   */
  orderitemId = "";

  /**
   * @generated from field: string order_id = 2;
   */
  orderId = "";

  /**
   * @generated from field: string product_id = 3;
   */
  productId = "";

  /**
   * @generated from field: int32 quantity = 4;
   */
  quantity = 0;

  /**
   * @generated from field: int32 price = 5;
   */
  price = 0;

  constructor(data?: PartialMessage<OrderItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.OrderItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orderitem_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderItem {
    return new OrderItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJsonString(jsonString, options);
  }

  static equals(a: OrderItem | PlainMessage<OrderItem> | undefined, b: OrderItem | PlainMessage<OrderItem> | undefined): boolean {
    return proto3.util.equals(OrderItem, a, b);
  }
}

/**
 * @generated from message user.v1.Product
 */
export class Product extends Message<Product> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: int32 quantity = 3;
   */
  quantity = 0;

  /**
   * @generated from field: int32 price = 4;
   */
  price = 0;

  /**
   * @generated from field: string category = 5;
   */
  category = "";

  constructor(data?: PartialMessage<Product>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.Product";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Product {
    return new Product().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJsonString(jsonString, options);
  }

  static equals(a: Product | PlainMessage<Product> | undefined, b: Product | PlainMessage<Product> | undefined): boolean {
    return proto3.util.equals(Product, a, b);
  }
}

/**
 * @generated from message user.v1.UpdateUserBalanceRequest
 */
export class UpdateUserBalanceRequest extends Message<UpdateUserBalanceRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: int32 balance = 2;
   */
  balance = 0;

  constructor(data?: PartialMessage<UpdateUserBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.UpdateUserBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "balance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserBalanceRequest {
    return new UpdateUserBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserBalanceRequest {
    return new UpdateUserBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserBalanceRequest {
    return new UpdateUserBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserBalanceRequest | PlainMessage<UpdateUserBalanceRequest> | undefined, b: UpdateUserBalanceRequest | PlainMessage<UpdateUserBalanceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserBalanceRequest, a, b);
  }
}

/**
 * @generated from message user.v1.UpdateUserBalanceResponse
 */
export class UpdateUserBalanceResponse extends Message<UpdateUserBalanceResponse> {
  /**
   * @generated from field: int32 value = 1;
   */
  value = 0;

  constructor(data?: PartialMessage<UpdateUserBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.UpdateUserBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserBalanceResponse {
    return new UpdateUserBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserBalanceResponse {
    return new UpdateUserBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserBalanceResponse {
    return new UpdateUserBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserBalanceResponse | PlainMessage<UpdateUserBalanceResponse> | undefined, b: UpdateUserBalanceResponse | PlainMessage<UpdateUserBalanceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserBalanceResponse, a, b);
  }
}

/**
 * @generated from message user.v1.UpdateUserRequest
 */
export class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   * @generated from field: google.protobuf.StringValue username = 1;
   */
  username?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 2;
   */
  email?: string;

  /**
   * @generated from field: google.protobuf.StringValue phone_number = 3;
   */
  phoneNumber?: string;

  /**
   * @generated from field: bool verified = 4;
   */
  verified = false;

  /**
   * @generated from field: google.protobuf.StringValue gender = 5;
   */
  gender?: string;

  /**
   * @generated from field: int64 role = 6;
   */
  role = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp date_of_birth = 7;
   */
  dateOfBirth?: Timestamp;

  /**
   * @generated from field: string user_id = 8;
   */
  userId = "";

  constructor(data?: PartialMessage<UpdateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.UpdateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "message", T: StringValue },
    { no: 2, name: "email", kind: "message", T: StringValue },
    { no: 3, name: "phone_number", kind: "message", T: StringValue },
    { no: 4, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "gender", kind: "message", T: StringValue },
    { no: 6, name: "role", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "date_of_birth", kind: "message", T: Timestamp },
    { no: 8, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRequest, a, b);
  }
}

/**
 * @generated from message user.v1.UpdateUserPasswordRequest
 */
export class UpdateUserPasswordRequest extends Message<UpdateUserPasswordRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: google.protobuf.StringValue password_hash = 2;
   */
  passwordHash?: string;

  constructor(data?: PartialMessage<UpdateUserPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.UpdateUserPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password_hash", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserPasswordRequest {
    return new UpdateUserPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserPasswordRequest {
    return new UpdateUserPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserPasswordRequest {
    return new UpdateUserPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserPasswordRequest | PlainMessage<UpdateUserPasswordRequest> | undefined, b: UpdateUserPasswordRequest | PlainMessage<UpdateUserPasswordRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserPasswordRequest, a, b);
  }
}

/**
 * @generated from message user.v1.UpdateUserPasswordResponse
 */
export class UpdateUserPasswordResponse extends Message<UpdateUserPasswordResponse> {
  constructor(data?: PartialMessage<UpdateUserPasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.UpdateUserPasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserPasswordResponse {
    return new UpdateUserPasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserPasswordResponse {
    return new UpdateUserPasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserPasswordResponse {
    return new UpdateUserPasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserPasswordResponse | PlainMessage<UpdateUserPasswordResponse> | undefined, b: UpdateUserPasswordResponse | PlainMessage<UpdateUserPasswordResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserPasswordResponse, a, b);
  }
}

/**
 * @generated from message user.v1.UpdateUserResponse
 */
export class UpdateUserResponse extends Message<UpdateUserResponse> {
  constructor(data?: PartialMessage<UpdateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.UpdateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined, b: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserResponse, a, b);
  }
}

/**
 * @generated from message user.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: google.protobuf.StringValue username = 2;
   */
  username?: string;

  /**
   * @generated from field: google.protobuf.StringValue password_hash = 3;
   */
  passwordHash?: string;

  /**
   * @generated from field: google.protobuf.StringValue email = 4;
   */
  email?: string;

  /**
   * @generated from field: bool verified = 5;
   */
  verified = false;

  /**
   * @generated from field: google.protobuf.StringValue phone_number = 6;
   */
  phoneNumber?: string;

  /**
   * @generated from field: google.protobuf.StringValue gender = 7;
   */
  gender?: string;

  /**
   * @generated from field: int64 role = 8;
   */
  role = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp date_of_birth = 9;
   */
  dateOfBirth?: Timestamp;

  /**
   * @generated from field: string address = 10;
   */
  address = "";

  /**
   * @generated from field: int32 balance = 11;
   */
  balance = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 12;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 13;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "user.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "message", T: StringValue },
    { no: 3, name: "password_hash", kind: "message", T: StringValue },
    { no: 4, name: "email", kind: "message", T: StringValue },
    { no: 5, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "phone_number", kind: "message", T: StringValue },
    { no: 7, name: "gender", kind: "message", T: StringValue },
    { no: 8, name: "role", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "date_of_birth", kind: "message", T: Timestamp },
    { no: 10, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "balance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "created_at", kind: "message", T: Timestamp },
    { no: 13, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

