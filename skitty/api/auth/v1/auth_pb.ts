// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file auth/v1/auth.proto (package auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum auth.v1.Role
 */
export enum Role {
  /**
   * Default value
   *
   * @generated from enum value: ROLE_INVALID = 0;
   */
  ROLE_INVALID = 0,

  /**
   * @generated from enum value: USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: EDITOR = 62;
   */
  EDITOR = 62,

  /**
   * @generated from enum value: DEVELOPER = 63;
   */
  DEVELOPER = 63,

  /**
   * @generated from enum value: ADMIN = 64;
   */
  ADMIN = 64,
}
// Retrieve enum metadata with: proto3.getEnumType(Role)
proto3.util.setEnumType(Role, "auth.v1.Role", [
  { no: 0, name: "ROLE_INVALID" },
  { no: 1, name: "USER" },
  { no: 62, name: "EDITOR" },
  { no: 63, name: "DEVELOPER" },
  { no: 64, name: "ADMIN" },
]);

/**
 * The user profile message
 *
 * @generated from message auth.v1.AuthUser
 */
export class AuthUser extends Message<AuthUser> {
  /**
   * ID is required and must not be empty
   *
   * @generated from field: string ID = 1;
   */
  ID = "";

  /**
   * Username must be 8-24 characters
   *
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string phone_number = 3;
   */
  phoneNumber = "";

  /**
   * Avatar must be a valid URL
   *
   * @generated from field: string avatar = 4;
   */
  avatar = "";

  /**
   * `email` validates that a string field is a valid email.
   *
   * @generated from field: string email = 5;
   */
  email = "";

  /**
   * @generated from field: string location = 6;
   */
  location = "";

  /**
   * @generated from field: bool verified = 7;
   */
  verified = false;

  /**
   * @generated from field: int64 role = 8;
   */
  role = protoInt64.zero;

  /**
   * @generated from field: repeated auth.v1.UserSession sessions = 9;
   */
  sessions: UserSession[] = [];

  /**
   * @generated from field: int32 sessionNumber = 10;
   */
  sessionNumber = 0;

  constructor(data?: PartialMessage<AuthUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.AuthUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "avatar", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "role", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "sessions", kind: "message", T: UserSession, repeated: true },
    { no: 10, name: "sessionNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthUser {
    return new AuthUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthUser {
    return new AuthUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthUser {
    return new AuthUser().fromJsonString(jsonString, options);
  }

  static equals(a: AuthUser | PlainMessage<AuthUser> | undefined, b: AuthUser | PlainMessage<AuthUser> | undefined): boolean {
    return proto3.util.equals(AuthUser, a, b);
  }
}

/**
 * @generated from message auth.v1.UserSession
 */
export class UserSession extends Message<UserSession> {
  /**
   * @generated from field: int32 tokenId = 1;
   */
  tokenId = 0;

  /**
   * UserAgent
   *
   * @generated from field: string agent = 2;
   */
  agent = "";

  /**
   * IssuedAt time
   *
   * @generated from field: int64 iat = 3;
   */
  iat = protoInt64.zero;

  /**
   * ExpireAt time
   *
   * @generated from field: int64 exp = 4;
   */
  exp = protoInt64.zero;

  constructor(data?: PartialMessage<UserSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.UserSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokenId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "agent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "iat", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "exp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserSession {
    return new UserSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserSession {
    return new UserSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserSession {
    return new UserSession().fromJsonString(jsonString, options);
  }

  static equals(a: UserSession | PlainMessage<UserSession> | undefined, b: UserSession | PlainMessage<UserSession> | undefined): boolean {
    return proto3.util.equals(UserSession, a, b);
  }
}

/**
 * @generated from message auth.v1.JwtObj
 */
export class JwtObj extends Message<JwtObj> {
  /**
   * @generated from field: int32 tokenId = 1;
   */
  tokenId = 0;

  /**
   * ID is required and must not be empty
   *
   * @generated from field: string ID = 2;
   */
  ID = "";

  /**
   * @generated from field: string roles = 3;
   */
  roles = "";

  /**
   * IssuedAt time
   *
   * @generated from field: int64 iat = 4;
   */
  iat = protoInt64.zero;

  /**
   * ExpireAt time
   *
   * @generated from field: int64 exp = 5;
   */
  exp = protoInt64.zero;

  constructor(data?: PartialMessage<JwtObj>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.JwtObj";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokenId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "iat", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "exp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JwtObj {
    return new JwtObj().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JwtObj {
    return new JwtObj().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JwtObj {
    return new JwtObj().fromJsonString(jsonString, options);
  }

  static equals(a: JwtObj | PlainMessage<JwtObj> | undefined, b: JwtObj | PlainMessage<JwtObj> | undefined): boolean {
    return proto3.util.equals(JwtObj, a, b);
  }
}

/**
 * @generated from message auth.v1.EmailLoginRequest
 */
export class EmailLoginRequest extends Message<EmailLoginRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<EmailLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.EmailLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailLoginRequest {
    return new EmailLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailLoginRequest {
    return new EmailLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailLoginRequest {
    return new EmailLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EmailLoginRequest | PlainMessage<EmailLoginRequest> | undefined, b: EmailLoginRequest | PlainMessage<EmailLoginRequest> | undefined): boolean {
    return proto3.util.equals(EmailLoginRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.EmailLoginResponse
 */
export class EmailLoginResponse extends Message<EmailLoginResponse> {
  /**
   * @generated from field: string sessionId = 1;
   */
  sessionId = "";

  /**
   * @generated from field: string accessToken = 2;
   */
  accessToken = "";

  constructor(data?: PartialMessage<EmailLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.EmailLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sessionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accessToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailLoginResponse {
    return new EmailLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailLoginResponse {
    return new EmailLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailLoginResponse {
    return new EmailLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EmailLoginResponse | PlainMessage<EmailLoginResponse> | undefined, b: EmailLoginResponse | PlainMessage<EmailLoginResponse> | undefined): boolean {
    return proto3.util.equals(EmailLoginResponse, a, b);
  }
}

/**
 * @generated from message auth.v1.RegisterUserRequest
 */
export class RegisterUserRequest extends Message<RegisterUserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<RegisterUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.RegisterUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterUserRequest {
    return new RegisterUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterUserRequest {
    return new RegisterUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterUserRequest {
    return new RegisterUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterUserRequest | PlainMessage<RegisterUserRequest> | undefined, b: RegisterUserRequest | PlainMessage<RegisterUserRequest> | undefined): boolean {
    return proto3.util.equals(RegisterUserRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.RegisterUserResponse
 */
export class RegisterUserResponse extends Message<RegisterUserResponse> {
  constructor(data?: PartialMessage<RegisterUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.RegisterUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterUserResponse {
    return new RegisterUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterUserResponse {
    return new RegisterUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterUserResponse {
    return new RegisterUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterUserResponse | PlainMessage<RegisterUserResponse> | undefined, b: RegisterUserResponse | PlainMessage<RegisterUserResponse> | undefined): boolean {
    return proto3.util.equals(RegisterUserResponse, a, b);
  }
}

/**
 * @generated from message auth.v1.RefreshRequest
 */
export class RefreshRequest extends Message<RefreshRequest> {
  constructor(data?: PartialMessage<RefreshRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.RefreshRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshRequest {
    return new RefreshRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshRequest {
    return new RefreshRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshRequest {
    return new RefreshRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshRequest | PlainMessage<RefreshRequest> | undefined, b: RefreshRequest | PlainMessage<RefreshRequest> | undefined): boolean {
    return proto3.util.equals(RefreshRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.RefreshResponse
 */
export class RefreshResponse extends Message<RefreshResponse> {
  /**
   * @generated from field: string sessionId = 1;
   */
  sessionId = "";

  /**
   * @generated from field: string accessToken = 2;
   */
  accessToken = "";

  constructor(data?: PartialMessage<RefreshResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.RefreshResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sessionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "accessToken", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshResponse {
    return new RefreshResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshResponse {
    return new RefreshResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshResponse {
    return new RefreshResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshResponse | PlainMessage<RefreshResponse> | undefined, b: RefreshResponse | PlainMessage<RefreshResponse> | undefined): boolean {
    return proto3.util.equals(RefreshResponse, a, b);
  }
}

/**
 * @generated from message auth.v1.RevokeRequest
 */
export class RevokeRequest extends Message<RevokeRequest> {
  /**
   * @generated from field: int32 sessionNumber = 1;
   */
  sessionNumber = 0;

  constructor(data?: PartialMessage<RevokeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.RevokeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sessionNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeRequest {
    return new RevokeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeRequest {
    return new RevokeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeRequest {
    return new RevokeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeRequest | PlainMessage<RevokeRequest> | undefined, b: RevokeRequest | PlainMessage<RevokeRequest> | undefined): boolean {
    return proto3.util.equals(RevokeRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.RevokeResponse
 */
export class RevokeResponse extends Message<RevokeResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<RevokeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.RevokeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeResponse {
    return new RevokeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeResponse {
    return new RevokeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeResponse {
    return new RevokeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeResponse | PlainMessage<RevokeResponse> | undefined, b: RevokeResponse | PlainMessage<RevokeResponse> | undefined): boolean {
    return proto3.util.equals(RevokeResponse, a, b);
  }
}

/**
 * @generated from message auth.v1.InvalidateAllSessionsRequest
 */
export class InvalidateAllSessionsRequest extends Message<InvalidateAllSessionsRequest> {
  constructor(data?: PartialMessage<InvalidateAllSessionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.InvalidateAllSessionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InvalidateAllSessionsRequest {
    return new InvalidateAllSessionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InvalidateAllSessionsRequest {
    return new InvalidateAllSessionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InvalidateAllSessionsRequest {
    return new InvalidateAllSessionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InvalidateAllSessionsRequest | PlainMessage<InvalidateAllSessionsRequest> | undefined, b: InvalidateAllSessionsRequest | PlainMessage<InvalidateAllSessionsRequest> | undefined): boolean {
    return proto3.util.equals(InvalidateAllSessionsRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.InvalidateAllSessionsResponse
 */
export class InvalidateAllSessionsResponse extends Message<InvalidateAllSessionsResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<InvalidateAllSessionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.InvalidateAllSessionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InvalidateAllSessionsResponse {
    return new InvalidateAllSessionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InvalidateAllSessionsResponse {
    return new InvalidateAllSessionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InvalidateAllSessionsResponse {
    return new InvalidateAllSessionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InvalidateAllSessionsResponse | PlainMessage<InvalidateAllSessionsResponse> | undefined, b: InvalidateAllSessionsResponse | PlainMessage<InvalidateAllSessionsResponse> | undefined): boolean {
    return proto3.util.equals(InvalidateAllSessionsResponse, a, b);
  }
}

