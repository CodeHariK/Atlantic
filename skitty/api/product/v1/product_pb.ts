// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file product/v1/product.proto (package product.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Message, proto3, protoInt64, StringValue, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message product.v1.Attribute
 */
export class Attribute extends Message<Attribute> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string attribute_name = 2;
   */
  attributeName = "";

  /**
   * @generated from field: string attribute_value = 3;
   */
  attributeValue = "";

  constructor(data?: PartialMessage<Attribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.Attribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "attribute_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "attribute_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attribute {
    return new Attribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attribute {
    return new Attribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attribute {
    return new Attribute().fromJsonString(jsonString, options);
  }

  static equals(a: Attribute | PlainMessage<Attribute> | undefined, b: Attribute | PlainMessage<Attribute> | undefined): boolean {
    return proto3.util.equals(Attribute, a, b);
  }
}

/**
 * @generated from message product.v1.Cart
 */
export class Cart extends Message<Cart> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 3;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Cart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.Cart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cart {
    return new Cart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cart {
    return new Cart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cart {
    return new Cart().fromJsonString(jsonString, options);
  }

  static equals(a: Cart | PlainMessage<Cart> | undefined, b: Cart | PlainMessage<Cart> | undefined): boolean {
    return proto3.util.equals(Cart, a, b);
  }
}

/**
 * @generated from message product.v1.CartItem
 */
export class CartItem extends Message<CartItem> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 cart_id = 2;
   */
  cartId = 0;

  /**
   * @generated from field: int32 product_id = 3;
   */
  productId = 0;

  /**
   * @generated from field: int32 quantity = 4;
   */
  quantity = 0;

  constructor(data?: PartialMessage<CartItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.CartItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "cart_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CartItem {
    return new CartItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CartItem {
    return new CartItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CartItem {
    return new CartItem().fromJsonString(jsonString, options);
  }

  static equals(a: CartItem | PlainMessage<CartItem> | undefined, b: CartItem | PlainMessage<CartItem> | undefined): boolean {
    return proto3.util.equals(CartItem, a, b);
  }
}

/**
 * @generated from message product.v1.CreateProductAndDescriptionRequest
 */
export class CreateProductAndDescriptionRequest extends Message<CreateProductAndDescriptionRequest> {
  constructor(data?: PartialMessage<CreateProductAndDescriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.CreateProductAndDescriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProductAndDescriptionRequest {
    return new CreateProductAndDescriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProductAndDescriptionRequest {
    return new CreateProductAndDescriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProductAndDescriptionRequest {
    return new CreateProductAndDescriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProductAndDescriptionRequest | PlainMessage<CreateProductAndDescriptionRequest> | undefined, b: CreateProductAndDescriptionRequest | PlainMessage<CreateProductAndDescriptionRequest> | undefined): boolean {
    return proto3.util.equals(CreateProductAndDescriptionRequest, a, b);
  }
}

/**
 * @generated from message product.v1.CreateProductAndDescriptionResponse
 */
export class CreateProductAndDescriptionResponse extends Message<CreateProductAndDescriptionResponse> {
  /**
   * @generated from field: product.v1.CreateProductAndDescriptionRow create_product_and_description_row = 1;
   */
  createProductAndDescriptionRow?: CreateProductAndDescriptionRow;

  constructor(data?: PartialMessage<CreateProductAndDescriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.CreateProductAndDescriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "create_product_and_description_row", kind: "message", T: CreateProductAndDescriptionRow },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProductAndDescriptionResponse {
    return new CreateProductAndDescriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProductAndDescriptionResponse {
    return new CreateProductAndDescriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProductAndDescriptionResponse {
    return new CreateProductAndDescriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProductAndDescriptionResponse | PlainMessage<CreateProductAndDescriptionResponse> | undefined, b: CreateProductAndDescriptionResponse | PlainMessage<CreateProductAndDescriptionResponse> | undefined): boolean {
    return proto3.util.equals(CreateProductAndDescriptionResponse, a, b);
  }
}

/**
 * @generated from message product.v1.CreateProductAndDescriptionRow
 */
export class CreateProductAndDescriptionRow extends Message<CreateProductAndDescriptionRow> {
  constructor(data?: PartialMessage<CreateProductAndDescriptionRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.CreateProductAndDescriptionRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProductAndDescriptionRow {
    return new CreateProductAndDescriptionRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProductAndDescriptionRow {
    return new CreateProductAndDescriptionRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProductAndDescriptionRow {
    return new CreateProductAndDescriptionRow().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProductAndDescriptionRow | PlainMessage<CreateProductAndDescriptionRow> | undefined, b: CreateProductAndDescriptionRow | PlainMessage<CreateProductAndDescriptionRow> | undefined): boolean {
    return proto3.util.equals(CreateProductAndDescriptionRow, a, b);
  }
}

/**
 * @generated from message product.v1.GetCategoryPathRequest
 */
export class GetCategoryPathRequest extends Message<GetCategoryPathRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetCategoryPathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.GetCategoryPathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCategoryPathRequest {
    return new GetCategoryPathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCategoryPathRequest {
    return new GetCategoryPathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCategoryPathRequest {
    return new GetCategoryPathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCategoryPathRequest | PlainMessage<GetCategoryPathRequest> | undefined, b: GetCategoryPathRequest | PlainMessage<GetCategoryPathRequest> | undefined): boolean {
    return proto3.util.equals(GetCategoryPathRequest, a, b);
  }
}

/**
 * @generated from message product.v1.GetCategoryPathResponse
 */
export class GetCategoryPathResponse extends Message<GetCategoryPathResponse> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<GetCategoryPathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.GetCategoryPathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCategoryPathResponse {
    return new GetCategoryPathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCategoryPathResponse {
    return new GetCategoryPathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCategoryPathResponse {
    return new GetCategoryPathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCategoryPathResponse | PlainMessage<GetCategoryPathResponse> | undefined, b: GetCategoryPathResponse | PlainMessage<GetCategoryPathResponse> | undefined): boolean {
    return proto3.util.equals(GetCategoryPathResponse, a, b);
  }
}

/**
 * @generated from message product.v1.GetProductWithCategoryPathRequest
 */
export class GetProductWithCategoryPathRequest extends Message<GetProductWithCategoryPathRequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetProductWithCategoryPathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.GetProductWithCategoryPathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductWithCategoryPathRequest {
    return new GetProductWithCategoryPathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductWithCategoryPathRequest {
    return new GetProductWithCategoryPathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductWithCategoryPathRequest {
    return new GetProductWithCategoryPathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductWithCategoryPathRequest | PlainMessage<GetProductWithCategoryPathRequest> | undefined, b: GetProductWithCategoryPathRequest | PlainMessage<GetProductWithCategoryPathRequest> | undefined): boolean {
    return proto3.util.equals(GetProductWithCategoryPathRequest, a, b);
  }
}

/**
 * @generated from message product.v1.GetProductWithCategoryPathResponse
 */
export class GetProductWithCategoryPathResponse extends Message<GetProductWithCategoryPathResponse> {
  /**
   * @generated from field: product.v1.GetProductWithCategoryPathRow get_product_with_category_path_row = 1;
   */
  getProductWithCategoryPathRow?: GetProductWithCategoryPathRow;

  constructor(data?: PartialMessage<GetProductWithCategoryPathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.GetProductWithCategoryPathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "get_product_with_category_path_row", kind: "message", T: GetProductWithCategoryPathRow },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductWithCategoryPathResponse {
    return new GetProductWithCategoryPathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductWithCategoryPathResponse {
    return new GetProductWithCategoryPathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductWithCategoryPathResponse {
    return new GetProductWithCategoryPathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductWithCategoryPathResponse | PlainMessage<GetProductWithCategoryPathResponse> | undefined, b: GetProductWithCategoryPathResponse | PlainMessage<GetProductWithCategoryPathResponse> | undefined): boolean {
    return proto3.util.equals(GetProductWithCategoryPathResponse, a, b);
  }
}

/**
 * @generated from message product.v1.GetProductWithCategoryPathRow
 */
export class GetProductWithCategoryPathRow extends Message<GetProductWithCategoryPathRow> {
  /**
   * @generated from field: int32 product_id = 1;
   */
  productId = 0;

  /**
   * @generated from field: google.protobuf.StringValue product_name = 2;
   */
  productName?: string;

  /**
   * @generated from field: int32 category_id = 3;
   */
  categoryId = 0;

  /**
   * @generated from field: string category_path = 4;
   */
  categoryPath = "";

  constructor(data?: PartialMessage<GetProductWithCategoryPathRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.GetProductWithCategoryPathRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "product_name", kind: "message", T: StringValue },
    { no: 3, name: "category_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "category_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductWithCategoryPathRow {
    return new GetProductWithCategoryPathRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductWithCategoryPathRow {
    return new GetProductWithCategoryPathRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductWithCategoryPathRow {
    return new GetProductWithCategoryPathRow().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductWithCategoryPathRow | PlainMessage<GetProductWithCategoryPathRow> | undefined, b: GetProductWithCategoryPathRow | PlainMessage<GetProductWithCategoryPathRow> | undefined): boolean {
    return proto3.util.equals(GetProductWithCategoryPathRow, a, b);
  }
}

/**
 * @generated from message product.v1.GooseDbVersion
 */
export class GooseDbVersion extends Message<GooseDbVersion> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int64 version_id = 2;
   */
  versionId = protoInt64.zero;

  /**
   * @generated from field: bool is_applied = 3;
   */
  isApplied = false;

  /**
   * @generated from field: google.protobuf.Timestamp tstamp = 4;
   */
  tstamp?: Timestamp;

  constructor(data?: PartialMessage<GooseDbVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.GooseDbVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "version_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "is_applied", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "tstamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GooseDbVersion {
    return new GooseDbVersion().fromJsonString(jsonString, options);
  }

  static equals(a: GooseDbVersion | PlainMessage<GooseDbVersion> | undefined, b: GooseDbVersion | PlainMessage<GooseDbVersion> | undefined): boolean {
    return proto3.util.equals(GooseDbVersion, a, b);
  }
}

/**
 * @generated from message product.v1.Inventory
 */
export class Inventory extends Message<Inventory> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 product_id = 2;
   */
  productId = 0;

  /**
   * @generated from field: int32 seller_id = 3;
   */
  sellerId = 0;

  /**
   * @generated from field: int32 quantity = 4;
   */
  quantity = 0;

  /**
   * @generated from field: int64 amount_units = 5;
   */
  amountUnits = protoInt64.zero;

  /**
   * @generated from field: int32 amount_nanos = 6;
   */
  amountNanos = 0;

  /**
   * @generated from field: string amount_currency = 7;
   */
  amountCurrency = "";

  constructor(data?: PartialMessage<Inventory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.Inventory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "seller_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "amount_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "amount_nanos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "amount_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Inventory {
    return new Inventory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Inventory {
    return new Inventory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Inventory {
    return new Inventory().fromJsonString(jsonString, options);
  }

  static equals(a: Inventory | PlainMessage<Inventory> | undefined, b: Inventory | PlainMessage<Inventory> | undefined): boolean {
    return proto3.util.equals(Inventory, a, b);
  }
}

/**
 * @generated from message product.v1.Location
 */
export class Location extends Message<Location> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: string city = 3;
   */
  city = "";

  /**
   * @generated from field: string state = 4;
   */
  state = "";

  /**
   * @generated from field: string country = 5;
   */
  country = "";

  /**
   * @generated from field: string postal_code = 6;
   */
  postalCode = "";

  /**
   * @generated from field: double latitude = 7;
   */
  latitude = 0;

  /**
   * @generated from field: double longitude = 8;
   */
  longitude = 0;

  constructor(data?: PartialMessage<Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "postal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Location {
    return new Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Location {
    return new Location().fromJsonString(jsonString, options);
  }

  static equals(a: Location | PlainMessage<Location> | undefined, b: Location | PlainMessage<Location> | undefined): boolean {
    return proto3.util.equals(Location, a, b);
  }
}

/**
 * @generated from message product.v1.Order
 */
export class Order extends Message<Order> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: int64 amount_units = 5;
   */
  amountUnits = protoInt64.zero;

  /**
   * @generated from field: int32 amount_nanos = 6;
   */
  amountNanos = 0;

  /**
   * @generated from field: string amount_currency = 7;
   */
  amountCurrency = "";

  /**
   * @generated from field: string status = 8;
   */
  status = "";

  /**
   * @generated from field: string payment_status = 9;
   */
  paymentStatus = "";

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
    { no: 5, name: "amount_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "amount_nanos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "amount_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "payment_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

/**
 * @generated from message product.v1.OrderItem
 */
export class OrderItem extends Message<OrderItem> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 order_id = 2;
   */
  orderId = 0;

  /**
   * @generated from field: int32 product_id = 3;
   */
  productId = 0;

  /**
   * @generated from field: int32 seller_id = 4;
   */
  sellerId = 0;

  /**
   * @generated from field: int32 quantity = 5;
   */
  quantity = 0;

  /**
   * @generated from field: int64 amount_units = 6;
   */
  amountUnits = protoInt64.zero;

  /**
   * @generated from field: int32 amount_nanos = 7;
   */
  amountNanos = 0;

  /**
   * @generated from field: string amount_currency = 8;
   */
  amountCurrency = "";

  /**
   * @generated from field: string status = 9;
   */
  status = "";

  /**
   * @generated from field: string payment_status = 10;
   */
  paymentStatus = "";

  constructor(data?: PartialMessage<OrderItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.OrderItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "order_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "seller_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "amount_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "amount_nanos", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "amount_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "payment_status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderItem {
    return new OrderItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderItem {
    return new OrderItem().fromJsonString(jsonString, options);
  }

  static equals(a: OrderItem | PlainMessage<OrderItem> | undefined, b: OrderItem | PlainMessage<OrderItem> | undefined): boolean {
    return proto3.util.equals(OrderItem, a, b);
  }
}

/**
 * @generated from message product.v1.Product
 */
export class Product extends Message<Product> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: google.protobuf.StringValue product_name = 2;
   */
  productName?: string;

  /**
   * @generated from field: int32 category_id = 3;
   */
  categoryId = 0;

  constructor(data?: PartialMessage<Product>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.Product";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "product_name", kind: "message", T: StringValue },
    { no: 3, name: "category_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Product {
    return new Product().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJsonString(jsonString, options);
  }

  static equals(a: Product | PlainMessage<Product> | undefined, b: Product | PlainMessage<Product> | undefined): boolean {
    return proto3.util.equals(Product, a, b);
  }
}

/**
 * @generated from message product.v1.ProductAttribute
 */
export class ProductAttribute extends Message<ProductAttribute> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 product_id = 2;
   */
  productId = 0;

  /**
   * @generated from field: google.protobuf.Int32Value variant_id = 3;
   */
  variantId?: number;

  /**
   * @generated from field: int32 attribute_id = 4;
   */
  attributeId = 0;

  constructor(data?: PartialMessage<ProductAttribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.ProductAttribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "variant_id", kind: "message", T: Int32Value },
    { no: 4, name: "attribute_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductAttribute {
    return new ProductAttribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductAttribute {
    return new ProductAttribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductAttribute {
    return new ProductAttribute().fromJsonString(jsonString, options);
  }

  static equals(a: ProductAttribute | PlainMessage<ProductAttribute> | undefined, b: ProductAttribute | PlainMessage<ProductAttribute> | undefined): boolean {
    return proto3.util.equals(ProductAttribute, a, b);
  }
}

/**
 * @generated from message product.v1.ProductCategory
 */
export class ProductCategory extends Message<ProductCategory> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Int32Value parent_id = 3;
   */
  parentId?: number;

  constructor(data?: PartialMessage<ProductCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.ProductCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parent_id", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductCategory {
    return new ProductCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductCategory {
    return new ProductCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductCategory {
    return new ProductCategory().fromJsonString(jsonString, options);
  }

  static equals(a: ProductCategory | PlainMessage<ProductCategory> | undefined, b: ProductCategory | PlainMessage<ProductCategory> | undefined): boolean {
    return proto3.util.equals(ProductCategory, a, b);
  }
}

/**
 * @generated from message product.v1.ProductComment
 */
export class ProductComment extends Message<ProductComment> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: google.protobuf.StringValue comment = 2;
   */
  comment?: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<ProductComment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.ProductComment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "comment", kind: "message", T: StringValue },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductComment {
    return new ProductComment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductComment {
    return new ProductComment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductComment {
    return new ProductComment().fromJsonString(jsonString, options);
  }

  static equals(a: ProductComment | PlainMessage<ProductComment> | undefined, b: ProductComment | PlainMessage<ProductComment> | undefined): boolean {
    return proto3.util.equals(ProductComment, a, b);
  }
}

/**
 * @generated from message product.v1.ProductDescription
 */
export class ProductDescription extends Message<ProductDescription> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 product_id = 2;
   */
  productId = 0;

  /**
   * @generated from field: google.protobuf.Int32Value product_variant_id = 3;
   */
  productVariantId?: number;

  /**
   * @generated from field: google.protobuf.StringValue description = 4;
   */
  description?: string;

  /**
   * @generated from field: repeated string images = 5;
   */
  images: string[] = [];

  /**
   * @generated from field: repeated string videos = 6;
   */
  videos: string[] = [];

  constructor(data?: PartialMessage<ProductDescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.ProductDescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "product_variant_id", kind: "message", T: Int32Value },
    { no: 4, name: "description", kind: "message", T: StringValue },
    { no: 5, name: "images", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "videos", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductDescription {
    return new ProductDescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductDescription {
    return new ProductDescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductDescription {
    return new ProductDescription().fromJsonString(jsonString, options);
  }

  static equals(a: ProductDescription | PlainMessage<ProductDescription> | undefined, b: ProductDescription | PlainMessage<ProductDescription> | undefined): boolean {
    return proto3.util.equals(ProductDescription, a, b);
  }
}

/**
 * @generated from message product.v1.ProductPromotion
 */
export class ProductPromotion extends Message<ProductPromotion> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string promotion_name = 2;
   */
  promotionName = "";

  /**
   * @generated from field: int32 discount = 3;
   */
  discount = 0;

  /**
   * @generated from field: int32 product_id = 4;
   */
  productId = 0;

  /**
   * @generated from field: google.protobuf.Timestamp start_date = 5;
   */
  startDate?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_date = 6;
   */
  endDate?: Timestamp;

  constructor(data?: PartialMessage<ProductPromotion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.ProductPromotion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "promotion_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "discount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "start_date", kind: "message", T: Timestamp },
    { no: 6, name: "end_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductPromotion {
    return new ProductPromotion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductPromotion {
    return new ProductPromotion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductPromotion {
    return new ProductPromotion().fromJsonString(jsonString, options);
  }

  static equals(a: ProductPromotion | PlainMessage<ProductPromotion> | undefined, b: ProductPromotion | PlainMessage<ProductPromotion> | undefined): boolean {
    return proto3.util.equals(ProductPromotion, a, b);
  }
}

/**
 * @generated from message product.v1.ProductReview
 */
export class ProductReview extends Message<ProductReview> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 user_id = 2;
   */
  userId = 0;

  /**
   * @generated from field: int32 product_id = 3;
   */
  productId = 0;

  /**
   * @generated from field: int32 seller_id = 4;
   */
  sellerId = 0;

  /**
   * @generated from field: int32 rating = 5;
   */
  rating = 0;

  /**
   * @generated from field: google.protobuf.Int32Value comment = 6;
   */
  comment?: number;

  constructor(data?: PartialMessage<ProductReview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.ProductReview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "user_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "seller_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "rating", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "comment", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductReview {
    return new ProductReview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductReview {
    return new ProductReview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductReview {
    return new ProductReview().fromJsonString(jsonString, options);
  }

  static equals(a: ProductReview | PlainMessage<ProductReview> | undefined, b: ProductReview | PlainMessage<ProductReview> | undefined): boolean {
    return proto3.util.equals(ProductReview, a, b);
  }
}

/**
 * @generated from message product.v1.ProductVariant
 */
export class ProductVariant extends Message<ProductVariant> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: int32 product_id = 2;
   */
  productId = 0;

  /**
   * @generated from field: string variant_name = 3;
   */
  variantName = "";

  constructor(data?: PartialMessage<ProductVariant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.ProductVariant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "product_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "variant_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductVariant {
    return new ProductVariant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductVariant {
    return new ProductVariant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductVariant {
    return new ProductVariant().fromJsonString(jsonString, options);
  }

  static equals(a: ProductVariant | PlainMessage<ProductVariant> | undefined, b: ProductVariant | PlainMessage<ProductVariant> | undefined): boolean {
    return proto3.util.equals(ProductVariant, a, b);
  }
}

/**
 * @generated from message product.v1.Seller
 */
export class Seller extends Message<Seller> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Int32Value location = 3;
   */
  location?: number;

  constructor(data?: PartialMessage<Seller>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.Seller";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "location", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Seller {
    return new Seller().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Seller {
    return new Seller().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Seller {
    return new Seller().fromJsonString(jsonString, options);
  }

  static equals(a: Seller | PlainMessage<Seller> | undefined, b: Seller | PlainMessage<Seller> | undefined): boolean {
    return proto3.util.equals(Seller, a, b);
  }
}

/**
 * @generated from message product.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string phone_number = 4;
   */
  phoneNumber = "";

  /**
   * @generated from field: string gender = 5;
   */
  gender = "";

  /**
   * @generated from field: bool is_admin = 6;
   */
  isAdmin = false;

  /**
   * @generated from field: google.protobuf.Timestamp date_of_birth = 7;
   */
  dateOfBirth?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Int32Value location = 10;
   */
  location?: number;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "product.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "gender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "is_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "date_of_birth", kind: "message", T: Timestamp },
    { no: 8, name: "created_at", kind: "message", T: Timestamp },
    { no: 9, name: "updated_at", kind: "message", T: Timestamp },
    { no: 10, name: "location", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

