syntax = "proto3";

package profile.v1;

import "auth/v1/auth.proto";
import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/codeharik/Atlantic/auth/api/auth/v1";

// The profile service definition
service ProfileService {
  // Retrieves the profile of a user by ID
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse);

  // Updates a user's profile
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse);
}

// The message for fetching a profile
message GetProfileRequest {}

message GetProfileResponse {
  ProfileUser user = 1;
}

// The message for updating a profile
message UpdateProfileRequest {}

message UpdateProfileResponse {
  bool success = 1;
}

message ProfileUser {
  string username = 1 [(buf.validate.field).string = {
    min_len: 8
    max_len: 24
  }]; // Username must be 8-24 characters

  string phone_number = 2 [(buf.validate.field) = {
    string: {
      // `pattern` specifies a regex pattern and validates that the string field
      // must match it.
      pattern: "^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$"
    }
    ignore_empty: true
  }];

  string avatar = 3 [
    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
    (buf.validate.field).string.uri = true
  ]; // Avatar must be a valid URL

  // `email` validates that a string field is a valid email.
  string email = 4 [(buf.validate.field).string.email = true];

  string location = 5;

  bool verified = 6;

  int64 role = 7 [(buf.validate.field).int32.gt = 0];

  repeated auth.v1.UserSession sessions = 8;
  int32 sessionNumber = 9;
}
