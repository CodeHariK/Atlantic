// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cosmog/v1/cosmog.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codeharik/Atlantic/cosmog/api/cosmog/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CosmogServiceName is the fully-qualified name of the CosmogService service.
	CosmogServiceName = "cosmog.v1.CosmogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CosmogServiceCreateSearchKeyProcedure is the fully-qualified name of the CosmogService's
	// CreateSearchKey RPC.
	CosmogServiceCreateSearchKeyProcedure = "/cosmog.v1.CosmogService/CreateSearchKey"
	// CosmogServiceHelloProcedure is the fully-qualified name of the CosmogService's Hello RPC.
	CosmogServiceHelloProcedure = "/cosmog.v1.CosmogService/Hello"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cosmogServiceServiceDescriptor               = v1.File_cosmog_v1_cosmog_proto.Services().ByName("CosmogService")
	cosmogServiceCreateSearchKeyMethodDescriptor = cosmogServiceServiceDescriptor.Methods().ByName("CreateSearchKey")
	cosmogServiceHelloMethodDescriptor           = cosmogServiceServiceDescriptor.Methods().ByName("Hello")
)

// CosmogServiceClient is a client for the cosmog.v1.CosmogService service.
type CosmogServiceClient interface {
	CreateSearchKey(context.Context, *connect.Request[v1.CreateSearchKeyRequest]) (*connect.Response[v1.CreateSearchKeyResponse], error)
	Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error)
}

// NewCosmogServiceClient constructs a client for the cosmog.v1.CosmogService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCosmogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CosmogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cosmogServiceClient{
		createSearchKey: connect.NewClient[v1.CreateSearchKeyRequest, v1.CreateSearchKeyResponse](
			httpClient,
			baseURL+CosmogServiceCreateSearchKeyProcedure,
			connect.WithSchema(cosmogServiceCreateSearchKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		hello: connect.NewClient[v1.HelloRequest, v1.HelloResponse](
			httpClient,
			baseURL+CosmogServiceHelloProcedure,
			connect.WithSchema(cosmogServiceHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cosmogServiceClient implements CosmogServiceClient.
type cosmogServiceClient struct {
	createSearchKey *connect.Client[v1.CreateSearchKeyRequest, v1.CreateSearchKeyResponse]
	hello           *connect.Client[v1.HelloRequest, v1.HelloResponse]
}

// CreateSearchKey calls cosmog.v1.CosmogService.CreateSearchKey.
func (c *cosmogServiceClient) CreateSearchKey(ctx context.Context, req *connect.Request[v1.CreateSearchKeyRequest]) (*connect.Response[v1.CreateSearchKeyResponse], error) {
	return c.createSearchKey.CallUnary(ctx, req)
}

// Hello calls cosmog.v1.CosmogService.Hello.
func (c *cosmogServiceClient) Hello(ctx context.Context, req *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// CosmogServiceHandler is an implementation of the cosmog.v1.CosmogService service.
type CosmogServiceHandler interface {
	CreateSearchKey(context.Context, *connect.Request[v1.CreateSearchKeyRequest]) (*connect.Response[v1.CreateSearchKeyResponse], error)
	Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error)
}

// NewCosmogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCosmogServiceHandler(svc CosmogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cosmogServiceCreateSearchKeyHandler := connect.NewUnaryHandler(
		CosmogServiceCreateSearchKeyProcedure,
		svc.CreateSearchKey,
		connect.WithSchema(cosmogServiceCreateSearchKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cosmogServiceHelloHandler := connect.NewUnaryHandler(
		CosmogServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(cosmogServiceHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cosmog.v1.CosmogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CosmogServiceCreateSearchKeyProcedure:
			cosmogServiceCreateSearchKeyHandler.ServeHTTP(w, r)
		case CosmogServiceHelloProcedure:
			cosmogServiceHelloHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCosmogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCosmogServiceHandler struct{}

func (UnimplementedCosmogServiceHandler) CreateSearchKey(context.Context, *connect.Request[v1.CreateSearchKeyRequest]) (*connect.Response[v1.CreateSearchKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cosmog.v1.CosmogService.CreateSearchKey is not implemented"))
}

func (UnimplementedCosmogServiceHandler) Hello(context.Context, *connect.Request[v1.HelloRequest]) (*connect.Response[v1.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cosmog.v1.CosmogService.Hello is not implemented"))
}
