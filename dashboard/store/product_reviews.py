# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: product_reviews.sql
import dataclasses
import datetime
from typing import AsyncIterator, Iterator, Optional
import uuid

import sqlalchemy
import sqlalchemy.ext.asyncio

from product import models


CREATE_PRODUCT_COMMENT = """-- name: create_product_comment \\:one
INSERT INTO
    product_comment (id, comment)
VALUES (:p1, :p2) RETURNING id
"""


CREATE_PRODUCT_REVIEW = """-- name: create_product_review \\:one
INSERT INTO
    product_reviews (
        id,
        user_id,
        product_id,
        seller_id,
        rating
    )
VALUES (:p1, :p2, :p3, :p4, :p5) RETURNING id
"""


DELETE_PRODUCT_COMMENT = """-- name: delete_product_comment \\:exec
DELETE FROM product_comment WHERE id = :p1
"""


DELETE_PRODUCT_REVIEW = """-- name: delete_product_review \\:exec
DELETE FROM product_reviews WHERE id = :p1
"""


GET_PRODUCT_COMMENT_BY_ID = """-- name: get_product_comment_by_id \\:one
SELECT id, comment FROM product_comment WHERE id = :p1
"""


GET_PRODUCT_REVIEW_BY_ID = """-- name: get_product_review_by_id \\:one
SELECT
    id,
    user_id,
    product_id,
    seller_id,
    rating,
    created_at,
    updated_at
FROM product_reviews
WHERE
    id = :p1
"""


LIST_PRODUCT_REVIEWS = """-- name: list_product_reviews \\:many
SELECT
    id,
    user_id,
    product_id,
    seller_id,
    rating,
    created_at,
    updated_at
FROM product_reviews
ORDER BY id
LIMIT :p1
OFFSET
    :p2
"""


LIST_REVIEWS_WITH_COMMENTS = """-- name: list_reviews_with_comments \\:many
SELECT pr.id, pr.user_id, pr.product_id, pr.seller_id, pr.rating, pr.created_at, pr.updated_at, pc.comment
FROM
    product_reviews pr
    LEFT JOIN product_comment pc ON pr.id = pc.id
WHERE
    pr.product_id = :p1
ORDER BY pr.created_at DESC
LIMIT :p1
OFFSET
    :p2
"""


@dataclasses.dataclass()
class ListReviewsWithCommentsRow:
    id: uuid.UUID
    user_id: uuid.UUID
    product_id: uuid.UUID
    seller_id: uuid.UUID
    rating: int
    created_at: datetime.datetime
    updated_at: datetime.datetime
    comment: Optional[str]


UPDATE_PRODUCT_COMMENT = """-- name: update_product_comment \\:exec
UPDATE product_comment SET comment = :p2 WHERE id = :p1
"""


UPDATE_PRODUCT_REVIEW = """-- name: update_product_review \\:exec
UPDATE product_reviews
SET
    user_id = :p2,
    product_id = :p3,
    seller_id = :p4,
    rating = :p5,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = :p1
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_product_comment(self, *, id: uuid.UUID, comment: Optional[str]) -> Optional[uuid.UUID]:
        row = self._conn.execute(sqlalchemy.text(CREATE_PRODUCT_COMMENT), {"p1": id, "p2": comment}).first()
        if row is None:
            return None
        return row[0]

    def create_product_review(self, *, id: uuid.UUID, user_id: uuid.UUID, product_id: uuid.UUID, seller_id: uuid.UUID, rating: int) -> Optional[uuid.UUID]:
        row = self._conn.execute(sqlalchemy.text(CREATE_PRODUCT_REVIEW), {
            "p1": id,
            "p2": user_id,
            "p3": product_id,
            "p4": seller_id,
            "p5": rating,
        }).first()
        if row is None:
            return None
        return row[0]

    def delete_product_comment(self, *, id: uuid.UUID) -> None:
        self._conn.execute(sqlalchemy.text(DELETE_PRODUCT_COMMENT), {"p1": id})

    def delete_product_review(self, *, id: uuid.UUID) -> None:
        self._conn.execute(sqlalchemy.text(DELETE_PRODUCT_REVIEW), {"p1": id})

    def get_product_comment_by_id(self, *, id: uuid.UUID) -> Optional[models.ProductComment]:
        row = self._conn.execute(sqlalchemy.text(GET_PRODUCT_COMMENT_BY_ID), {"p1": id}).first()
        if row is None:
            return None
        return models.ProductComment(
            id=row[0],
            comment=row[1],
        )

    def get_product_review_by_id(self, *, id: uuid.UUID) -> Optional[models.ProductReview]:
        row = self._conn.execute(sqlalchemy.text(GET_PRODUCT_REVIEW_BY_ID), {"p1": id}).first()
        if row is None:
            return None
        return models.ProductReview(
            id=row[0],
            user_id=row[1],
            product_id=row[2],
            seller_id=row[3],
            rating=row[4],
            created_at=row[5],
            updated_at=row[6],
        )

    def list_product_reviews(self, *, limit: int, offset: int) -> Iterator[models.ProductReview]:
        result = self._conn.execute(sqlalchemy.text(LIST_PRODUCT_REVIEWS), {"p1": limit, "p2": offset})
        for row in result:
            yield models.ProductReview(
                id=row[0],
                user_id=row[1],
                product_id=row[2],
                seller_id=row[3],
                rating=row[4],
                created_at=row[5],
                updated_at=row[6],
            )

    def list_reviews_with_comments(self, *, limit: int, offset: int) -> Iterator[ListReviewsWithCommentsRow]:
        result = self._conn.execute(sqlalchemy.text(LIST_REVIEWS_WITH_COMMENTS), {"p1": limit, "p2": offset})
        for row in result:
            yield ListReviewsWithCommentsRow(
                id=row[0],
                user_id=row[1],
                product_id=row[2],
                seller_id=row[3],
                rating=row[4],
                created_at=row[5],
                updated_at=row[6],
                comment=row[7],
            )

    def update_product_comment(self, *, id: uuid.UUID, comment: Optional[str]) -> None:
        self._conn.execute(sqlalchemy.text(UPDATE_PRODUCT_COMMENT), {"p1": id, "p2": comment})

    def update_product_review(self, *, id: uuid.UUID, user_id: uuid.UUID, product_id: uuid.UUID, seller_id: uuid.UUID, rating: int) -> None:
        self._conn.execute(sqlalchemy.text(UPDATE_PRODUCT_REVIEW), {
            "p1": id,
            "p2": user_id,
            "p3": product_id,
            "p4": seller_id,
            "p5": rating,
        })


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_product_comment(self, *, id: uuid.UUID, comment: Optional[str]) -> Optional[uuid.UUID]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_PRODUCT_COMMENT), {"p1": id, "p2": comment})).first()
        if row is None:
            return None
        return row[0]

    async def create_product_review(self, *, id: uuid.UUID, user_id: uuid.UUID, product_id: uuid.UUID, seller_id: uuid.UUID, rating: int) -> Optional[uuid.UUID]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_PRODUCT_REVIEW), {
            "p1": id,
            "p2": user_id,
            "p3": product_id,
            "p4": seller_id,
            "p5": rating,
        })).first()
        if row is None:
            return None
        return row[0]

    async def delete_product_comment(self, *, id: uuid.UUID) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_PRODUCT_COMMENT), {"p1": id})

    async def delete_product_review(self, *, id: uuid.UUID) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_PRODUCT_REVIEW), {"p1": id})

    async def get_product_comment_by_id(self, *, id: uuid.UUID) -> Optional[models.ProductComment]:
        row = (await self._conn.execute(sqlalchemy.text(GET_PRODUCT_COMMENT_BY_ID), {"p1": id})).first()
        if row is None:
            return None
        return models.ProductComment(
            id=row[0],
            comment=row[1],
        )

    async def get_product_review_by_id(self, *, id: uuid.UUID) -> Optional[models.ProductReview]:
        row = (await self._conn.execute(sqlalchemy.text(GET_PRODUCT_REVIEW_BY_ID), {"p1": id})).first()
        if row is None:
            return None
        return models.ProductReview(
            id=row[0],
            user_id=row[1],
            product_id=row[2],
            seller_id=row[3],
            rating=row[4],
            created_at=row[5],
            updated_at=row[6],
        )

    async def list_product_reviews(self, *, limit: int, offset: int) -> AsyncIterator[models.ProductReview]:
        result = await self._conn.stream(sqlalchemy.text(LIST_PRODUCT_REVIEWS), {"p1": limit, "p2": offset})
        async for row in result:
            yield models.ProductReview(
                id=row[0],
                user_id=row[1],
                product_id=row[2],
                seller_id=row[3],
                rating=row[4],
                created_at=row[5],
                updated_at=row[6],
            )

    async def list_reviews_with_comments(self, *, limit: int, offset: int) -> AsyncIterator[ListReviewsWithCommentsRow]:
        result = await self._conn.stream(sqlalchemy.text(LIST_REVIEWS_WITH_COMMENTS), {"p1": limit, "p2": offset})
        async for row in result:
            yield ListReviewsWithCommentsRow(
                id=row[0],
                user_id=row[1],
                product_id=row[2],
                seller_id=row[3],
                rating=row[4],
                created_at=row[5],
                updated_at=row[6],
                comment=row[7],
            )

    async def update_product_comment(self, *, id: uuid.UUID, comment: Optional[str]) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_PRODUCT_COMMENT), {"p1": id, "p2": comment})

    async def update_product_review(self, *, id: uuid.UUID, user_id: uuid.UUID, product_id: uuid.UUID, seller_id: uuid.UUID, rating: int) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_PRODUCT_REVIEW), {
            "p1": id,
            "p2": user_id,
            "p3": product_id,
            "p4": seller_id,
            "p5": rating,
        })
