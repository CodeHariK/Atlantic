# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: product.sql
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from product import models


CREATE_PRODUCT = """-- name: create_product \\:one
INSERT INTO
    products (product_name, category_id)
VALUES (:p1, :p2)
RETURNING
    id,
    product_name,
    category_id
"""


DELETE_PRODUCT = """-- name: delete_product \\:exec
DELETE FROM products WHERE id = :p1
"""


GET_PRODUCT_BY_ID = """-- name: get_product_by_id \\:one
SELECT id, product_name, category_id FROM products WHERE id = :p1
"""


LIST_PRODUCTS = """-- name: list_products \\:many
SELECT id, product_name, category_id
FROM products
ORDER BY id
LIMIT :p1
OFFSET
    :p2
"""


UPDATE_PRODUCT = """-- name: update_product \\:one
UPDATE products
SET
    product_name = :p1,
    category_id = :p2
WHERE
    id = :p3
RETURNING
    id,
    product_name,
    category_id
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_product(self, *, product_name: Optional[str], category_id: int) -> Optional[models.Product]:
        row = self._conn.execute(sqlalchemy.text(CREATE_PRODUCT), {"p1": product_name, "p2": category_id}).first()
        if row is None:
            return None
        return models.Product(
            id=row[0],
            product_name=row[1],
            category_id=row[2],
        )

    def delete_product(self, *, id: int) -> None:
        self._conn.execute(sqlalchemy.text(DELETE_PRODUCT), {"p1": id})

    def get_product_by_id(self, *, id: int) -> Optional[models.Product]:
        row = self._conn.execute(sqlalchemy.text(GET_PRODUCT_BY_ID), {"p1": id}).first()
        if row is None:
            return None
        return models.Product(
            id=row[0],
            product_name=row[1],
            category_id=row[2],
        )

    def list_products(self, *, limit: int, offset: int) -> Iterator[models.Product]:
        result = self._conn.execute(sqlalchemy.text(LIST_PRODUCTS), {"p1": limit, "p2": offset})
        for row in result:
            yield models.Product(
                id=row[0],
                product_name=row[1],
                category_id=row[2],
            )

    def update_product(self, *, product_name: Optional[str], category_id: int, id: int) -> Optional[models.Product]:
        row = self._conn.execute(sqlalchemy.text(UPDATE_PRODUCT), {"p1": product_name, "p2": category_id, "p3": id}).first()
        if row is None:
            return None
        return models.Product(
            id=row[0],
            product_name=row[1],
            category_id=row[2],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_product(self, *, product_name: Optional[str], category_id: int) -> Optional[models.Product]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_PRODUCT), {"p1": product_name, "p2": category_id})).first()
        if row is None:
            return None
        return models.Product(
            id=row[0],
            product_name=row[1],
            category_id=row[2],
        )

    async def delete_product(self, *, id: int) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_PRODUCT), {"p1": id})

    async def get_product_by_id(self, *, id: int) -> Optional[models.Product]:
        row = (await self._conn.execute(sqlalchemy.text(GET_PRODUCT_BY_ID), {"p1": id})).first()
        if row is None:
            return None
        return models.Product(
            id=row[0],
            product_name=row[1],
            category_id=row[2],
        )

    async def list_products(self, *, limit: int, offset: int) -> AsyncIterator[models.Product]:
        result = await self._conn.stream(sqlalchemy.text(LIST_PRODUCTS), {"p1": limit, "p2": offset})
        async for row in result:
            yield models.Product(
                id=row[0],
                product_name=row[1],
                category_id=row[2],
            )

    async def update_product(self, *, product_name: Optional[str], category_id: int, id: int) -> Optional[models.Product]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_PRODUCT), {"p1": product_name, "p2": category_id, "p3": id})).first()
        if row is None:
            return None
        return models.Product(
            id=row[0],
            product_name=row[1],
            category_id=row[2],
        )
