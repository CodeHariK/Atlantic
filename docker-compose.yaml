version: '3.8'

services:

  auth:
    build: 
      context: auth
      dockerfile: Dockerfile.auth
    ports:
      - "7777:7777"
    volumes:
      - ./config/config.json:/config.json
    # depends_on:
    #   - postgres

  # postgres:
  #   image: postgres:alpine
  #   container_name: goddess
  #   restart: always
  #   environment:
  #     POSTGRES_USER: superuser
  #     POSTGRES_PASSWORD: secret
  #     POSTGRES_DB: test
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #     - ./config/postgresql.conf:/etc/postgresql/postgresql.conf
  #   command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  otelcol:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otelcol
    ports:
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver

      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics

      - 13133:13133 # health_check extension

      - 1888:1888 # pprof extension
      - 55679:55679 # zpages extension

    volumes:
      - ./config/otelcol-config.yml:/etc/otelcol-config.yml
    command: ["--config", "/etc/otelcol-config.yml"]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    command: --config.file=/etc/config/prometheus.yml
    volumes:
      - ./config/prometheus.yml:/etc/config/prometheus.yml
    ports:
      - "9000:9000"

  grafana:
    image: grafana/grafana
    volumes:
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources/
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards/
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    restart: unless-stopped


  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686"

  dragonfly:
    image: 'cgr.dev/chainguard/dragonfly:latest'
    ulimits:
      memlock: -1
    ports:
      - "6379:6379"
    volumes:
      - dragonflydata:/data

volumes:
#   pgdata:
  grafana-data:
  dragonflydata: