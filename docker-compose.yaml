name: atlantic
services:
  auth:
    build:
      context: /Users/Shared/Go/Atlantic
      dockerfile: Dockerfile.auth
    depends_on:
      goose:
        condition: service_started
        required: true
      postgres:
        condition: service_started
        required: true
    environment:
      AUTH_HOST: postgres
    labels:
      kompose.hpa.cpu: "80"
      kompose.hpa.memory: 512Mi
      kompose.hpa.replicas.max: "3"
      kompose.hpa.replicas.min: "1"
      kompose.service.healthcheck.liveness.http_get_path: /health
      kompose.service.type: clusterip
    networks:
      default: null
    ports:
      - mode: ingress
        target: 7777
        published: "7777"
        protocol: tcp
    volumes:
      - type: bind
        source: /Users/Shared/Go/Atlantic/config/config.json
        target: /config.json
        bind:
          create_host_path: true
  caddy:
    command:
      - run
      - --config
      - /etc/caddy/Caddyfile
    image: cgr.dev/chainguard/caddy:latest
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "80"
        protocol: tcp
      - mode: ingress
        target: 443
        published: "443"
        protocol: tcp
    volumes:
      - type: bind
        source: /Users/Shared/Go/Atlantic/config/caddy/CaddyfileDocker
        target: /etc/caddy/Caddyfile
        bind:
          create_host_path: true
  goose:
    build:
      context: /Users/Shared/Go/Atlantic
      dockerfile: Dockerfile.goose
    depends_on:
      postgres:
        condition: service_started
        required: true
    entrypoint:
      - /bin/sh
      - -c
      - goose -dir /migrations postgres postgres://superuser:secret@postgres:5432/test?sslmode=disable up
    environment:
      DATABASE_URL: postgres://superuser:secret@postgres:5432/test?sslmode=disable
    networks:
      default: null
    restart: on-failure
    volumes:
      - type: bind
        source: /Users/Shared/Go/Atlantic/database/migrations
        target: /migrations
        bind:
          create_host_path: true
  postgres:
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
    container_name: goddess
    environment:
      POSTGRES_DB: test
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: superuser
    image: postgres:alpine
    labels:
      kompose.volume.size: 1Gi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5432
        published: "5432"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: pg-data
        target: /var/lib/postgresql/data
        volume: {}
      - type: bind
        source: /Users/Shared/Go/Atlantic/config/postgres/postgresql.conf
        target: /etc/postgresql/postgresql.conf
        bind:
          create_host_path: true
  skitty:
    build:
      context: /Users/Shared/Go/Atlantic
      dockerfile: Dockerfile.skitty
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "268435456"
    environment:
      DEBUG: debug-mode
    networks:
      default: null
    ports:
      - mode: ingress
        target: 3000
        published: "3000"
        protocol: tcp
networks:
  default:
    name: atlantic_default
volumes:
  pg-data:
    name: atlantic_pg-data
