// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect). DO NOT EDIT.

package user

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"

	"connectrpc.com/connect"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"

	pb "github.com/codeharik/Atlantic/database/api/user/v1"
	"github.com/codeharik/Atlantic/database/api/user/v1/v1connect"
	"github.com/codeharik/Atlantic/database/internal/validation"
)

type Service struct {
	v1connect.UnimplementedUserServiceHandler
	querier *Queries
}

func (s *Service) CreateUser(ctx context.Context, req *connect.Request[pb.CreateUserRequest]) (*connect.Response[pb.CreateUserResponse], error) {
	var arg CreateUserParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	arg.Username = req.Msg.GetUsername()
	if v := req.Msg.GetEmail(); v != nil {
		arg.Email = pgtype.Text{Valid: true, String: v.Value}
	}
	if v := req.Msg.GetPhoneNumber(); v != nil {
		arg.PhoneNumber = pgtype.Text{Valid: true, String: v.Value}
	}
	if v := req.Msg.GetGender(); v != nil {
		arg.Gender = pgtype.Text{Valid: true, String: v.Value}
	}
	arg.Role = req.Msg.GetRole()
	if v := req.Msg.GetDateOfBirth(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid DateOfBirth: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.DateOfBirth.Valid = true
			arg.DateOfBirth.Time = t
		}
	}
	if v := req.Msg.GetLocation(); v != nil {
		if err := json.Unmarshal([]byte(v.GetValue()), &arg.Location); err != nil {
			err = fmt.Errorf("invalid Location: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
	}

	result, err := s.querier.CreateUser(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CreateUser")
		return nil, err
	}
	return connect.NewResponse(&pb.CreateUserResponse{Value: result.String()}), nil
}

func (s *Service) DeleteUser(ctx context.Context, req *connect.Request[pb.DeleteUserRequest]) (*connect.Response[pb.DeleteUserResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	err := s.querier.DeleteUser(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "DeleteUser")
		return nil, err
	}
	return connect.NewResponse(&pb.DeleteUserResponse{}), nil
}

func (s *Service) FindUserByUsername(ctx context.Context, req *connect.Request[pb.FindUserByUsernameRequest]) (*connect.Response[pb.FindUserByUsernameResponse], error) {
	username := req.Msg.GetUsername()

	result, err := s.querier.FindUserByUsername(ctx, username)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "FindUserByUsername")
		return nil, err
	}
	return connect.NewResponse(&pb.FindUserByUsernameResponse{FindUserByUsernameRow: toFindUserByUsernameRow(result)}), nil
}

func (s *Service) GetAuthUserByEmail(ctx context.Context, req *connect.Request[pb.GetAuthUserByEmailRequest]) (*connect.Response[pb.GetAuthUserByEmailResponse], error) {
	var email pgtype.Text
	if v := req.Msg.GetEmail(); v != nil {
		email = pgtype.Text{Valid: true, String: v.Value}
	}

	result, err := s.querier.GetAuthUserByEmail(ctx, email)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetAuthUserByEmail")
		return nil, err
	}
	return connect.NewResponse(&pb.GetAuthUserByEmailResponse{GetAuthUserByEmailRow: toGetAuthUserByEmailRow(result)}), nil
}

func (s *Service) GetUserByID(ctx context.Context, req *connect.Request[pb.GetUserByIDRequest]) (*connect.Response[pb.GetUserByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.GetUserByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetUserByID")
		return nil, err
	}
	return connect.NewResponse(&pb.GetUserByIDResponse{GetUserByIdRow: toGetUserByIDRow(result)}), nil
}

func (s *Service) ListUsers(ctx context.Context, req *connect.Request[pb.ListUsersRequest]) (*connect.Response[pb.ListUsersResponse], error) {
	var arg ListUsersParams
	arg.Limit = req.Msg.GetLimit()
	arg.Offset = req.Msg.GetOffset()

	result, err := s.querier.ListUsers(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "ListUsers")
		return nil, err
	}
	res := new(pb.ListUsersResponse)
	for _, r := range result {
		res.List = append(res.List, toListUsersRow(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) UpdateUser(ctx context.Context, req *connect.Request[pb.UpdateUserRequest]) (*connect.Response[pb.UpdateUserResponse], error) {
	var arg UpdateUserParams
	arg.Username = req.Msg.GetUsername()
	if v := req.Msg.GetEmail(); v != nil {
		arg.Email = pgtype.Text{Valid: true, String: v.Value}
	}
	if v := req.Msg.GetPhoneNumber(); v != nil {
		arg.PhoneNumber = pgtype.Text{Valid: true, String: v.Value}
	}
	if v := req.Msg.GetGender(); v != nil {
		arg.Gender = pgtype.Text{Valid: true, String: v.Value}
	}
	arg.Role = req.Msg.GetRole()
	if v := req.Msg.GetDateOfBirth(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid DateOfBirth: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.DateOfBirth.Valid = true
			arg.DateOfBirth.Time = t
		}
	}
	if v := req.Msg.GetLocation(); v != nil {
		if err := json.Unmarshal([]byte(v.GetValue()), &arg.Location); err != nil {
			err = fmt.Errorf("invalid Location: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
	}
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}

	err := s.querier.UpdateUser(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "UpdateUser")
		return nil, err
	}
	return connect.NewResponse(&pb.UpdateUserResponse{}), nil
}
