// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        username,
        email,
        phone_number,
        gender,
        is_admin,
        date_of_birth,
        location
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id,
    created_at,
    updated_at
`

type CreateUserParams struct {
	Username    string      `json:"username"`
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	Gender      string      `json:"gender"`
	IsAdmin     bool        `json:"is_admin"`
	DateOfBirth pgtype.Date `json:"date_of_birth"`
	Location    pgtype.Int4 `json:"location"`
}

type CreateUserRow struct {
	ID        int32            `json:"id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PhoneNumber,
		arg.Gender,
		arg.IsAdmin,
		arg.DateOfBirth,
		arg.Location,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT
    id,
    username,
    email,
    phone_number,
    gender,
    is_admin,
    date_of_birth,
    created_at,
    updated_at,
    location
FROM users
WHERE
    username = $1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Gender,
		&i.IsAdmin,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Location,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id,
    username,
    email,
    phone_number,
    gender,
    is_admin,
    date_of_birth,
    created_at,
    updated_at,
    location
FROM users
WHERE
    id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Gender,
		&i.IsAdmin,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Location,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    id,
    username,
    email,
    phone_number,
    gender,
    is_admin,
    date_of_birth,
    created_at,
    updated_at,
    location
FROM users
LIMIT $1
OFFSET
    $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PhoneNumber,
			&i.Gender,
			&i.IsAdmin,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = $1,
    email = $2,
    phone_number = $3,
    gender = $4,
    is_admin = $5,
    date_of_birth = $6,
    location = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $8
RETURNING
    id,
    updated_at
`

type UpdateUserParams struct {
	Username    string      `json:"username"`
	Email       string      `json:"email"`
	PhoneNumber string      `json:"phone_number"`
	Gender      string      `json:"gender"`
	IsAdmin     bool        `json:"is_admin"`
	DateOfBirth pgtype.Date `json:"date_of_birth"`
	Location    pgtype.Int4 `json:"location"`
	ID          int32       `json:"id"`
}

type UpdateUserRow struct {
	ID        int32            `json:"id"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.PhoneNumber,
		arg.Gender,
		arg.IsAdmin,
		arg.DateOfBirth,
		arg.Location,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(&i.ID, &i.UpdatedAt)
	return i, err
}
