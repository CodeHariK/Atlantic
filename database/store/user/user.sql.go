// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package user

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO
    users (
        id,
        username,
        password_hash,
        email,
        verified,
        phone_number,
        gender,
        role,
        date_of_birth,
        address,
        balance
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11
    )
`

type CreateUserParams struct {
	ID           uuid.UUID   `json:"id"`
	Username     pgtype.Text `json:"username"`
	PasswordHash pgtype.Text `json:"password_hash"`
	Email        pgtype.Text `json:"email"`
	Verified     bool        `json:"verified"`
	PhoneNumber  pgtype.Text `json:"phone_number"`
	Gender       pgtype.Text `json:"gender"`
	Role         int64       `json:"role"`
	DateOfBirth  pgtype.Date `json:"date_of_birth"`
	Address      string      `json:"address"`
	Balance      int32       `json:"balance"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Verified,
		arg.PhoneNumber,
		arg.Gender,
		arg.Role,
		arg.DateOfBirth,
		arg.Address,
		arg.Balance,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password_hash, email, verified, phone_number, gender, role, date_of_birth, address, balance, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Verified,
		&i.PhoneNumber,
		&i.Gender,
		&i.Role,
		&i.DateOfBirth,
		&i.Address,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password_hash, email, verified, phone_number, gender, role, date_of_birth, address, balance, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Verified,
		&i.PhoneNumber,
		&i.Gender,
		&i.Role,
		&i.DateOfBirth,
		&i.Address,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, email, verified, phone_number, gender, role, date_of_birth, address, balance, created_at, updated_at FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Verified,
		&i.PhoneNumber,
		&i.Gender,
		&i.Role,
		&i.DateOfBirth,
		&i.Address,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    id,
    username,
    email,
    phone_number,
    gender,
    role,
    date_of_birth,
    created_at,
    updated_at
FROM users
LIMIT $1
OFFSET
    $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	ID          uuid.UUID        `json:"id"`
	Username    pgtype.Text      `json:"username"`
	Email       pgtype.Text      `json:"email"`
	PhoneNumber pgtype.Text      `json:"phone_number"`
	Gender      pgtype.Text      `json:"gender"`
	Role        int64            `json:"role"`
	DateOfBirth pgtype.Date      `json:"date_of_birth"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PhoneNumber,
			&i.Gender,
			&i.Role,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    username = $1,
    email = $2,
    phone_number = $3,
    verified = $4,
    gender = $5,
    role = $6,
    date_of_birth = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $8
`

type UpdateUserParams struct {
	Username    pgtype.Text `json:"username"`
	Email       pgtype.Text `json:"email"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Verified    bool        `json:"verified"`
	Gender      pgtype.Text `json:"gender"`
	Role        int64       `json:"role"`
	DateOfBirth pgtype.Date `json:"date_of_birth"`
	ID          uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.PhoneNumber,
		arg.Verified,
		arg.Gender,
		arg.Role,
		arg.DateOfBirth,
		arg.ID,
	)
	return err
}

const updateUserBalance = `-- name: UpdateUserBalance :exec
UPDATE users
SET
    balance = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $1
`

type UpdateUserBalanceParams struct {
	ID      uuid.UUID `json:"id"`
	Balance int32     `json:"balance"`
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) error {
	_, err := q.db.Exec(ctx, updateUserBalance, arg.ID, arg.Balance)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
    password_hash = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $1
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID   `json:"id"`
	PasswordHash pgtype.Text `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
