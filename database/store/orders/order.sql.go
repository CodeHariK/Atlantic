// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package orders

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO
    orders (
        order_id,
        user_id,
        price,
        status,
        payment_status
    )
VALUES ($1, $2, $3, $4, $5) RETURNING order_id, user_id, created_at, updated_at, price, status, payment_status
`

type CreateOrderParams struct {
	OrderID       uuid.UUID `json:"order_id"`
	UserID        uuid.UUID `json:"user_id"`
	Price         int32     `json:"price"`
	Status        string    `json:"status"`
	PaymentStatus string    `json:"payment_status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.OrderID,
		arg.UserID,
		arg.Price,
		arg.Status,
		arg.PaymentStatus,
	)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Price,
		&i.Status,
		&i.PaymentStatus,
	)
	return i, err
}

const deleteOrderByID = `-- name: DeleteOrderByID :exec
DELETE FROM orders WHERE order_id = $1
`

func (q *Queries) DeleteOrderByID(ctx context.Context, orderID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrderByID, orderID)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT order_id, user_id, created_at, updated_at, price, status, payment_status FROM orders WHERE order_id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, orderID uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Price,
		&i.Status,
		&i.PaymentStatus,
	)
	return i, err
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT order_id, user_id, created_at, updated_at, price, status, payment_status FROM orders WHERE user_id = $1
`

func (q *Queries) GetOrdersByUserID(ctx context.Context, userID uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Price,
			&i.Status,
			&i.PaymentStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderPaymentStatus = `-- name: UpdateOrderPaymentStatus :one
UPDATE orders
SET
    payment_status = $2,
    updated_at = $3
WHERE
    order_id = $1 RETURNING order_id, user_id, created_at, updated_at, price, status, payment_status
`

type UpdateOrderPaymentStatusParams struct {
	OrderID       uuid.UUID        `json:"order_id"`
	PaymentStatus string           `json:"payment_status"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateOrderPaymentStatus(ctx context.Context, arg UpdateOrderPaymentStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderPaymentStatus, arg.OrderID, arg.PaymentStatus, arg.UpdatedAt)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Price,
		&i.Status,
		&i.PaymentStatus,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders SET status = $2 WHERE order_id = $1 RETURNING order_id, user_id, created_at, updated_at, price, status, payment_status
`

type UpdateOrderStatusParams struct {
	OrderID uuid.UUID `json:"order_id"`
	Status  string    `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.OrderID, arg.Status)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Price,
		&i.Status,
		&i.PaymentStatus,
	)
	return i, err
}
