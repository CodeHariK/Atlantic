// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order_items.sql

package orders

import (
	"context"

	"github.com/google/uuid"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO
    order_items (
        orderitem_id,
        order_id,
        product_id,
        quantity,
        price
    )
VALUES ($1, $2, $3, $4, $5) RETURNING orderitem_id, order_id, product_id, quantity, price
`

type CreateOrderItemParams struct {
	OrderitemID uuid.UUID `json:"orderitem_id"`
	OrderID     uuid.UUID `json:"order_id"`
	ProductID   uuid.UUID `json:"product_id"`
	Quantity    int32     `json:"quantity"`
	Price       int32     `json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderitemID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderitemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const createOrderWithItems = `-- name: CreateOrderWithItems :exec
WITH inserted_order AS (
    -- Insert into the orders table and return the order_id
    INSERT INTO orders (
        order_id,
        user_id,
        price,
        status,
        payment_status
    )
    VALUES ($1, $2, $3, $4, $5)
    RETURNING order_id
)
INSERT INTO order_items (
    orderitem_id,
    order_id,
    product_id,
    quantity,
    price
)
SELECT
    UNNEST($6::UUID[]) AS item_id,           -- Unnest array for item_id
    (SELECT order_id FROM inserted_order) AS order_id,  -- Use the order_id from the order insert
    UNNEST($7::UUID[]) AS product_id,        -- Unnest array for product_id
    UNNEST($8::INTEGER[]) AS quantity,       -- Unnest array for quantity
    UNNEST($9::INTEGER[]) AS price           -- Unnest array for price
`

type CreateOrderWithItemsParams struct {
	OrderID       uuid.UUID   `json:"order_id"`
	UserID        uuid.UUID   `json:"user_id"`
	Price         int32       `json:"price"`
	Status        string      `json:"status"`
	PaymentStatus string      `json:"payment_status"`
	Column6       []uuid.UUID `json:"column_6"`
	Column7       []uuid.UUID `json:"column_7"`
	Column8       []int32     `json:"column_8"`
	Column9       []int32     `json:"column_9"`
}

// Insert multiple order items using the order_id and UNNEST for variable input arrays
func (q *Queries) CreateOrderWithItems(ctx context.Context, arg CreateOrderWithItemsParams) error {
	_, err := q.db.Exec(ctx, createOrderWithItems,
		arg.OrderID,
		arg.UserID,
		arg.Price,
		arg.Status,
		arg.PaymentStatus,
		arg.Column6,
		arg.Column7,
		arg.Column8,
		arg.Column9,
	)
	return err
}

const deleteOrderItemByID = `-- name: DeleteOrderItemByID :exec
DELETE FROM order_items WHERE orderitem_id = $1
`

func (q *Queries) DeleteOrderItemByID(ctx context.Context, orderitemID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrderItemByID, orderitemID)
	return err
}

const getOrderItemByID = `-- name: GetOrderItemByID :one
SELECT orderitem_id, order_id, product_id, quantity, price FROM order_items WHERE orderitem_id = $1
`

func (q *Queries) GetOrderItemByID(ctx context.Context, orderitemID uuid.UUID) (OrderItem, error) {
	row := q.db.QueryRow(ctx, getOrderItemByID, orderitemID)
	var i OrderItem
	err := row.Scan(
		&i.OrderitemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT orderitem_id, order_id, product_id, quantity, price FROM order_items WHERE order_id = $1
`

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderitemID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
