// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_category.sql

package product

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCategoryPath = `-- name: GetCategoryPath :one
WITH RECURSIVE CategoryHierarchy AS (
    -- Anchor member: start with the category you want to query
    SELECT c.id, c.name, c.parent_id, c.name::TEXT AS path
    FROM product_category c
    WHERE c.id = $1


UNION ALL
    
    SELECT pc.id, pc.name, pc.parent_id, 
        ch.path || '.' || pc.name AS path
    FROM product_category pc
    INNER JOIN CategoryHierarchy ch ON pc.id = ch.parent_id
)
SELECT path
FROM CategoryHierarchy
ORDER BY array_length(string_to_array(path, '.'), 1) DESC
LIMIT 1
`

// Recursive member: join the category table with itself to traverse up the hierarchy
// Select the path in the desired format
func (q *Queries) GetCategoryPath(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRow(ctx, getCategoryPath, id)
	var path string
	err := row.Scan(&path)
	return path, err
}

const getProductWithCategoryPath = `-- name: GetProductWithCategoryPath :one
WITH RECURSIVE CategoryHierarchy AS (
    -- Anchor member: start with the category of the product
    SELECT id, name, parent_id, name::TEXT AS path
    FROM product_category
    WHERE id = (
        SELECT category_id
        FROM products
        WHERE id = $1  -- Use product ID to find the category_id
    )


UNION ALL
    
    SELECT pc.id, pc.name, pc.parent_id, 
        ch.path || '.' || pc.name AS path
    FROM product_category pc
    INNER JOIN CategoryHierarchy ch ON pc.id = ch.parent_id
)

,
CategoryPath AS (
    SELECT path
    FROM CategoryHierarchy
    ORDER BY array_length(string_to_array(path, '.'), 1) DESC
    LIMIT 1
)
SELECT
    p.id AS product_id,
    p.product_name,
    p.category_id,
    cp.path AS category_path
FROM products p
    CROSS JOIN CategoryPath cp
WHERE
    p.id = $1
`

type GetProductWithCategoryPathRow struct {
	ProductID    int32       `json:"product_id"`
	ProductName  pgtype.Text `json:"product_name"`
	CategoryID   int32       `json:"category_id"`
	CategoryPath string      `json:"category_path"`
}

// Recursive member: join the category table with itself to traverse up the hierarchy
// Select the hierarchical category path
// Select the product details along with the hierarchical category path
func (q *Queries) GetProductWithCategoryPath(ctx context.Context, id int32) (GetProductWithCategoryPathRow, error) {
	row := q.db.QueryRow(ctx, getProductWithCategoryPath, id)
	var i GetProductWithCategoryPathRow
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.CategoryID,
		&i.CategoryPath,
	)
	return i, err
}
