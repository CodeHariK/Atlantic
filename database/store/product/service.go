// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect). DO NOT EDIT.

package product

import (
	"context"
	"fmt"
	"log/slog"

	"connectrpc.com/connect"
	"github.com/google/uuid"

	pb "github.com/codeharik/Atlantic/database/api/product/v1"
	"github.com/codeharik/Atlantic/database/api/product/v1/v1connect"
	"github.com/codeharik/Atlantic/database/internal/validation"
)

type Service struct {
	v1connect.UnimplementedProductServiceHandler
	querier *Queries
}

func (s *Service) CreateProduct(ctx context.Context, req *connect.Request[pb.CreateProductRequest]) (*connect.Response[pb.CreateProductResponse], error) {
	var arg CreateProductParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	arg.Title = req.Msg.GetTitle()
	arg.Quantity = req.Msg.GetQuantity()
	arg.Price = req.Msg.GetPrice()
	arg.Category = req.Msg.GetCategory()

	result, err := s.querier.CreateProduct(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CreateProduct")
		return nil, err
	}
	return connect.NewResponse(&pb.CreateProductResponse{Product: toProduct(result)}), nil
}

func (s *Service) DeleteProduct(ctx context.Context, req *connect.Request[pb.DeleteProductRequest]) (*connect.Response[pb.DeleteProductResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	err := s.querier.DeleteProduct(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "DeleteProduct")
		return nil, err
	}
	return connect.NewResponse(&pb.DeleteProductResponse{}), nil
}

func (s *Service) GetProductsByIds(ctx context.Context, req *connect.Request[pb.GetProductsByIdsRequest]) (*connect.Response[pb.GetProductsByIdsResponse], error) {
	var dollar_1 []uuid.UUID
	dollar_1 = make([]uuid.UUID, len(req.Msg.GetDollar_1()))
	for i, s := range req.Msg.GetDollar_1() {
		if v, err := uuid.Parse(s); err != nil {
			err = fmt.Errorf("invalid Dollar_1: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		} else {
			dollar_1[i] = v
		}
	}

	result, err := s.querier.GetProductsByIds(ctx, dollar_1)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetProductsByIds")
		return nil, err
	}
	res := new(pb.GetProductsByIdsResponse)
	for _, r := range result {
		res.List = append(res.List, toProduct(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) ListProducts(ctx context.Context, req *connect.Request[pb.ListProductsRequest]) (*connect.Response[pb.ListProductsResponse], error) {
	limit := req.Msg.GetLimit()

	result, err := s.querier.ListProducts(ctx, limit)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "ListProducts")
		return nil, err
	}
	res := new(pb.ListProductsResponse)
	for _, r := range result {
		res.List = append(res.List, toListProductsRow(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) UpdateProduct(ctx context.Context, req *connect.Request[pb.UpdateProductRequest]) (*connect.Response[pb.UpdateProductResponse], error) {
	var arg UpdateProductParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	arg.Quantity = req.Msg.GetQuantity()
	arg.Price = req.Msg.GetPrice()

	result, err := s.querier.UpdateProduct(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "UpdateProduct")
		return nil, err
	}
	return connect.NewResponse(&pb.UpdateProductResponse{Product: toProduct(result)}), nil
}
