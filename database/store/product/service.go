// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect). DO NOT EDIT.

package product

import (
	"context"
	"fmt"
	"log/slog"

	"connectrpc.com/connect"
	"github.com/google/uuid"

	pb "github.com/codeharik/Atlantic/database/api/product/v1"
	"github.com/codeharik/Atlantic/database/api/product/v1/v1connect"
	"github.com/codeharik/Atlantic/database/internal/validation"
)

type Service struct {
	v1connect.UnimplementedProductServiceHandler
	querier *Queries
}

func (s *Service) CheckProductQuantity(ctx context.Context, req *connect.Request[pb.CheckProductQuantityRequest]) (*connect.Response[pb.CheckProductQuantityResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.CheckProductQuantity(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CheckProductQuantity")
		return nil, err
	}
	return connect.NewResponse(&pb.CheckProductQuantityResponse{Value: result}), nil
}

func (s *Service) CreateProduct(ctx context.Context, req *connect.Request[pb.CreateProductRequest]) (*connect.Response[pb.CreateProductResponse], error) {
	var arg CreateProductParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	arg.Quantity = req.Msg.GetQuantity()
	arg.AmountUnits = req.Msg.GetAmountUnits()
	arg.AmountNanos = req.Msg.GetAmountNanos()
	arg.AmountCurrency = req.Msg.GetAmountCurrency()

	result, err := s.querier.CreateProduct(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CreateProduct")
		return nil, err
	}
	return connect.NewResponse(&pb.CreateProductResponse{Product: toProduct(result)}), nil
}

func (s *Service) DeleteProduct(ctx context.Context, req *connect.Request[pb.DeleteProductRequest]) (*connect.Response[pb.DeleteProductResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	err := s.querier.DeleteProduct(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "DeleteProduct")
		return nil, err
	}
	return connect.NewResponse(&pb.DeleteProductResponse{}), nil
}

func (s *Service) GetProductByID(ctx context.Context, req *connect.Request[pb.GetProductByIDRequest]) (*connect.Response[pb.GetProductByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.GetProductByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetProductByID")
		return nil, err
	}
	return connect.NewResponse(&pb.GetProductByIDResponse{Product: toProduct(result)}), nil
}

func (s *Service) ListProducts(ctx context.Context, req *connect.Request[pb.ListProductsRequest]) (*connect.Response[pb.ListProductsResponse], error) {

	result, err := s.querier.ListProducts(ctx)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "ListProducts")
		return nil, err
	}
	res := new(pb.ListProductsResponse)
	for _, r := range result {
		res.List = append(res.List, toProduct(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) UpdateProduct(ctx context.Context, req *connect.Request[pb.UpdateProductRequest]) (*connect.Response[pb.UpdateProductResponse], error) {
	var arg UpdateProductParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	arg.Quantity = req.Msg.GetQuantity()
	arg.AmountUnits = req.Msg.GetAmountUnits()
	arg.AmountNanos = req.Msg.GetAmountNanos()
	arg.AmountCurrency = req.Msg.GetAmountCurrency()

	err := s.querier.UpdateProduct(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "UpdateProduct")
		return nil, err
	}
	return connect.NewResponse(&pb.UpdateProductResponse{}), nil
}
