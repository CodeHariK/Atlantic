// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package product

import (
	"context"

	"github.com/google/uuid"
)

const checkProductQuantity = `-- name: CheckProductQuantity :one
SELECT quantity FROM products WHERE id = $1
`

func (q *Queries) CheckProductQuantity(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, checkProductQuantity, id)
	var quantity int32
	err := row.Scan(&quantity)
	return quantity, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO
    products (
        id,
        quantity,
        amount_units,
        amount_nanos,
        amount_currency
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, quantity, amount_units, amount_nanos, amount_currency
`

type CreateProductParams struct {
	ID             uuid.UUID `json:"id"`
	Quantity       int32     `json:"quantity"`
	AmountUnits    int64     `json:"amount_units"`
	AmountNanos    int32     `json:"amount_nanos"`
	AmountCurrency string    `json:"amount_currency"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ID,
		arg.Quantity,
		arg.AmountUnits,
		arg.AmountNanos,
		arg.AmountCurrency,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.AmountUnits,
		&i.AmountNanos,
		&i.AmountCurrency,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT
    id,
    quantity,
    amount_units,
    amount_nanos,
    amount_currency
FROM products
WHERE
    id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.AmountUnits,
		&i.AmountNanos,
		&i.AmountCurrency,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT
    id,
    quantity,
    amount_units,
    amount_nanos,
    amount_currency
FROM products
ORDER BY id
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Quantity,
			&i.AmountUnits,
			&i.AmountNanos,
			&i.AmountCurrency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET
    quantity = $2,
    amount_units = $3,
    amount_nanos = $4,
    amount_currency = $5
WHERE
    id = $1
`

type UpdateProductParams struct {
	ID             uuid.UUID `json:"id"`
	Quantity       int32     `json:"quantity"`
	AmountUnits    int64     `json:"amount_units"`
	AmountNanos    int32     `json:"amount_nanos"`
	AmountCurrency string    `json:"amount_currency"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.Quantity,
		arg.AmountUnits,
		arg.AmountNanos,
		arg.AmountCurrency,
	)
	return err
}
