// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package product

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO
    products (
        id,
        title,
        quantity,
        price,
        category
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, title, quantity, price, category
`

type CreateProductParams struct {
	ID       uuid.UUID `json:"id"`
	Title    string    `json:"title"`
	Quantity int32     `json:"quantity"`
	Price    int32     `json:"price"`
	Category string    `json:"category"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ID,
		arg.Title,
		arg.Quantity,
		arg.Price,
		arg.Category,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Quantity,
		&i.Price,
		&i.Category,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductsByIds = `-- name: GetProductsByIds :many
SELECT id, title, quantity, price, category FROM products WHERE id = ANY($1::uuid[])
`

func (q *Queries) GetProductsByIds(ctx context.Context, dollar_1 []uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Quantity,
			&i.Price,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, quantity, price FROM products LIMIT $1
`

type ListProductsRow struct {
	ID       uuid.UUID `json:"id"`
	Quantity int32     `json:"quantity"`
	Price    int32     `json:"price"`
}

func (q *Queries) ListProducts(ctx context.Context, limit int32) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProductsRow{}
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(&i.ID, &i.Quantity, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    title = title,
    category = category,
    quantity = quantity + $2,
    price = $3
WHERE
    id = $1 RETURNING id, title, quantity, price, category
`

type UpdateProductParams struct {
	ID       uuid.UUID `json:"id"`
	Quantity int32     `json:"quantity"`
	Price    int32     `json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct, arg.ID, arg.Quantity, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Quantity,
		&i.Price,
		&i.Category,
	)
	return i, err
}
