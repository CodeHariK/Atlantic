// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package product

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO
    products (product_name, category_id)
VALUES ($1, $2)
RETURNING
    id,
    product_name,
    category_id
`

type CreateProductParams struct {
	ProductName pgtype.Text `json:"product_name"`
	CategoryID  int32       `json:"category_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.ProductName, arg.CategoryID)
	var i Product
	err := row.Scan(&i.ID, &i.ProductName, &i.CategoryID)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, product_name, category_id FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(&i.ID, &i.ProductName, &i.CategoryID)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, product_name, category_id
FROM products
ORDER BY id
LIMIT $1
OFFSET
    $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ID, &i.ProductName, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    product_name = $1,
    category_id = $2
WHERE
    id = $3
RETURNING
    id,
    product_name,
    category_id
`

type UpdateProductParams struct {
	ProductName pgtype.Text `json:"product_name"`
	CategoryID  int32       `json:"category_id"`
	ID          int32       `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct, arg.ProductName, arg.CategoryID, arg.ID)
	var i Product
	err := row.Scan(&i.ID, &i.ProductName, &i.CategoryID)
	return i, err
}
