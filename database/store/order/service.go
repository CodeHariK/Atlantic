// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect). DO NOT EDIT.

package order

import (
	"context"
	"fmt"
	"log/slog"

	"connectrpc.com/connect"
	"github.com/google/uuid"

	pb "github.com/codeharik/Atlantic/database/api/order/v1"
	"github.com/codeharik/Atlantic/database/api/order/v1/v1connect"
	"github.com/codeharik/Atlantic/database/internal/validation"
)

type Service struct {
	v1connect.UnimplementedOrderServiceHandler
	querier *Queries
}

func (s *Service) CreateOrder(ctx context.Context, req *connect.Request[pb.CreateOrderRequest]) (*connect.Response[pb.CreateOrderResponse], error) {
	var arg CreateOrderParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	if v, err := uuid.Parse(req.Msg.GetUserId()); err != nil {
		err = fmt.Errorf("invalid UserID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.UserID = v
	}
	if v := req.Msg.GetCreatedAt(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid CreatedAt: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.CreatedAt.Valid = true
			arg.CreatedAt.Time = t
		}
	}
	if v := req.Msg.GetUpdatedAt(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid UpdatedAt: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.UpdatedAt.Valid = true
			arg.UpdatedAt.Time = t
		}
	}
	arg.AmountUnits = req.Msg.GetAmountUnits()
	arg.AmountNanos = req.Msg.GetAmountNanos()
	arg.AmountCurrency = req.Msg.GetAmountCurrency()
	arg.Status = req.Msg.GetStatus()
	arg.PaymentStatus = req.Msg.GetPaymentStatus()

	result, err := s.querier.CreateOrder(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CreateOrder")
		return nil, err
	}
	return connect.NewResponse(&pb.CreateOrderResponse{Order: toOrder(result)}), nil
}

func (s *Service) CreateOrderItem(ctx context.Context, req *connect.Request[pb.CreateOrderItemRequest]) (*connect.Response[pb.CreateOrderItemResponse], error) {
	var arg CreateOrderItemParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	if v, err := uuid.Parse(req.Msg.GetOrderId()); err != nil {
		err = fmt.Errorf("invalid OrderID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.OrderID = v
	}
	if v, err := uuid.Parse(req.Msg.GetProductId()); err != nil {
		err = fmt.Errorf("invalid ProductID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ProductID = v
	}
	arg.Quantity = req.Msg.GetQuantity()
	arg.AmountUnits = req.Msg.GetAmountUnits()
	arg.AmountNanos = req.Msg.GetAmountNanos()
	arg.AmountCurrency = req.Msg.GetAmountCurrency()

	result, err := s.querier.CreateOrderItem(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CreateOrderItem")
		return nil, err
	}
	return connect.NewResponse(&pb.CreateOrderItemResponse{OrderItem: toOrderItem(result)}), nil
}

func (s *Service) DeleteOrderByID(ctx context.Context, req *connect.Request[pb.DeleteOrderByIDRequest]) (*connect.Response[pb.DeleteOrderByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	err := s.querier.DeleteOrderByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "DeleteOrderByID")
		return nil, err
	}
	return connect.NewResponse(&pb.DeleteOrderByIDResponse{}), nil
}

func (s *Service) DeleteOrderItemByID(ctx context.Context, req *connect.Request[pb.DeleteOrderItemByIDRequest]) (*connect.Response[pb.DeleteOrderItemByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	err := s.querier.DeleteOrderItemByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "DeleteOrderItemByID")
		return nil, err
	}
	return connect.NewResponse(&pb.DeleteOrderItemByIDResponse{}), nil
}

func (s *Service) GetOrderByID(ctx context.Context, req *connect.Request[pb.GetOrderByIDRequest]) (*connect.Response[pb.GetOrderByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.GetOrderByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetOrderByID")
		return nil, err
	}
	return connect.NewResponse(&pb.GetOrderByIDResponse{Order: toOrder(result)}), nil
}

func (s *Service) GetOrderItemByID(ctx context.Context, req *connect.Request[pb.GetOrderItemByIDRequest]) (*connect.Response[pb.GetOrderItemByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.GetOrderItemByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetOrderItemByID")
		return nil, err
	}
	return connect.NewResponse(&pb.GetOrderItemByIDResponse{OrderItem: toOrderItem(result)}), nil
}

func (s *Service) GetOrderItemsByOrderID(ctx context.Context, req *connect.Request[pb.GetOrderItemsByOrderIDRequest]) (*connect.Response[pb.GetOrderItemsByOrderIDResponse], error) {
	var orderID uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetOrderId()); err != nil {
		err = fmt.Errorf("invalid OrderID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		orderID = v
	}

	result, err := s.querier.GetOrderItemsByOrderID(ctx, orderID)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetOrderItemsByOrderID")
		return nil, err
	}
	res := new(pb.GetOrderItemsByOrderIDResponse)
	for _, r := range result {
		res.List = append(res.List, toOrderItem(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) GetOrdersByUserID(ctx context.Context, req *connect.Request[pb.GetOrdersByUserIDRequest]) (*connect.Response[pb.GetOrdersByUserIDResponse], error) {
	var userID uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetUserId()); err != nil {
		err = fmt.Errorf("invalid UserID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		userID = v
	}

	result, err := s.querier.GetOrdersByUserID(ctx, userID)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetOrdersByUserID")
		return nil, err
	}
	res := new(pb.GetOrdersByUserIDResponse)
	for _, r := range result {
		res.List = append(res.List, toOrder(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) UpdateOrderPaymentStatus(ctx context.Context, req *connect.Request[pb.UpdateOrderPaymentStatusRequest]) (*connect.Response[pb.UpdateOrderPaymentStatusResponse], error) {
	var arg UpdateOrderPaymentStatusParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	arg.PaymentStatus = req.Msg.GetPaymentStatus()
	if v := req.Msg.GetUpdatedAt(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid UpdatedAt: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.UpdatedAt.Valid = true
			arg.UpdatedAt.Time = t
		}
	}

	result, err := s.querier.UpdateOrderPaymentStatus(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "UpdateOrderPaymentStatus")
		return nil, err
	}
	return connect.NewResponse(&pb.UpdateOrderPaymentStatusResponse{Order: toOrder(result)}), nil
}

func (s *Service) UpdateOrderStatus(ctx context.Context, req *connect.Request[pb.UpdateOrderStatusRequest]) (*connect.Response[pb.UpdateOrderStatusResponse], error) {
	var arg UpdateOrderStatusParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	arg.Status = req.Msg.GetStatus()
	if v := req.Msg.GetUpdatedAt(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid UpdatedAt: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.UpdatedAt.Valid = true
			arg.UpdatedAt.Time = t
		}
	}

	result, err := s.querier.UpdateOrderStatus(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "UpdateOrderStatus")
		return nil, err
	}
	return connect.NewResponse(&pb.UpdateOrderStatusResponse{Order: toOrder(result)}), nil
}
