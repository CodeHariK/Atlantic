// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package order

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO
    orders (
        id,
        user_id,
        created_at,
        updated_at,
        amount_units,
        amount_nanos,
        amount_currency,
        status,
        payment_status
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
    ) RETURNING id, user_id, created_at, updated_at, amount_units, amount_nanos, amount_currency, status, payment_status
`

type CreateOrderParams struct {
	ID             uuid.UUID        `json:"id"`
	UserID         uuid.UUID        `json:"user_id"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
	AmountUnits    int64            `json:"amount_units"`
	AmountNanos    int32            `json:"amount_nanos"`
	AmountCurrency string           `json:"amount_currency"`
	Status         string           `json:"status"`
	PaymentStatus  string           `json:"payment_status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AmountUnits,
		arg.AmountNanos,
		arg.AmountCurrency,
		arg.Status,
		arg.PaymentStatus,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AmountUnits,
		&i.AmountNanos,
		&i.AmountCurrency,
		&i.Status,
		&i.PaymentStatus,
	)
	return i, err
}

const deleteOrderByID = `-- name: DeleteOrderByID :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrderByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrderByID, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, created_at, updated_at, amount_units, amount_nanos, amount_currency, status, payment_status FROM orders WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AmountUnits,
		&i.AmountNanos,
		&i.AmountCurrency,
		&i.Status,
		&i.PaymentStatus,
	)
	return i, err
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT id, user_id, created_at, updated_at, amount_units, amount_nanos, amount_currency, status, payment_status FROM orders WHERE user_id = $1
`

func (q *Queries) GetOrdersByUserID(ctx context.Context, userID uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AmountUnits,
			&i.AmountNanos,
			&i.AmountCurrency,
			&i.Status,
			&i.PaymentStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderPaymentStatus = `-- name: UpdateOrderPaymentStatus :one
UPDATE orders
SET
    payment_status = $2,
    updated_at = $3
WHERE
    id = $1 RETURNING id, user_id, created_at, updated_at, amount_units, amount_nanos, amount_currency, status, payment_status
`

type UpdateOrderPaymentStatusParams struct {
	ID            uuid.UUID        `json:"id"`
	PaymentStatus string           `json:"payment_status"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateOrderPaymentStatus(ctx context.Context, arg UpdateOrderPaymentStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderPaymentStatus, arg.ID, arg.PaymentStatus, arg.UpdatedAt)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AmountUnits,
		&i.AmountNanos,
		&i.AmountCurrency,
		&i.Status,
		&i.PaymentStatus,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET
    status = $2,
    updated_at = $3
WHERE
    id = $1 RETURNING id, user_id, created_at, updated_at, amount_units, amount_nanos, amount_currency, status, payment_status
`

type UpdateOrderStatusParams struct {
	ID        uuid.UUID        `json:"id"`
	Status    string           `json:"status"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status, arg.UpdatedAt)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AmountUnits,
		&i.AmountNanos,
		&i.AmountCurrency,
		&i.Status,
		&i.PaymentStatus,
	)
	return i, err
}
