// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart_items.sql

package cart

import (
	"context"

	"github.com/google/uuid"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO
    cart_items (
        id,
        cart_id,
        product_id,
        quantity
    )
VALUES ($1, $2, $3, $4) RETURNING id, cart_id, product_id, quantity
`

type CreateCartItemParams struct {
	ID        uuid.UUID `json:"id"`
	CartID    uuid.UUID `json:"cart_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.ID,
		arg.CartID,
		arg.ProductID,
		arg.Quantity,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteCartItemByID = `-- name: DeleteCartItemByID :exec
DELETE FROM cart_items WHERE id = $1
`

func (q *Queries) DeleteCartItemByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCartItemByID, id)
	return err
}

const getCartItemByID = `-- name: GetCartItemByID :one
SELECT id, cart_id, product_id, quantity FROM cart_items WHERE id = $1
`

func (q *Queries) GetCartItemByID(ctx context.Context, id uuid.UUID) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItemByID, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const getCartItemsByCartID = `-- name: GetCartItemsByCartID :many
SELECT id, cart_id, product_id, quantity FROM cart_items WHERE cart_id = $1
`

func (q *Queries) GetCartItemsByCartID(ctx context.Context, cartID uuid.UUID) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, getCartItemsByCartID, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartItem{}
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :one
UPDATE cart_items SET quantity = $2 WHERE id = $1 RETURNING id, cart_id, product_id, quantity
`

type UpdateCartItemQuantityParams struct {
	ID       uuid.UUID `json:"id"`
	Quantity int32     `json:"quantity"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, updateCartItemQuantity, arg.ID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}
