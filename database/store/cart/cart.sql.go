// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package cart

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCart = `-- name: CreateCart :one
INSERT INTO
    carts (
        id,
        user_id,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4) RETURNING id, user_id, created_at, updated_at
`

type CreateCartParams struct {
	ID        uuid.UUID        `json:"id"`
	UserID    uuid.UUID        `json:"user_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCartByID = `-- name: DeleteCartByID :exec
DELETE FROM carts WHERE id = $1
`

func (q *Queries) DeleteCartByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCartByID, id)
	return err
}

const getCartByID = `-- name: GetCartByID :one
SELECT id, user_id, created_at, updated_at FROM carts WHERE id = $1
`

func (q *Queries) GetCartByID(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartByID, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCartsByUserID = `-- name: GetCartsByUserID :many
SELECT id, user_id, created_at, updated_at FROM carts WHERE user_id = $1
`

func (q *Queries) GetCartsByUserID(ctx context.Context, userID uuid.UUID) ([]Cart, error) {
	rows, err := q.db.Query(ctx, getCartsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
