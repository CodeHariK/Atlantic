// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect). DO NOT EDIT.

package cart

import (
	"context"
	"fmt"
	"log/slog"

	"connectrpc.com/connect"
	"github.com/google/uuid"

	pb "github.com/codeharik/Atlantic/database/api/cart/v1"
	"github.com/codeharik/Atlantic/database/api/cart/v1/v1connect"
	"github.com/codeharik/Atlantic/database/internal/validation"
)

type Service struct {
	v1connect.UnimplementedCartServiceHandler
	querier *Queries
}

func (s *Service) CreateCart(ctx context.Context, req *connect.Request[pb.CreateCartRequest]) (*connect.Response[pb.CreateCartResponse], error) {
	var arg CreateCartParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	if v, err := uuid.Parse(req.Msg.GetUserId()); err != nil {
		err = fmt.Errorf("invalid UserID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.UserID = v
	}
	if v := req.Msg.GetCreatedAt(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid CreatedAt: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.CreatedAt.Valid = true
			arg.CreatedAt.Time = t
		}
	}
	if v := req.Msg.GetUpdatedAt(); v != nil {
		if err := v.CheckValid(); err != nil {
			err = fmt.Errorf("invalid UpdatedAt: %s%w", err.Error(), validation.ErrUserInput)
			return nil, err
		}
		if t := v.AsTime(); !t.IsZero() {
			arg.UpdatedAt.Valid = true
			arg.UpdatedAt.Time = t
		}
	}

	result, err := s.querier.CreateCart(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CreateCart")
		return nil, err
	}
	return connect.NewResponse(&pb.CreateCartResponse{Cart: toCart(result)}), nil
}

func (s *Service) CreateCartItem(ctx context.Context, req *connect.Request[pb.CreateCartItemRequest]) (*connect.Response[pb.CreateCartItemResponse], error) {
	var arg CreateCartItemParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	if v, err := uuid.Parse(req.Msg.GetCartId()); err != nil {
		err = fmt.Errorf("invalid CartID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.CartID = v
	}
	if v, err := uuid.Parse(req.Msg.GetProductId()); err != nil {
		err = fmt.Errorf("invalid ProductID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ProductID = v
	}
	arg.Quantity = req.Msg.GetQuantity()

	result, err := s.querier.CreateCartItem(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CreateCartItem")
		return nil, err
	}
	return connect.NewResponse(&pb.CreateCartItemResponse{CartItem: toCartItem(result)}), nil
}

func (s *Service) DeleteCartByID(ctx context.Context, req *connect.Request[pb.DeleteCartByIDRequest]) (*connect.Response[pb.DeleteCartByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	err := s.querier.DeleteCartByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "DeleteCartByID")
		return nil, err
	}
	return connect.NewResponse(&pb.DeleteCartByIDResponse{}), nil
}

func (s *Service) DeleteCartItemByID(ctx context.Context, req *connect.Request[pb.DeleteCartItemByIDRequest]) (*connect.Response[pb.DeleteCartItemByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	err := s.querier.DeleteCartItemByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "DeleteCartItemByID")
		return nil, err
	}
	return connect.NewResponse(&pb.DeleteCartItemByIDResponse{}), nil
}

func (s *Service) GetCartByID(ctx context.Context, req *connect.Request[pb.GetCartByIDRequest]) (*connect.Response[pb.GetCartByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.GetCartByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetCartByID")
		return nil, err
	}
	return connect.NewResponse(&pb.GetCartByIDResponse{Cart: toCart(result)}), nil
}

func (s *Service) GetCartItemByID(ctx context.Context, req *connect.Request[pb.GetCartItemByIDRequest]) (*connect.Response[pb.GetCartItemByIDResponse], error) {
	var id uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid Id: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		id = v
	}

	result, err := s.querier.GetCartItemByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetCartItemByID")
		return nil, err
	}
	return connect.NewResponse(&pb.GetCartItemByIDResponse{CartItem: toCartItem(result)}), nil
}

func (s *Service) GetCartItemsByCartID(ctx context.Context, req *connect.Request[pb.GetCartItemsByCartIDRequest]) (*connect.Response[pb.GetCartItemsByCartIDResponse], error) {
	var cartID uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetCartId()); err != nil {
		err = fmt.Errorf("invalid CartID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		cartID = v
	}

	result, err := s.querier.GetCartItemsByCartID(ctx, cartID)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetCartItemsByCartID")
		return nil, err
	}
	res := new(pb.GetCartItemsByCartIDResponse)
	for _, r := range result {
		res.List = append(res.List, toCartItem(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) GetCartsByUserID(ctx context.Context, req *connect.Request[pb.GetCartsByUserIDRequest]) (*connect.Response[pb.GetCartsByUserIDResponse], error) {
	var userID uuid.UUID
	if v, err := uuid.Parse(req.Msg.GetUserId()); err != nil {
		err = fmt.Errorf("invalid UserID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		userID = v
	}

	result, err := s.querier.GetCartsByUserID(ctx, userID)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetCartsByUserID")
		return nil, err
	}
	res := new(pb.GetCartsByUserIDResponse)
	for _, r := range result {
		res.List = append(res.List, toCart(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) UpdateCartItemQuantity(ctx context.Context, req *connect.Request[pb.UpdateCartItemQuantityRequest]) (*connect.Response[pb.UpdateCartItemQuantityResponse], error) {
	var arg UpdateCartItemQuantityParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	arg.Quantity = req.Msg.GetQuantity()

	result, err := s.querier.UpdateCartItemQuantity(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "UpdateCartItemQuantity")
		return nil, err
	}
	return connect.NewResponse(&pb.UpdateCartItemQuantityResponse{CartItem: toCartItem(result)}), nil
}
