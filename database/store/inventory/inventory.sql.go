// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: inventory.sql

package inventory

import (
	"context"

	"github.com/google/uuid"
)

const addToInventory = `-- name: AddToInventory :exec
INSERT INTO inventory (id, variant_id, seller_id, quantity, amount_units, amount_nanos, amount_currency)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT (id) DO UPDATE SET
    quantity = inventory.quantity + EXCLUDED.quantity
`

type AddToInventoryParams struct {
	ID             uuid.UUID `json:"id"`
	VariantID      uuid.UUID `json:"variant_id"`
	SellerID       uuid.UUID `json:"seller_id"`
	Quantity       int32     `json:"quantity"`
	AmountUnits    int64     `json:"amount_units"`
	AmountNanos    int32     `json:"amount_nanos"`
	AmountCurrency string    `json:"amount_currency"`
}

func (q *Queries) AddToInventory(ctx context.Context, arg AddToInventoryParams) error {
	_, err := q.db.Exec(ctx, addToInventory,
		arg.ID,
		arg.VariantID,
		arg.SellerID,
		arg.Quantity,
		arg.AmountUnits,
		arg.AmountNanos,
		arg.AmountCurrency,
	)
	return err
}

const checkIfQuantityExists = `-- name: CheckIfQuantityExists :one
SELECT quantity >= $1 AS sufficient_quantity
FROM inventory
WHERE variant_id = $2 AND seller_id = $3
`

type CheckIfQuantityExistsParams struct {
	Quantity  int32     `json:"quantity"`
	VariantID uuid.UUID `json:"variant_id"`
	SellerID  uuid.UUID `json:"seller_id"`
}

func (q *Queries) CheckIfQuantityExists(ctx context.Context, arg CheckIfQuantityExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkIfQuantityExists, arg.Quantity, arg.VariantID, arg.SellerID)
	var sufficient_quantity bool
	err := row.Scan(&sufficient_quantity)
	return sufficient_quantity, err
}

const removeFromInventory = `-- name: RemoveFromInventory :exec
UPDATE inventory
SET quantity = quantity - $1
WHERE variant_id = $2 AND seller_id = $3 AND quantity >= $1
RETURNING quantity
`

type RemoveFromInventoryParams struct {
	Quantity  int32     `json:"quantity"`
	VariantID uuid.UUID `json:"variant_id"`
	SellerID  uuid.UUID `json:"seller_id"`
}

func (q *Queries) RemoveFromInventory(ctx context.Context, arg RemoveFromInventoryParams) error {
	_, err := q.db.Exec(ctx, removeFromInventory, arg.Quantity, arg.VariantID, arg.SellerID)
	return err
}
