// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect). DO NOT EDIT.

package inventory

import (
	"context"
	"fmt"
	"log/slog"

	"connectrpc.com/connect"
	"github.com/google/uuid"

	pb "github.com/codeharik/Atlantic/database/api/inventory/v1"
	"github.com/codeharik/Atlantic/database/api/inventory/v1/v1connect"
	"github.com/codeharik/Atlantic/database/internal/validation"
)

type Service struct {
	v1connect.UnimplementedInventoryServiceHandler
	querier *Queries
}

func (s *Service) AddToInventory(ctx context.Context, req *connect.Request[pb.AddToInventoryRequest]) (*connect.Response[pb.AddToInventoryResponse], error) {
	var arg AddToInventoryParams
	if v, err := uuid.Parse(req.Msg.GetId()); err != nil {
		err = fmt.Errorf("invalid ID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.ID = v
	}
	if v, err := uuid.Parse(req.Msg.GetVariantId()); err != nil {
		err = fmt.Errorf("invalid VariantID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.VariantID = v
	}
	if v, err := uuid.Parse(req.Msg.GetSellerId()); err != nil {
		err = fmt.Errorf("invalid SellerID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.SellerID = v
	}
	arg.Quantity = req.Msg.GetQuantity()
	arg.AmountUnits = req.Msg.GetAmountUnits()
	arg.AmountNanos = req.Msg.GetAmountNanos()
	arg.AmountCurrency = req.Msg.GetAmountCurrency()

	err := s.querier.AddToInventory(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "AddToInventory")
		return nil, err
	}
	return connect.NewResponse(&pb.AddToInventoryResponse{}), nil
}

func (s *Service) CheckIfQuantityExists(ctx context.Context, req *connect.Request[pb.CheckIfQuantityExistsRequest]) (*connect.Response[pb.CheckIfQuantityExistsResponse], error) {
	var arg CheckIfQuantityExistsParams
	arg.Quantity = req.Msg.GetQuantity()
	if v, err := uuid.Parse(req.Msg.GetVariantId()); err != nil {
		err = fmt.Errorf("invalid VariantID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.VariantID = v
	}
	if v, err := uuid.Parse(req.Msg.GetSellerId()); err != nil {
		err = fmt.Errorf("invalid SellerID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.SellerID = v
	}

	result, err := s.querier.CheckIfQuantityExists(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CheckIfQuantityExists")
		return nil, err
	}
	return connect.NewResponse(&pb.CheckIfQuantityExistsResponse{Value: result}), nil
}

func (s *Service) RemoveFromInventory(ctx context.Context, req *connect.Request[pb.RemoveFromInventoryRequest]) (*connect.Response[pb.RemoveFromInventoryResponse], error) {
	var arg RemoveFromInventoryParams
	arg.Quantity = req.Msg.GetQuantity()
	if v, err := uuid.Parse(req.Msg.GetVariantId()); err != nil {
		err = fmt.Errorf("invalid VariantID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.VariantID = v
	}
	if v, err := uuid.Parse(req.Msg.GetSellerId()); err != nil {
		err = fmt.Errorf("invalid SellerID: %s%w", err.Error(), validation.ErrUserInput)
		return nil, err
	} else {
		arg.SellerID = v
	}

	err := s.querier.RemoveFromInventory(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "RemoveFromInventory")
		return nil, err
	}
	return connect.NewResponse(&pb.RemoveFromInventoryResponse{}), nil
}
