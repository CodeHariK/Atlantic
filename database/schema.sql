-- Add new schema named "public"
CREATE SCHEMA IF NOT EXISTS "public";
-- Set comment to schema: "public"
COMMENT ON SCHEMA "public" IS 'standard public schema';
-- Create "goose_db_version" table
CREATE TABLE "public"."goose_db_version" ("id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY, "version_id" bigint NOT NULL, "is_applied" boolean NOT NULL, "tstamp" timestamp NOT NULL DEFAULT now(), PRIMARY KEY ("id"));
-- Create "users" table
CREATE TABLE "public"."users" ("user_id" uuid NOT NULL, "username" character varying(255) NULL, "password_hash" character varying(255) NULL, "email" character varying(255) NULL, "verified" boolean NOT NULL DEFAULT false, "phone_number" character varying(15) NULL, "gender" character(1) NULL, "role" bigint NOT NULL DEFAULT 1, "date_of_birth" date NULL, "address" character varying(255) NOT NULL, "balance" integer NOT NULL, "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, "updated_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY ("user_id"), CONSTRAINT "users_email_key" UNIQUE ("email"), CONSTRAINT "users_phone_number_key" UNIQUE ("phone_number"), CONSTRAINT "users_username_key" UNIQUE ("username"), CONSTRAINT "users_address_check" CHECK (char_length((address)::text) > 0), CONSTRAINT "users_check" CHECK (((email IS NOT NULL) AND (char_length((email)::text) > 0)) OR ((phone_number IS NOT NULL) AND (char_length((phone_number)::text) > 0))), CONSTRAINT "users_email_check" CHECK (char_length((email)::text) > 0), CONSTRAINT "users_gender_check" CHECK (gender = ANY (ARRAY['M'::bpchar, 'F'::bpchar])), CONSTRAINT "users_phone_number_check" CHECK (char_length((phone_number)::text) > 0), CONSTRAINT "users_role_check" CHECK (role > 0), CONSTRAINT "users_username_check" CHECK (char_length((username)::text) > 0));
-- Create index "idx_users_email" to table: "users"
CREATE INDEX "idx_users_email" ON "public"."users" ("email");
-- Create "orders" table
CREATE TABLE "public"."orders" ("order_id" uuid NOT NULL, "user_id" uuid NOT NULL, "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, "updated_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, "price" integer NOT NULL, "status" character varying(12) NOT NULL DEFAULT 'PENDING', "payment_status" character varying(12) NOT NULL, PRIMARY KEY ("order_id"), CONSTRAINT "orders_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users" ("user_id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "orders_payment_status_check" CHECK ((payment_status)::text = ANY ((ARRAY['REFUNDED'::character varying, 'CASH_ON_DELIVERY'::character varying, 'PAID'::character varying])::text[])), CONSTRAINT "orders_status_check" CHECK ((status)::text = ANY ((ARRAY['RETURNED'::character varying, 'CANCELED'::character varying, 'PENDING'::character varying, 'CONFIRMED'::character varying, 'PROCESSING'::character varying, 'SHIPPED'::character varying, 'DELIVERED'::character varying])::text[])));
-- Create index "idx_orders_user_id" to table: "orders"
CREATE INDEX "idx_orders_user_id" ON "public"."orders" ("user_id");
-- Create "products" table
CREATE TABLE "public"."products" ("product_id" uuid NOT NULL, "title" character varying(128) NOT NULL, "quantity" integer NOT NULL, "price" integer NOT NULL, "category" character varying(128) NOT NULL, PRIMARY KEY ("product_id"), CONSTRAINT "products_category_check" CHECK (char_length((category)::text) > 0), CONSTRAINT "products_price_check" CHECK (price > 0), CONSTRAINT "products_quantity_check" CHECK (quantity > 0), CONSTRAINT "products_title_check" CHECK (char_length((title)::text) > 0));
-- Create "order_items" table
CREATE TABLE "public"."order_items" ("orderitem_id" uuid NOT NULL, "order_id" uuid NOT NULL, "product_id" uuid NOT NULL, "quantity" integer NOT NULL, "price" integer NOT NULL, PRIMARY KEY ("orderitem_id"), CONSTRAINT "order_items_order_id_fkey" FOREIGN KEY ("order_id") REFERENCES "public"."orders" ("order_id") ON UPDATE NO ACTION ON DELETE CASCADE, CONSTRAINT "order_items_product_id_fkey" FOREIGN KEY ("product_id") REFERENCES "public"."products" ("product_id") ON UPDATE NO ACTION ON DELETE CASCADE);
-- Create index "idx_order_items_order_id" to table: "order_items"
CREATE INDEX "idx_order_items_order_id" ON "public"."order_items" ("order_id");
-- Create index "idx_order_items_product_id" to table: "order_items"
CREATE INDEX "idx_order_items_product_id" ON "public"."order_items" ("product_id");
