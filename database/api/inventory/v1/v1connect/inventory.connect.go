// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: inventory/v1/inventory.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codeharik/Atlantic/database/api/inventory/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InventoryServiceName is the fully-qualified name of the InventoryService service.
	InventoryServiceName = "inventory.v1.InventoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InventoryServiceAddToInventoryProcedure is the fully-qualified name of the InventoryService's
	// AddToInventory RPC.
	InventoryServiceAddToInventoryProcedure = "/inventory.v1.InventoryService/AddToInventory"
	// InventoryServiceCheckIfQuantityExistsProcedure is the fully-qualified name of the
	// InventoryService's CheckIfQuantityExists RPC.
	InventoryServiceCheckIfQuantityExistsProcedure = "/inventory.v1.InventoryService/CheckIfQuantityExists"
	// InventoryServiceRemoveFromInventoryProcedure is the fully-qualified name of the
	// InventoryService's RemoveFromInventory RPC.
	InventoryServiceRemoveFromInventoryProcedure = "/inventory.v1.InventoryService/RemoveFromInventory"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	inventoryServiceServiceDescriptor                     = v1.File_inventory_v1_inventory_proto.Services().ByName("InventoryService")
	inventoryServiceAddToInventoryMethodDescriptor        = inventoryServiceServiceDescriptor.Methods().ByName("AddToInventory")
	inventoryServiceCheckIfQuantityExistsMethodDescriptor = inventoryServiceServiceDescriptor.Methods().ByName("CheckIfQuantityExists")
	inventoryServiceRemoveFromInventoryMethodDescriptor   = inventoryServiceServiceDescriptor.Methods().ByName("RemoveFromInventory")
)

// InventoryServiceClient is a client for the inventory.v1.InventoryService service.
type InventoryServiceClient interface {
	AddToInventory(context.Context, *connect.Request[v1.AddToInventoryRequest]) (*connect.Response[v1.AddToInventoryResponse], error)
	CheckIfQuantityExists(context.Context, *connect.Request[v1.CheckIfQuantityExistsRequest]) (*connect.Response[v1.CheckIfQuantityExistsResponse], error)
	RemoveFromInventory(context.Context, *connect.Request[v1.RemoveFromInventoryRequest]) (*connect.Response[v1.RemoveFromInventoryResponse], error)
}

// NewInventoryServiceClient constructs a client for the inventory.v1.InventoryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInventoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InventoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inventoryServiceClient{
		addToInventory: connect.NewClient[v1.AddToInventoryRequest, v1.AddToInventoryResponse](
			httpClient,
			baseURL+InventoryServiceAddToInventoryProcedure,
			connect.WithSchema(inventoryServiceAddToInventoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkIfQuantityExists: connect.NewClient[v1.CheckIfQuantityExistsRequest, v1.CheckIfQuantityExistsResponse](
			httpClient,
			baseURL+InventoryServiceCheckIfQuantityExistsProcedure,
			connect.WithSchema(inventoryServiceCheckIfQuantityExistsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeFromInventory: connect.NewClient[v1.RemoveFromInventoryRequest, v1.RemoveFromInventoryResponse](
			httpClient,
			baseURL+InventoryServiceRemoveFromInventoryProcedure,
			connect.WithSchema(inventoryServiceRemoveFromInventoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// inventoryServiceClient implements InventoryServiceClient.
type inventoryServiceClient struct {
	addToInventory        *connect.Client[v1.AddToInventoryRequest, v1.AddToInventoryResponse]
	checkIfQuantityExists *connect.Client[v1.CheckIfQuantityExistsRequest, v1.CheckIfQuantityExistsResponse]
	removeFromInventory   *connect.Client[v1.RemoveFromInventoryRequest, v1.RemoveFromInventoryResponse]
}

// AddToInventory calls inventory.v1.InventoryService.AddToInventory.
func (c *inventoryServiceClient) AddToInventory(ctx context.Context, req *connect.Request[v1.AddToInventoryRequest]) (*connect.Response[v1.AddToInventoryResponse], error) {
	return c.addToInventory.CallUnary(ctx, req)
}

// CheckIfQuantityExists calls inventory.v1.InventoryService.CheckIfQuantityExists.
func (c *inventoryServiceClient) CheckIfQuantityExists(ctx context.Context, req *connect.Request[v1.CheckIfQuantityExistsRequest]) (*connect.Response[v1.CheckIfQuantityExistsResponse], error) {
	return c.checkIfQuantityExists.CallUnary(ctx, req)
}

// RemoveFromInventory calls inventory.v1.InventoryService.RemoveFromInventory.
func (c *inventoryServiceClient) RemoveFromInventory(ctx context.Context, req *connect.Request[v1.RemoveFromInventoryRequest]) (*connect.Response[v1.RemoveFromInventoryResponse], error) {
	return c.removeFromInventory.CallUnary(ctx, req)
}

// InventoryServiceHandler is an implementation of the inventory.v1.InventoryService service.
type InventoryServiceHandler interface {
	AddToInventory(context.Context, *connect.Request[v1.AddToInventoryRequest]) (*connect.Response[v1.AddToInventoryResponse], error)
	CheckIfQuantityExists(context.Context, *connect.Request[v1.CheckIfQuantityExistsRequest]) (*connect.Response[v1.CheckIfQuantityExistsResponse], error)
	RemoveFromInventory(context.Context, *connect.Request[v1.RemoveFromInventoryRequest]) (*connect.Response[v1.RemoveFromInventoryResponse], error)
}

// NewInventoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInventoryServiceHandler(svc InventoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inventoryServiceAddToInventoryHandler := connect.NewUnaryHandler(
		InventoryServiceAddToInventoryProcedure,
		svc.AddToInventory,
		connect.WithSchema(inventoryServiceAddToInventoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceCheckIfQuantityExistsHandler := connect.NewUnaryHandler(
		InventoryServiceCheckIfQuantityExistsProcedure,
		svc.CheckIfQuantityExists,
		connect.WithSchema(inventoryServiceCheckIfQuantityExistsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	inventoryServiceRemoveFromInventoryHandler := connect.NewUnaryHandler(
		InventoryServiceRemoveFromInventoryProcedure,
		svc.RemoveFromInventory,
		connect.WithSchema(inventoryServiceRemoveFromInventoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/inventory.v1.InventoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InventoryServiceAddToInventoryProcedure:
			inventoryServiceAddToInventoryHandler.ServeHTTP(w, r)
		case InventoryServiceCheckIfQuantityExistsProcedure:
			inventoryServiceCheckIfQuantityExistsHandler.ServeHTTP(w, r)
		case InventoryServiceRemoveFromInventoryProcedure:
			inventoryServiceRemoveFromInventoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInventoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInventoryServiceHandler struct{}

func (UnimplementedInventoryServiceHandler) AddToInventory(context.Context, *connect.Request[v1.AddToInventoryRequest]) (*connect.Response[v1.AddToInventoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.AddToInventory is not implemented"))
}

func (UnimplementedInventoryServiceHandler) CheckIfQuantityExists(context.Context, *connect.Request[v1.CheckIfQuantityExistsRequest]) (*connect.Response[v1.CheckIfQuantityExistsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.CheckIfQuantityExists is not implemented"))
}

func (UnimplementedInventoryServiceHandler) RemoveFromInventory(context.Context, *connect.Request[v1.RemoveFromInventoryRequest]) (*connect.Response[v1.RemoveFromInventoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inventory.v1.InventoryService.RemoveFromInventory is not implemented"))
}
