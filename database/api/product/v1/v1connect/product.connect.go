// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: product/v1/product.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codeharik/Atlantic/database/api/product/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "product.v1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceCreateProductProcedure is the fully-qualified name of the ProductService's
	// CreateProduct RPC.
	ProductServiceCreateProductProcedure = "/product.v1.ProductService/CreateProduct"
	// ProductServiceCreateProductCategoryProcedure is the fully-qualified name of the ProductService's
	// CreateProductCategory RPC.
	ProductServiceCreateProductCategoryProcedure = "/product.v1.ProductService/CreateProductCategory"
	// ProductServiceCreateProductCommentProcedure is the fully-qualified name of the ProductService's
	// CreateProductComment RPC.
	ProductServiceCreateProductCommentProcedure = "/product.v1.ProductService/CreateProductComment"
	// ProductServiceCreateProductReviewProcedure is the fully-qualified name of the ProductService's
	// CreateProductReview RPC.
	ProductServiceCreateProductReviewProcedure = "/product.v1.ProductService/CreateProductReview"
	// ProductServiceDeleteProductProcedure is the fully-qualified name of the ProductService's
	// DeleteProduct RPC.
	ProductServiceDeleteProductProcedure = "/product.v1.ProductService/DeleteProduct"
	// ProductServiceDeleteProductCategoryProcedure is the fully-qualified name of the ProductService's
	// DeleteProductCategory RPC.
	ProductServiceDeleteProductCategoryProcedure = "/product.v1.ProductService/DeleteProductCategory"
	// ProductServiceDeleteProductCommentProcedure is the fully-qualified name of the ProductService's
	// DeleteProductComment RPC.
	ProductServiceDeleteProductCommentProcedure = "/product.v1.ProductService/DeleteProductComment"
	// ProductServiceDeleteProductReviewProcedure is the fully-qualified name of the ProductService's
	// DeleteProductReview RPC.
	ProductServiceDeleteProductReviewProcedure = "/product.v1.ProductService/DeleteProductReview"
	// ProductServiceGetCategoryPathProcedure is the fully-qualified name of the ProductService's
	// GetCategoryPath RPC.
	ProductServiceGetCategoryPathProcedure = "/product.v1.ProductService/GetCategoryPath"
	// ProductServiceGetProductByIDProcedure is the fully-qualified name of the ProductService's
	// GetProductByID RPC.
	ProductServiceGetProductByIDProcedure = "/product.v1.ProductService/GetProductByID"
	// ProductServiceGetProductCategoryByIDProcedure is the fully-qualified name of the ProductService's
	// GetProductCategoryByID RPC.
	ProductServiceGetProductCategoryByIDProcedure = "/product.v1.ProductService/GetProductCategoryByID"
	// ProductServiceGetProductCommentByIDProcedure is the fully-qualified name of the ProductService's
	// GetProductCommentByID RPC.
	ProductServiceGetProductCommentByIDProcedure = "/product.v1.ProductService/GetProductCommentByID"
	// ProductServiceGetProductReviewByIDProcedure is the fully-qualified name of the ProductService's
	// GetProductReviewByID RPC.
	ProductServiceGetProductReviewByIDProcedure = "/product.v1.ProductService/GetProductReviewByID"
	// ProductServiceGetProductWithCategoryPathProcedure is the fully-qualified name of the
	// ProductService's GetProductWithCategoryPath RPC.
	ProductServiceGetProductWithCategoryPathProcedure = "/product.v1.ProductService/GetProductWithCategoryPath"
	// ProductServiceListCategoriesByParentIDProcedure is the fully-qualified name of the
	// ProductService's ListCategoriesByParentID RPC.
	ProductServiceListCategoriesByParentIDProcedure = "/product.v1.ProductService/ListCategoriesByParentID"
	// ProductServiceListProductReviewsProcedure is the fully-qualified name of the ProductService's
	// ListProductReviews RPC.
	ProductServiceListProductReviewsProcedure = "/product.v1.ProductService/ListProductReviews"
	// ProductServiceListProductsProcedure is the fully-qualified name of the ProductService's
	// ListProducts RPC.
	ProductServiceListProductsProcedure = "/product.v1.ProductService/ListProducts"
	// ProductServiceListReviewsWithCommentsProcedure is the fully-qualified name of the
	// ProductService's ListReviewsWithComments RPC.
	ProductServiceListReviewsWithCommentsProcedure = "/product.v1.ProductService/ListReviewsWithComments"
	// ProductServiceListRootCategoriesProcedure is the fully-qualified name of the ProductService's
	// ListRootCategories RPC.
	ProductServiceListRootCategoriesProcedure = "/product.v1.ProductService/ListRootCategories"
	// ProductServiceUpdateProductProcedure is the fully-qualified name of the ProductService's
	// UpdateProduct RPC.
	ProductServiceUpdateProductProcedure = "/product.v1.ProductService/UpdateProduct"
	// ProductServiceUpdateProductCategoryProcedure is the fully-qualified name of the ProductService's
	// UpdateProductCategory RPC.
	ProductServiceUpdateProductCategoryProcedure = "/product.v1.ProductService/UpdateProductCategory"
	// ProductServiceUpdateProductCommentProcedure is the fully-qualified name of the ProductService's
	// UpdateProductComment RPC.
	ProductServiceUpdateProductCommentProcedure = "/product.v1.ProductService/UpdateProductComment"
	// ProductServiceUpdateProductReviewProcedure is the fully-qualified name of the ProductService's
	// UpdateProductReview RPC.
	ProductServiceUpdateProductReviewProcedure = "/product.v1.ProductService/UpdateProductReview"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	productServiceServiceDescriptor                          = v1.File_product_v1_product_proto.Services().ByName("ProductService")
	productServiceCreateProductMethodDescriptor              = productServiceServiceDescriptor.Methods().ByName("CreateProduct")
	productServiceCreateProductCategoryMethodDescriptor      = productServiceServiceDescriptor.Methods().ByName("CreateProductCategory")
	productServiceCreateProductCommentMethodDescriptor       = productServiceServiceDescriptor.Methods().ByName("CreateProductComment")
	productServiceCreateProductReviewMethodDescriptor        = productServiceServiceDescriptor.Methods().ByName("CreateProductReview")
	productServiceDeleteProductMethodDescriptor              = productServiceServiceDescriptor.Methods().ByName("DeleteProduct")
	productServiceDeleteProductCategoryMethodDescriptor      = productServiceServiceDescriptor.Methods().ByName("DeleteProductCategory")
	productServiceDeleteProductCommentMethodDescriptor       = productServiceServiceDescriptor.Methods().ByName("DeleteProductComment")
	productServiceDeleteProductReviewMethodDescriptor        = productServiceServiceDescriptor.Methods().ByName("DeleteProductReview")
	productServiceGetCategoryPathMethodDescriptor            = productServiceServiceDescriptor.Methods().ByName("GetCategoryPath")
	productServiceGetProductByIDMethodDescriptor             = productServiceServiceDescriptor.Methods().ByName("GetProductByID")
	productServiceGetProductCategoryByIDMethodDescriptor     = productServiceServiceDescriptor.Methods().ByName("GetProductCategoryByID")
	productServiceGetProductCommentByIDMethodDescriptor      = productServiceServiceDescriptor.Methods().ByName("GetProductCommentByID")
	productServiceGetProductReviewByIDMethodDescriptor       = productServiceServiceDescriptor.Methods().ByName("GetProductReviewByID")
	productServiceGetProductWithCategoryPathMethodDescriptor = productServiceServiceDescriptor.Methods().ByName("GetProductWithCategoryPath")
	productServiceListCategoriesByParentIDMethodDescriptor   = productServiceServiceDescriptor.Methods().ByName("ListCategoriesByParentID")
	productServiceListProductReviewsMethodDescriptor         = productServiceServiceDescriptor.Methods().ByName("ListProductReviews")
	productServiceListProductsMethodDescriptor               = productServiceServiceDescriptor.Methods().ByName("ListProducts")
	productServiceListReviewsWithCommentsMethodDescriptor    = productServiceServiceDescriptor.Methods().ByName("ListReviewsWithComments")
	productServiceListRootCategoriesMethodDescriptor         = productServiceServiceDescriptor.Methods().ByName("ListRootCategories")
	productServiceUpdateProductMethodDescriptor              = productServiceServiceDescriptor.Methods().ByName("UpdateProduct")
	productServiceUpdateProductCategoryMethodDescriptor      = productServiceServiceDescriptor.Methods().ByName("UpdateProductCategory")
	productServiceUpdateProductCommentMethodDescriptor       = productServiceServiceDescriptor.Methods().ByName("UpdateProductComment")
	productServiceUpdateProductReviewMethodDescriptor        = productServiceServiceDescriptor.Methods().ByName("UpdateProductReview")
)

// ProductServiceClient is a client for the product.v1.ProductService service.
type ProductServiceClient interface {
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	CreateProductCategory(context.Context, *connect.Request[v1.CreateProductCategoryRequest]) (*connect.Response[v1.CreateProductCategoryResponse], error)
	CreateProductComment(context.Context, *connect.Request[v1.CreateProductCommentRequest]) (*connect.Response[v1.CreateProductCommentResponse], error)
	CreateProductReview(context.Context, *connect.Request[v1.CreateProductReviewRequest]) (*connect.Response[v1.CreateProductReviewResponse], error)
	DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error)
	DeleteProductCategory(context.Context, *connect.Request[v1.DeleteProductCategoryRequest]) (*connect.Response[v1.DeleteProductCategoryResponse], error)
	DeleteProductComment(context.Context, *connect.Request[v1.DeleteProductCommentRequest]) (*connect.Response[v1.DeleteProductCommentResponse], error)
	DeleteProductReview(context.Context, *connect.Request[v1.DeleteProductReviewRequest]) (*connect.Response[v1.DeleteProductReviewResponse], error)
	GetCategoryPath(context.Context, *connect.Request[v1.GetCategoryPathRequest]) (*connect.Response[v1.GetCategoryPathResponse], error)
	GetProductByID(context.Context, *connect.Request[v1.GetProductByIDRequest]) (*connect.Response[v1.GetProductByIDResponse], error)
	GetProductCategoryByID(context.Context, *connect.Request[v1.GetProductCategoryByIDRequest]) (*connect.Response[v1.GetProductCategoryByIDResponse], error)
	GetProductCommentByID(context.Context, *connect.Request[v1.GetProductCommentByIDRequest]) (*connect.Response[v1.GetProductCommentByIDResponse], error)
	GetProductReviewByID(context.Context, *connect.Request[v1.GetProductReviewByIDRequest]) (*connect.Response[v1.GetProductReviewByIDResponse], error)
	GetProductWithCategoryPath(context.Context, *connect.Request[v1.GetProductWithCategoryPathRequest]) (*connect.Response[v1.GetProductWithCategoryPathResponse], error)
	ListCategoriesByParentID(context.Context, *connect.Request[v1.ListCategoriesByParentIDRequest]) (*connect.Response[v1.ListCategoriesByParentIDResponse], error)
	ListProductReviews(context.Context, *connect.Request[v1.ListProductReviewsRequest]) (*connect.Response[v1.ListProductReviewsResponse], error)
	ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error)
	ListReviewsWithComments(context.Context, *connect.Request[v1.ListReviewsWithCommentsRequest]) (*connect.Response[v1.ListReviewsWithCommentsResponse], error)
	ListRootCategories(context.Context, *connect.Request[v1.ListRootCategoriesRequest]) (*connect.Response[v1.ListRootCategoriesResponse], error)
	UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error)
	UpdateProductCategory(context.Context, *connect.Request[v1.UpdateProductCategoryRequest]) (*connect.Response[v1.UpdateProductCategoryResponse], error)
	UpdateProductComment(context.Context, *connect.Request[v1.UpdateProductCommentRequest]) (*connect.Response[v1.UpdateProductCommentResponse], error)
	UpdateProductReview(context.Context, *connect.Request[v1.UpdateProductReviewRequest]) (*connect.Response[v1.UpdateProductReviewResponse], error)
}

// NewProductServiceClient constructs a client for the product.v1.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productServiceClient{
		createProduct: connect.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+ProductServiceCreateProductProcedure,
			connect.WithSchema(productServiceCreateProductMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProductCategory: connect.NewClient[v1.CreateProductCategoryRequest, v1.CreateProductCategoryResponse](
			httpClient,
			baseURL+ProductServiceCreateProductCategoryProcedure,
			connect.WithSchema(productServiceCreateProductCategoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProductComment: connect.NewClient[v1.CreateProductCommentRequest, v1.CreateProductCommentResponse](
			httpClient,
			baseURL+ProductServiceCreateProductCommentProcedure,
			connect.WithSchema(productServiceCreateProductCommentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createProductReview: connect.NewClient[v1.CreateProductReviewRequest, v1.CreateProductReviewResponse](
			httpClient,
			baseURL+ProductServiceCreateProductReviewProcedure,
			connect.WithSchema(productServiceCreateProductReviewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProduct: connect.NewClient[v1.DeleteProductRequest, v1.DeleteProductResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductProcedure,
			connect.WithSchema(productServiceDeleteProductMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProductCategory: connect.NewClient[v1.DeleteProductCategoryRequest, v1.DeleteProductCategoryResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductCategoryProcedure,
			connect.WithSchema(productServiceDeleteProductCategoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProductComment: connect.NewClient[v1.DeleteProductCommentRequest, v1.DeleteProductCommentResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductCommentProcedure,
			connect.WithSchema(productServiceDeleteProductCommentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteProductReview: connect.NewClient[v1.DeleteProductReviewRequest, v1.DeleteProductReviewResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductReviewProcedure,
			connect.WithSchema(productServiceDeleteProductReviewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCategoryPath: connect.NewClient[v1.GetCategoryPathRequest, v1.GetCategoryPathResponse](
			httpClient,
			baseURL+ProductServiceGetCategoryPathProcedure,
			connect.WithSchema(productServiceGetCategoryPathMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductByID: connect.NewClient[v1.GetProductByIDRequest, v1.GetProductByIDResponse](
			httpClient,
			baseURL+ProductServiceGetProductByIDProcedure,
			connect.WithSchema(productServiceGetProductByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductCategoryByID: connect.NewClient[v1.GetProductCategoryByIDRequest, v1.GetProductCategoryByIDResponse](
			httpClient,
			baseURL+ProductServiceGetProductCategoryByIDProcedure,
			connect.WithSchema(productServiceGetProductCategoryByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductCommentByID: connect.NewClient[v1.GetProductCommentByIDRequest, v1.GetProductCommentByIDResponse](
			httpClient,
			baseURL+ProductServiceGetProductCommentByIDProcedure,
			connect.WithSchema(productServiceGetProductCommentByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductReviewByID: connect.NewClient[v1.GetProductReviewByIDRequest, v1.GetProductReviewByIDResponse](
			httpClient,
			baseURL+ProductServiceGetProductReviewByIDProcedure,
			connect.WithSchema(productServiceGetProductReviewByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductWithCategoryPath: connect.NewClient[v1.GetProductWithCategoryPathRequest, v1.GetProductWithCategoryPathResponse](
			httpClient,
			baseURL+ProductServiceGetProductWithCategoryPathProcedure,
			connect.WithSchema(productServiceGetProductWithCategoryPathMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCategoriesByParentID: connect.NewClient[v1.ListCategoriesByParentIDRequest, v1.ListCategoriesByParentIDResponse](
			httpClient,
			baseURL+ProductServiceListCategoriesByParentIDProcedure,
			connect.WithSchema(productServiceListCategoriesByParentIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProductReviews: connect.NewClient[v1.ListProductReviewsRequest, v1.ListProductReviewsResponse](
			httpClient,
			baseURL+ProductServiceListProductReviewsProcedure,
			connect.WithSchema(productServiceListProductReviewsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProducts: connect.NewClient[v1.ListProductsRequest, v1.ListProductsResponse](
			httpClient,
			baseURL+ProductServiceListProductsProcedure,
			connect.WithSchema(productServiceListProductsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listReviewsWithComments: connect.NewClient[v1.ListReviewsWithCommentsRequest, v1.ListReviewsWithCommentsResponse](
			httpClient,
			baseURL+ProductServiceListReviewsWithCommentsProcedure,
			connect.WithSchema(productServiceListReviewsWithCommentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRootCategories: connect.NewClient[v1.ListRootCategoriesRequest, v1.ListRootCategoriesResponse](
			httpClient,
			baseURL+ProductServiceListRootCategoriesProcedure,
			connect.WithSchema(productServiceListRootCategoriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProduct: connect.NewClient[v1.UpdateProductRequest, v1.UpdateProductResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductProcedure,
			connect.WithSchema(productServiceUpdateProductMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProductCategory: connect.NewClient[v1.UpdateProductCategoryRequest, v1.UpdateProductCategoryResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductCategoryProcedure,
			connect.WithSchema(productServiceUpdateProductCategoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProductComment: connect.NewClient[v1.UpdateProductCommentRequest, v1.UpdateProductCommentResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductCommentProcedure,
			connect.WithSchema(productServiceUpdateProductCommentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProductReview: connect.NewClient[v1.UpdateProductReviewRequest, v1.UpdateProductReviewResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductReviewProcedure,
			connect.WithSchema(productServiceUpdateProductReviewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	createProduct              *connect.Client[v1.CreateProductRequest, v1.CreateProductResponse]
	createProductCategory      *connect.Client[v1.CreateProductCategoryRequest, v1.CreateProductCategoryResponse]
	createProductComment       *connect.Client[v1.CreateProductCommentRequest, v1.CreateProductCommentResponse]
	createProductReview        *connect.Client[v1.CreateProductReviewRequest, v1.CreateProductReviewResponse]
	deleteProduct              *connect.Client[v1.DeleteProductRequest, v1.DeleteProductResponse]
	deleteProductCategory      *connect.Client[v1.DeleteProductCategoryRequest, v1.DeleteProductCategoryResponse]
	deleteProductComment       *connect.Client[v1.DeleteProductCommentRequest, v1.DeleteProductCommentResponse]
	deleteProductReview        *connect.Client[v1.DeleteProductReviewRequest, v1.DeleteProductReviewResponse]
	getCategoryPath            *connect.Client[v1.GetCategoryPathRequest, v1.GetCategoryPathResponse]
	getProductByID             *connect.Client[v1.GetProductByIDRequest, v1.GetProductByIDResponse]
	getProductCategoryByID     *connect.Client[v1.GetProductCategoryByIDRequest, v1.GetProductCategoryByIDResponse]
	getProductCommentByID      *connect.Client[v1.GetProductCommentByIDRequest, v1.GetProductCommentByIDResponse]
	getProductReviewByID       *connect.Client[v1.GetProductReviewByIDRequest, v1.GetProductReviewByIDResponse]
	getProductWithCategoryPath *connect.Client[v1.GetProductWithCategoryPathRequest, v1.GetProductWithCategoryPathResponse]
	listCategoriesByParentID   *connect.Client[v1.ListCategoriesByParentIDRequest, v1.ListCategoriesByParentIDResponse]
	listProductReviews         *connect.Client[v1.ListProductReviewsRequest, v1.ListProductReviewsResponse]
	listProducts               *connect.Client[v1.ListProductsRequest, v1.ListProductsResponse]
	listReviewsWithComments    *connect.Client[v1.ListReviewsWithCommentsRequest, v1.ListReviewsWithCommentsResponse]
	listRootCategories         *connect.Client[v1.ListRootCategoriesRequest, v1.ListRootCategoriesResponse]
	updateProduct              *connect.Client[v1.UpdateProductRequest, v1.UpdateProductResponse]
	updateProductCategory      *connect.Client[v1.UpdateProductCategoryRequest, v1.UpdateProductCategoryResponse]
	updateProductComment       *connect.Client[v1.UpdateProductCommentRequest, v1.UpdateProductCommentResponse]
	updateProductReview        *connect.Client[v1.UpdateProductReviewRequest, v1.UpdateProductReviewResponse]
}

// CreateProduct calls product.v1.ProductService.CreateProduct.
func (c *productServiceClient) CreateProduct(ctx context.Context, req *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// CreateProductCategory calls product.v1.ProductService.CreateProductCategory.
func (c *productServiceClient) CreateProductCategory(ctx context.Context, req *connect.Request[v1.CreateProductCategoryRequest]) (*connect.Response[v1.CreateProductCategoryResponse], error) {
	return c.createProductCategory.CallUnary(ctx, req)
}

// CreateProductComment calls product.v1.ProductService.CreateProductComment.
func (c *productServiceClient) CreateProductComment(ctx context.Context, req *connect.Request[v1.CreateProductCommentRequest]) (*connect.Response[v1.CreateProductCommentResponse], error) {
	return c.createProductComment.CallUnary(ctx, req)
}

// CreateProductReview calls product.v1.ProductService.CreateProductReview.
func (c *productServiceClient) CreateProductReview(ctx context.Context, req *connect.Request[v1.CreateProductReviewRequest]) (*connect.Response[v1.CreateProductReviewResponse], error) {
	return c.createProductReview.CallUnary(ctx, req)
}

// DeleteProduct calls product.v1.ProductService.DeleteProduct.
func (c *productServiceClient) DeleteProduct(ctx context.Context, req *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error) {
	return c.deleteProduct.CallUnary(ctx, req)
}

// DeleteProductCategory calls product.v1.ProductService.DeleteProductCategory.
func (c *productServiceClient) DeleteProductCategory(ctx context.Context, req *connect.Request[v1.DeleteProductCategoryRequest]) (*connect.Response[v1.DeleteProductCategoryResponse], error) {
	return c.deleteProductCategory.CallUnary(ctx, req)
}

// DeleteProductComment calls product.v1.ProductService.DeleteProductComment.
func (c *productServiceClient) DeleteProductComment(ctx context.Context, req *connect.Request[v1.DeleteProductCommentRequest]) (*connect.Response[v1.DeleteProductCommentResponse], error) {
	return c.deleteProductComment.CallUnary(ctx, req)
}

// DeleteProductReview calls product.v1.ProductService.DeleteProductReview.
func (c *productServiceClient) DeleteProductReview(ctx context.Context, req *connect.Request[v1.DeleteProductReviewRequest]) (*connect.Response[v1.DeleteProductReviewResponse], error) {
	return c.deleteProductReview.CallUnary(ctx, req)
}

// GetCategoryPath calls product.v1.ProductService.GetCategoryPath.
func (c *productServiceClient) GetCategoryPath(ctx context.Context, req *connect.Request[v1.GetCategoryPathRequest]) (*connect.Response[v1.GetCategoryPathResponse], error) {
	return c.getCategoryPath.CallUnary(ctx, req)
}

// GetProductByID calls product.v1.ProductService.GetProductByID.
func (c *productServiceClient) GetProductByID(ctx context.Context, req *connect.Request[v1.GetProductByIDRequest]) (*connect.Response[v1.GetProductByIDResponse], error) {
	return c.getProductByID.CallUnary(ctx, req)
}

// GetProductCategoryByID calls product.v1.ProductService.GetProductCategoryByID.
func (c *productServiceClient) GetProductCategoryByID(ctx context.Context, req *connect.Request[v1.GetProductCategoryByIDRequest]) (*connect.Response[v1.GetProductCategoryByIDResponse], error) {
	return c.getProductCategoryByID.CallUnary(ctx, req)
}

// GetProductCommentByID calls product.v1.ProductService.GetProductCommentByID.
func (c *productServiceClient) GetProductCommentByID(ctx context.Context, req *connect.Request[v1.GetProductCommentByIDRequest]) (*connect.Response[v1.GetProductCommentByIDResponse], error) {
	return c.getProductCommentByID.CallUnary(ctx, req)
}

// GetProductReviewByID calls product.v1.ProductService.GetProductReviewByID.
func (c *productServiceClient) GetProductReviewByID(ctx context.Context, req *connect.Request[v1.GetProductReviewByIDRequest]) (*connect.Response[v1.GetProductReviewByIDResponse], error) {
	return c.getProductReviewByID.CallUnary(ctx, req)
}

// GetProductWithCategoryPath calls product.v1.ProductService.GetProductWithCategoryPath.
func (c *productServiceClient) GetProductWithCategoryPath(ctx context.Context, req *connect.Request[v1.GetProductWithCategoryPathRequest]) (*connect.Response[v1.GetProductWithCategoryPathResponse], error) {
	return c.getProductWithCategoryPath.CallUnary(ctx, req)
}

// ListCategoriesByParentID calls product.v1.ProductService.ListCategoriesByParentID.
func (c *productServiceClient) ListCategoriesByParentID(ctx context.Context, req *connect.Request[v1.ListCategoriesByParentIDRequest]) (*connect.Response[v1.ListCategoriesByParentIDResponse], error) {
	return c.listCategoriesByParentID.CallUnary(ctx, req)
}

// ListProductReviews calls product.v1.ProductService.ListProductReviews.
func (c *productServiceClient) ListProductReviews(ctx context.Context, req *connect.Request[v1.ListProductReviewsRequest]) (*connect.Response[v1.ListProductReviewsResponse], error) {
	return c.listProductReviews.CallUnary(ctx, req)
}

// ListProducts calls product.v1.ProductService.ListProducts.
func (c *productServiceClient) ListProducts(ctx context.Context, req *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error) {
	return c.listProducts.CallUnary(ctx, req)
}

// ListReviewsWithComments calls product.v1.ProductService.ListReviewsWithComments.
func (c *productServiceClient) ListReviewsWithComments(ctx context.Context, req *connect.Request[v1.ListReviewsWithCommentsRequest]) (*connect.Response[v1.ListReviewsWithCommentsResponse], error) {
	return c.listReviewsWithComments.CallUnary(ctx, req)
}

// ListRootCategories calls product.v1.ProductService.ListRootCategories.
func (c *productServiceClient) ListRootCategories(ctx context.Context, req *connect.Request[v1.ListRootCategoriesRequest]) (*connect.Response[v1.ListRootCategoriesResponse], error) {
	return c.listRootCategories.CallUnary(ctx, req)
}

// UpdateProduct calls product.v1.ProductService.UpdateProduct.
func (c *productServiceClient) UpdateProduct(ctx context.Context, req *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// UpdateProductCategory calls product.v1.ProductService.UpdateProductCategory.
func (c *productServiceClient) UpdateProductCategory(ctx context.Context, req *connect.Request[v1.UpdateProductCategoryRequest]) (*connect.Response[v1.UpdateProductCategoryResponse], error) {
	return c.updateProductCategory.CallUnary(ctx, req)
}

// UpdateProductComment calls product.v1.ProductService.UpdateProductComment.
func (c *productServiceClient) UpdateProductComment(ctx context.Context, req *connect.Request[v1.UpdateProductCommentRequest]) (*connect.Response[v1.UpdateProductCommentResponse], error) {
	return c.updateProductComment.CallUnary(ctx, req)
}

// UpdateProductReview calls product.v1.ProductService.UpdateProductReview.
func (c *productServiceClient) UpdateProductReview(ctx context.Context, req *connect.Request[v1.UpdateProductReviewRequest]) (*connect.Response[v1.UpdateProductReviewResponse], error) {
	return c.updateProductReview.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the product.v1.ProductService service.
type ProductServiceHandler interface {
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	CreateProductCategory(context.Context, *connect.Request[v1.CreateProductCategoryRequest]) (*connect.Response[v1.CreateProductCategoryResponse], error)
	CreateProductComment(context.Context, *connect.Request[v1.CreateProductCommentRequest]) (*connect.Response[v1.CreateProductCommentResponse], error)
	CreateProductReview(context.Context, *connect.Request[v1.CreateProductReviewRequest]) (*connect.Response[v1.CreateProductReviewResponse], error)
	DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error)
	DeleteProductCategory(context.Context, *connect.Request[v1.DeleteProductCategoryRequest]) (*connect.Response[v1.DeleteProductCategoryResponse], error)
	DeleteProductComment(context.Context, *connect.Request[v1.DeleteProductCommentRequest]) (*connect.Response[v1.DeleteProductCommentResponse], error)
	DeleteProductReview(context.Context, *connect.Request[v1.DeleteProductReviewRequest]) (*connect.Response[v1.DeleteProductReviewResponse], error)
	GetCategoryPath(context.Context, *connect.Request[v1.GetCategoryPathRequest]) (*connect.Response[v1.GetCategoryPathResponse], error)
	GetProductByID(context.Context, *connect.Request[v1.GetProductByIDRequest]) (*connect.Response[v1.GetProductByIDResponse], error)
	GetProductCategoryByID(context.Context, *connect.Request[v1.GetProductCategoryByIDRequest]) (*connect.Response[v1.GetProductCategoryByIDResponse], error)
	GetProductCommentByID(context.Context, *connect.Request[v1.GetProductCommentByIDRequest]) (*connect.Response[v1.GetProductCommentByIDResponse], error)
	GetProductReviewByID(context.Context, *connect.Request[v1.GetProductReviewByIDRequest]) (*connect.Response[v1.GetProductReviewByIDResponse], error)
	GetProductWithCategoryPath(context.Context, *connect.Request[v1.GetProductWithCategoryPathRequest]) (*connect.Response[v1.GetProductWithCategoryPathResponse], error)
	ListCategoriesByParentID(context.Context, *connect.Request[v1.ListCategoriesByParentIDRequest]) (*connect.Response[v1.ListCategoriesByParentIDResponse], error)
	ListProductReviews(context.Context, *connect.Request[v1.ListProductReviewsRequest]) (*connect.Response[v1.ListProductReviewsResponse], error)
	ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error)
	ListReviewsWithComments(context.Context, *connect.Request[v1.ListReviewsWithCommentsRequest]) (*connect.Response[v1.ListReviewsWithCommentsResponse], error)
	ListRootCategories(context.Context, *connect.Request[v1.ListRootCategoriesRequest]) (*connect.Response[v1.ListRootCategoriesResponse], error)
	UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error)
	UpdateProductCategory(context.Context, *connect.Request[v1.UpdateProductCategoryRequest]) (*connect.Response[v1.UpdateProductCategoryResponse], error)
	UpdateProductComment(context.Context, *connect.Request[v1.UpdateProductCommentRequest]) (*connect.Response[v1.UpdateProductCommentResponse], error)
	UpdateProductReview(context.Context, *connect.Request[v1.UpdateProductReviewRequest]) (*connect.Response[v1.UpdateProductReviewResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceCreateProductHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductProcedure,
		svc.CreateProduct,
		connect.WithSchema(productServiceCreateProductMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateProductCategoryHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductCategoryProcedure,
		svc.CreateProductCategory,
		connect.WithSchema(productServiceCreateProductCategoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateProductCommentHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductCommentProcedure,
		svc.CreateProductComment,
		connect.WithSchema(productServiceCreateProductCommentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateProductReviewHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductReviewProcedure,
		svc.CreateProductReview,
		connect.WithSchema(productServiceCreateProductReviewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductProcedure,
		svc.DeleteProduct,
		connect.WithSchema(productServiceDeleteProductMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductCategoryHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductCategoryProcedure,
		svc.DeleteProductCategory,
		connect.WithSchema(productServiceDeleteProductCategoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductCommentHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductCommentProcedure,
		svc.DeleteProductComment,
		connect.WithSchema(productServiceDeleteProductCommentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductReviewHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductReviewProcedure,
		svc.DeleteProductReview,
		connect.WithSchema(productServiceDeleteProductReviewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetCategoryPathHandler := connect.NewUnaryHandler(
		ProductServiceGetCategoryPathProcedure,
		svc.GetCategoryPath,
		connect.WithSchema(productServiceGetCategoryPathMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductByIDHandler := connect.NewUnaryHandler(
		ProductServiceGetProductByIDProcedure,
		svc.GetProductByID,
		connect.WithSchema(productServiceGetProductByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductCategoryByIDHandler := connect.NewUnaryHandler(
		ProductServiceGetProductCategoryByIDProcedure,
		svc.GetProductCategoryByID,
		connect.WithSchema(productServiceGetProductCategoryByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductCommentByIDHandler := connect.NewUnaryHandler(
		ProductServiceGetProductCommentByIDProcedure,
		svc.GetProductCommentByID,
		connect.WithSchema(productServiceGetProductCommentByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductReviewByIDHandler := connect.NewUnaryHandler(
		ProductServiceGetProductReviewByIDProcedure,
		svc.GetProductReviewByID,
		connect.WithSchema(productServiceGetProductReviewByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductWithCategoryPathHandler := connect.NewUnaryHandler(
		ProductServiceGetProductWithCategoryPathProcedure,
		svc.GetProductWithCategoryPath,
		connect.WithSchema(productServiceGetProductWithCategoryPathMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListCategoriesByParentIDHandler := connect.NewUnaryHandler(
		ProductServiceListCategoriesByParentIDProcedure,
		svc.ListCategoriesByParentID,
		connect.WithSchema(productServiceListCategoriesByParentIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListProductReviewsHandler := connect.NewUnaryHandler(
		ProductServiceListProductReviewsProcedure,
		svc.ListProductReviews,
		connect.WithSchema(productServiceListProductReviewsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListProductsHandler := connect.NewUnaryHandler(
		ProductServiceListProductsProcedure,
		svc.ListProducts,
		connect.WithSchema(productServiceListProductsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListReviewsWithCommentsHandler := connect.NewUnaryHandler(
		ProductServiceListReviewsWithCommentsProcedure,
		svc.ListReviewsWithComments,
		connect.WithSchema(productServiceListReviewsWithCommentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListRootCategoriesHandler := connect.NewUnaryHandler(
		ProductServiceListRootCategoriesProcedure,
		svc.ListRootCategories,
		connect.WithSchema(productServiceListRootCategoriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductProcedure,
		svc.UpdateProduct,
		connect.WithSchema(productServiceUpdateProductMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductCategoryHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductCategoryProcedure,
		svc.UpdateProductCategory,
		connect.WithSchema(productServiceUpdateProductCategoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductCommentHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductCommentProcedure,
		svc.UpdateProductComment,
		connect.WithSchema(productServiceUpdateProductCommentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductReviewHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductReviewProcedure,
		svc.UpdateProductReview,
		connect.WithSchema(productServiceUpdateProductReviewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/product.v1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceCreateProductProcedure:
			productServiceCreateProductHandler.ServeHTTP(w, r)
		case ProductServiceCreateProductCategoryProcedure:
			productServiceCreateProductCategoryHandler.ServeHTTP(w, r)
		case ProductServiceCreateProductCommentProcedure:
			productServiceCreateProductCommentHandler.ServeHTTP(w, r)
		case ProductServiceCreateProductReviewProcedure:
			productServiceCreateProductReviewHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductProcedure:
			productServiceDeleteProductHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductCategoryProcedure:
			productServiceDeleteProductCategoryHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductCommentProcedure:
			productServiceDeleteProductCommentHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductReviewProcedure:
			productServiceDeleteProductReviewHandler.ServeHTTP(w, r)
		case ProductServiceGetCategoryPathProcedure:
			productServiceGetCategoryPathHandler.ServeHTTP(w, r)
		case ProductServiceGetProductByIDProcedure:
			productServiceGetProductByIDHandler.ServeHTTP(w, r)
		case ProductServiceGetProductCategoryByIDProcedure:
			productServiceGetProductCategoryByIDHandler.ServeHTTP(w, r)
		case ProductServiceGetProductCommentByIDProcedure:
			productServiceGetProductCommentByIDHandler.ServeHTTP(w, r)
		case ProductServiceGetProductReviewByIDProcedure:
			productServiceGetProductReviewByIDHandler.ServeHTTP(w, r)
		case ProductServiceGetProductWithCategoryPathProcedure:
			productServiceGetProductWithCategoryPathHandler.ServeHTTP(w, r)
		case ProductServiceListCategoriesByParentIDProcedure:
			productServiceListCategoriesByParentIDHandler.ServeHTTP(w, r)
		case ProductServiceListProductReviewsProcedure:
			productServiceListProductReviewsHandler.ServeHTTP(w, r)
		case ProductServiceListProductsProcedure:
			productServiceListProductsHandler.ServeHTTP(w, r)
		case ProductServiceListReviewsWithCommentsProcedure:
			productServiceListReviewsWithCommentsHandler.ServeHTTP(w, r)
		case ProductServiceListRootCategoriesProcedure:
			productServiceListRootCategoriesHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductProcedure:
			productServiceUpdateProductHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductCategoryProcedure:
			productServiceUpdateProductCategoryHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductCommentProcedure:
			productServiceUpdateProductCommentHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductReviewProcedure:
			productServiceUpdateProductReviewHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateProductCategory(context.Context, *connect.Request[v1.CreateProductCategoryRequest]) (*connect.Response[v1.CreateProductCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProductCategory is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateProductComment(context.Context, *connect.Request[v1.CreateProductCommentRequest]) (*connect.Response[v1.CreateProductCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProductComment is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateProductReview(context.Context, *connect.Request[v1.CreateProductReviewRequest]) (*connect.Response[v1.CreateProductReviewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProductReview is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProductCategory(context.Context, *connect.Request[v1.DeleteProductCategoryRequest]) (*connect.Response[v1.DeleteProductCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteProductCategory is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProductComment(context.Context, *connect.Request[v1.DeleteProductCommentRequest]) (*connect.Response[v1.DeleteProductCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteProductComment is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProductReview(context.Context, *connect.Request[v1.DeleteProductReviewRequest]) (*connect.Response[v1.DeleteProductReviewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteProductReview is not implemented"))
}

func (UnimplementedProductServiceHandler) GetCategoryPath(context.Context, *connect.Request[v1.GetCategoryPathRequest]) (*connect.Response[v1.GetCategoryPathResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetCategoryPath is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductByID(context.Context, *connect.Request[v1.GetProductByIDRequest]) (*connect.Response[v1.GetProductByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProductByID is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductCategoryByID(context.Context, *connect.Request[v1.GetProductCategoryByIDRequest]) (*connect.Response[v1.GetProductCategoryByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProductCategoryByID is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductCommentByID(context.Context, *connect.Request[v1.GetProductCommentByIDRequest]) (*connect.Response[v1.GetProductCommentByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProductCommentByID is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductReviewByID(context.Context, *connect.Request[v1.GetProductReviewByIDRequest]) (*connect.Response[v1.GetProductReviewByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProductReviewByID is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductWithCategoryPath(context.Context, *connect.Request[v1.GetProductWithCategoryPathRequest]) (*connect.Response[v1.GetProductWithCategoryPathResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProductWithCategoryPath is not implemented"))
}

func (UnimplementedProductServiceHandler) ListCategoriesByParentID(context.Context, *connect.Request[v1.ListCategoriesByParentIDRequest]) (*connect.Response[v1.ListCategoriesByParentIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListCategoriesByParentID is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProductReviews(context.Context, *connect.Request[v1.ListProductReviewsRequest]) (*connect.Response[v1.ListProductReviewsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListProductReviews is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) ListReviewsWithComments(context.Context, *connect.Request[v1.ListReviewsWithCommentsRequest]) (*connect.Response[v1.ListReviewsWithCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListReviewsWithComments is not implemented"))
}

func (UnimplementedProductServiceHandler) ListRootCategories(context.Context, *connect.Request[v1.ListRootCategoriesRequest]) (*connect.Response[v1.ListRootCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListRootCategories is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProductCategory(context.Context, *connect.Request[v1.UpdateProductCategoryRequest]) (*connect.Response[v1.UpdateProductCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProductCategory is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProductComment(context.Context, *connect.Request[v1.UpdateProductCommentRequest]) (*connect.Response[v1.UpdateProductCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProductComment is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProductReview(context.Context, *connect.Request[v1.UpdateProductReviewRequest]) (*connect.Response[v1.UpdateProductReviewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProductReview is not implemented"))
}
