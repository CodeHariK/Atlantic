// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: orders/v1/orders.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codeharik/Atlantic/database/api/orders/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrdersServiceName is the fully-qualified name of the OrdersService service.
	OrdersServiceName = "orders.v1.OrdersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrdersServiceCreateOrderProcedure is the fully-qualified name of the OrdersService's CreateOrder
	// RPC.
	OrdersServiceCreateOrderProcedure = "/orders.v1.OrdersService/CreateOrder"
	// OrdersServiceCreateOrderItemProcedure is the fully-qualified name of the OrdersService's
	// CreateOrderItem RPC.
	OrdersServiceCreateOrderItemProcedure = "/orders.v1.OrdersService/CreateOrderItem"
	// OrdersServiceCreateOrderWithItemsProcedure is the fully-qualified name of the OrdersService's
	// CreateOrderWithItems RPC.
	OrdersServiceCreateOrderWithItemsProcedure = "/orders.v1.OrdersService/CreateOrderWithItems"
	// OrdersServiceDeleteOrderByIDProcedure is the fully-qualified name of the OrdersService's
	// DeleteOrderByID RPC.
	OrdersServiceDeleteOrderByIDProcedure = "/orders.v1.OrdersService/DeleteOrderByID"
	// OrdersServiceDeleteOrderItemByIDProcedure is the fully-qualified name of the OrdersService's
	// DeleteOrderItemByID RPC.
	OrdersServiceDeleteOrderItemByIDProcedure = "/orders.v1.OrdersService/DeleteOrderItemByID"
	// OrdersServiceGetOrderByIDProcedure is the fully-qualified name of the OrdersService's
	// GetOrderByID RPC.
	OrdersServiceGetOrderByIDProcedure = "/orders.v1.OrdersService/GetOrderByID"
	// OrdersServiceGetOrderItemByIDProcedure is the fully-qualified name of the OrdersService's
	// GetOrderItemByID RPC.
	OrdersServiceGetOrderItemByIDProcedure = "/orders.v1.OrdersService/GetOrderItemByID"
	// OrdersServiceGetOrderItemsByOrderIDProcedure is the fully-qualified name of the OrdersService's
	// GetOrderItemsByOrderID RPC.
	OrdersServiceGetOrderItemsByOrderIDProcedure = "/orders.v1.OrdersService/GetOrderItemsByOrderID"
	// OrdersServiceGetOrdersByUserIDProcedure is the fully-qualified name of the OrdersService's
	// GetOrdersByUserID RPC.
	OrdersServiceGetOrdersByUserIDProcedure = "/orders.v1.OrdersService/GetOrdersByUserID"
	// OrdersServiceUpdateOrderPaymentStatusProcedure is the fully-qualified name of the OrdersService's
	// UpdateOrderPaymentStatus RPC.
	OrdersServiceUpdateOrderPaymentStatusProcedure = "/orders.v1.OrdersService/UpdateOrderPaymentStatus"
	// OrdersServiceUpdateOrderStatusProcedure is the fully-qualified name of the OrdersService's
	// UpdateOrderStatus RPC.
	OrdersServiceUpdateOrderStatusProcedure = "/orders.v1.OrdersService/UpdateOrderStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ordersServiceServiceDescriptor                        = v1.File_orders_v1_orders_proto.Services().ByName("OrdersService")
	ordersServiceCreateOrderMethodDescriptor              = ordersServiceServiceDescriptor.Methods().ByName("CreateOrder")
	ordersServiceCreateOrderItemMethodDescriptor          = ordersServiceServiceDescriptor.Methods().ByName("CreateOrderItem")
	ordersServiceCreateOrderWithItemsMethodDescriptor     = ordersServiceServiceDescriptor.Methods().ByName("CreateOrderWithItems")
	ordersServiceDeleteOrderByIDMethodDescriptor          = ordersServiceServiceDescriptor.Methods().ByName("DeleteOrderByID")
	ordersServiceDeleteOrderItemByIDMethodDescriptor      = ordersServiceServiceDescriptor.Methods().ByName("DeleteOrderItemByID")
	ordersServiceGetOrderByIDMethodDescriptor             = ordersServiceServiceDescriptor.Methods().ByName("GetOrderByID")
	ordersServiceGetOrderItemByIDMethodDescriptor         = ordersServiceServiceDescriptor.Methods().ByName("GetOrderItemByID")
	ordersServiceGetOrderItemsByOrderIDMethodDescriptor   = ordersServiceServiceDescriptor.Methods().ByName("GetOrderItemsByOrderID")
	ordersServiceGetOrdersByUserIDMethodDescriptor        = ordersServiceServiceDescriptor.Methods().ByName("GetOrdersByUserID")
	ordersServiceUpdateOrderPaymentStatusMethodDescriptor = ordersServiceServiceDescriptor.Methods().ByName("UpdateOrderPaymentStatus")
	ordersServiceUpdateOrderStatusMethodDescriptor        = ordersServiceServiceDescriptor.Methods().ByName("UpdateOrderStatus")
)

// OrdersServiceClient is a client for the orders.v1.OrdersService service.
type OrdersServiceClient interface {
	CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error)
	CreateOrderItem(context.Context, *connect.Request[v1.CreateOrderItemRequest]) (*connect.Response[v1.CreateOrderItemResponse], error)
	CreateOrderWithItems(context.Context, *connect.Request[v1.CreateOrderWithItemsRequest]) (*connect.Response[v1.CreateOrderWithItemsResponse], error)
	DeleteOrderByID(context.Context, *connect.Request[v1.DeleteOrderByIDRequest]) (*connect.Response[v1.DeleteOrderByIDResponse], error)
	DeleteOrderItemByID(context.Context, *connect.Request[v1.DeleteOrderItemByIDRequest]) (*connect.Response[v1.DeleteOrderItemByIDResponse], error)
	GetOrderByID(context.Context, *connect.Request[v1.GetOrderByIDRequest]) (*connect.Response[v1.GetOrderByIDResponse], error)
	GetOrderItemByID(context.Context, *connect.Request[v1.GetOrderItemByIDRequest]) (*connect.Response[v1.GetOrderItemByIDResponse], error)
	GetOrderItemsByOrderID(context.Context, *connect.Request[v1.GetOrderItemsByOrderIDRequest]) (*connect.Response[v1.GetOrderItemsByOrderIDResponse], error)
	GetOrdersByUserID(context.Context, *connect.Request[v1.GetOrdersByUserIDRequest]) (*connect.Response[v1.GetOrdersByUserIDResponse], error)
	UpdateOrderPaymentStatus(context.Context, *connect.Request[v1.UpdateOrderPaymentStatusRequest]) (*connect.Response[v1.UpdateOrderPaymentStatusResponse], error)
	UpdateOrderStatus(context.Context, *connect.Request[v1.UpdateOrderStatusRequest]) (*connect.Response[v1.UpdateOrderStatusResponse], error)
}

// NewOrdersServiceClient constructs a client for the orders.v1.OrdersService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrdersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrdersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ordersServiceClient{
		createOrder: connect.NewClient[v1.CreateOrderRequest, v1.CreateOrderResponse](
			httpClient,
			baseURL+OrdersServiceCreateOrderProcedure,
			connect.WithSchema(ordersServiceCreateOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrderItem: connect.NewClient[v1.CreateOrderItemRequest, v1.CreateOrderItemResponse](
			httpClient,
			baseURL+OrdersServiceCreateOrderItemProcedure,
			connect.WithSchema(ordersServiceCreateOrderItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrderWithItems: connect.NewClient[v1.CreateOrderWithItemsRequest, v1.CreateOrderWithItemsResponse](
			httpClient,
			baseURL+OrdersServiceCreateOrderWithItemsProcedure,
			connect.WithSchema(ordersServiceCreateOrderWithItemsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOrderByID: connect.NewClient[v1.DeleteOrderByIDRequest, v1.DeleteOrderByIDResponse](
			httpClient,
			baseURL+OrdersServiceDeleteOrderByIDProcedure,
			connect.WithSchema(ordersServiceDeleteOrderByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteOrderItemByID: connect.NewClient[v1.DeleteOrderItemByIDRequest, v1.DeleteOrderItemByIDResponse](
			httpClient,
			baseURL+OrdersServiceDeleteOrderItemByIDProcedure,
			connect.WithSchema(ordersServiceDeleteOrderItemByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrderByID: connect.NewClient[v1.GetOrderByIDRequest, v1.GetOrderByIDResponse](
			httpClient,
			baseURL+OrdersServiceGetOrderByIDProcedure,
			connect.WithSchema(ordersServiceGetOrderByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrderItemByID: connect.NewClient[v1.GetOrderItemByIDRequest, v1.GetOrderItemByIDResponse](
			httpClient,
			baseURL+OrdersServiceGetOrderItemByIDProcedure,
			connect.WithSchema(ordersServiceGetOrderItemByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrderItemsByOrderID: connect.NewClient[v1.GetOrderItemsByOrderIDRequest, v1.GetOrderItemsByOrderIDResponse](
			httpClient,
			baseURL+OrdersServiceGetOrderItemsByOrderIDProcedure,
			connect.WithSchema(ordersServiceGetOrderItemsByOrderIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOrdersByUserID: connect.NewClient[v1.GetOrdersByUserIDRequest, v1.GetOrdersByUserIDResponse](
			httpClient,
			baseURL+OrdersServiceGetOrdersByUserIDProcedure,
			connect.WithSchema(ordersServiceGetOrdersByUserIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrderPaymentStatus: connect.NewClient[v1.UpdateOrderPaymentStatusRequest, v1.UpdateOrderPaymentStatusResponse](
			httpClient,
			baseURL+OrdersServiceUpdateOrderPaymentStatusProcedure,
			connect.WithSchema(ordersServiceUpdateOrderPaymentStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateOrderStatus: connect.NewClient[v1.UpdateOrderStatusRequest, v1.UpdateOrderStatusResponse](
			httpClient,
			baseURL+OrdersServiceUpdateOrderStatusProcedure,
			connect.WithSchema(ordersServiceUpdateOrderStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ordersServiceClient implements OrdersServiceClient.
type ordersServiceClient struct {
	createOrder              *connect.Client[v1.CreateOrderRequest, v1.CreateOrderResponse]
	createOrderItem          *connect.Client[v1.CreateOrderItemRequest, v1.CreateOrderItemResponse]
	createOrderWithItems     *connect.Client[v1.CreateOrderWithItemsRequest, v1.CreateOrderWithItemsResponse]
	deleteOrderByID          *connect.Client[v1.DeleteOrderByIDRequest, v1.DeleteOrderByIDResponse]
	deleteOrderItemByID      *connect.Client[v1.DeleteOrderItemByIDRequest, v1.DeleteOrderItemByIDResponse]
	getOrderByID             *connect.Client[v1.GetOrderByIDRequest, v1.GetOrderByIDResponse]
	getOrderItemByID         *connect.Client[v1.GetOrderItemByIDRequest, v1.GetOrderItemByIDResponse]
	getOrderItemsByOrderID   *connect.Client[v1.GetOrderItemsByOrderIDRequest, v1.GetOrderItemsByOrderIDResponse]
	getOrdersByUserID        *connect.Client[v1.GetOrdersByUserIDRequest, v1.GetOrdersByUserIDResponse]
	updateOrderPaymentStatus *connect.Client[v1.UpdateOrderPaymentStatusRequest, v1.UpdateOrderPaymentStatusResponse]
	updateOrderStatus        *connect.Client[v1.UpdateOrderStatusRequest, v1.UpdateOrderStatusResponse]
}

// CreateOrder calls orders.v1.OrdersService.CreateOrder.
func (c *ordersServiceClient) CreateOrder(ctx context.Context, req *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error) {
	return c.createOrder.CallUnary(ctx, req)
}

// CreateOrderItem calls orders.v1.OrdersService.CreateOrderItem.
func (c *ordersServiceClient) CreateOrderItem(ctx context.Context, req *connect.Request[v1.CreateOrderItemRequest]) (*connect.Response[v1.CreateOrderItemResponse], error) {
	return c.createOrderItem.CallUnary(ctx, req)
}

// CreateOrderWithItems calls orders.v1.OrdersService.CreateOrderWithItems.
func (c *ordersServiceClient) CreateOrderWithItems(ctx context.Context, req *connect.Request[v1.CreateOrderWithItemsRequest]) (*connect.Response[v1.CreateOrderWithItemsResponse], error) {
	return c.createOrderWithItems.CallUnary(ctx, req)
}

// DeleteOrderByID calls orders.v1.OrdersService.DeleteOrderByID.
func (c *ordersServiceClient) DeleteOrderByID(ctx context.Context, req *connect.Request[v1.DeleteOrderByIDRequest]) (*connect.Response[v1.DeleteOrderByIDResponse], error) {
	return c.deleteOrderByID.CallUnary(ctx, req)
}

// DeleteOrderItemByID calls orders.v1.OrdersService.DeleteOrderItemByID.
func (c *ordersServiceClient) DeleteOrderItemByID(ctx context.Context, req *connect.Request[v1.DeleteOrderItemByIDRequest]) (*connect.Response[v1.DeleteOrderItemByIDResponse], error) {
	return c.deleteOrderItemByID.CallUnary(ctx, req)
}

// GetOrderByID calls orders.v1.OrdersService.GetOrderByID.
func (c *ordersServiceClient) GetOrderByID(ctx context.Context, req *connect.Request[v1.GetOrderByIDRequest]) (*connect.Response[v1.GetOrderByIDResponse], error) {
	return c.getOrderByID.CallUnary(ctx, req)
}

// GetOrderItemByID calls orders.v1.OrdersService.GetOrderItemByID.
func (c *ordersServiceClient) GetOrderItemByID(ctx context.Context, req *connect.Request[v1.GetOrderItemByIDRequest]) (*connect.Response[v1.GetOrderItemByIDResponse], error) {
	return c.getOrderItemByID.CallUnary(ctx, req)
}

// GetOrderItemsByOrderID calls orders.v1.OrdersService.GetOrderItemsByOrderID.
func (c *ordersServiceClient) GetOrderItemsByOrderID(ctx context.Context, req *connect.Request[v1.GetOrderItemsByOrderIDRequest]) (*connect.Response[v1.GetOrderItemsByOrderIDResponse], error) {
	return c.getOrderItemsByOrderID.CallUnary(ctx, req)
}

// GetOrdersByUserID calls orders.v1.OrdersService.GetOrdersByUserID.
func (c *ordersServiceClient) GetOrdersByUserID(ctx context.Context, req *connect.Request[v1.GetOrdersByUserIDRequest]) (*connect.Response[v1.GetOrdersByUserIDResponse], error) {
	return c.getOrdersByUserID.CallUnary(ctx, req)
}

// UpdateOrderPaymentStatus calls orders.v1.OrdersService.UpdateOrderPaymentStatus.
func (c *ordersServiceClient) UpdateOrderPaymentStatus(ctx context.Context, req *connect.Request[v1.UpdateOrderPaymentStatusRequest]) (*connect.Response[v1.UpdateOrderPaymentStatusResponse], error) {
	return c.updateOrderPaymentStatus.CallUnary(ctx, req)
}

// UpdateOrderStatus calls orders.v1.OrdersService.UpdateOrderStatus.
func (c *ordersServiceClient) UpdateOrderStatus(ctx context.Context, req *connect.Request[v1.UpdateOrderStatusRequest]) (*connect.Response[v1.UpdateOrderStatusResponse], error) {
	return c.updateOrderStatus.CallUnary(ctx, req)
}

// OrdersServiceHandler is an implementation of the orders.v1.OrdersService service.
type OrdersServiceHandler interface {
	CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error)
	CreateOrderItem(context.Context, *connect.Request[v1.CreateOrderItemRequest]) (*connect.Response[v1.CreateOrderItemResponse], error)
	CreateOrderWithItems(context.Context, *connect.Request[v1.CreateOrderWithItemsRequest]) (*connect.Response[v1.CreateOrderWithItemsResponse], error)
	DeleteOrderByID(context.Context, *connect.Request[v1.DeleteOrderByIDRequest]) (*connect.Response[v1.DeleteOrderByIDResponse], error)
	DeleteOrderItemByID(context.Context, *connect.Request[v1.DeleteOrderItemByIDRequest]) (*connect.Response[v1.DeleteOrderItemByIDResponse], error)
	GetOrderByID(context.Context, *connect.Request[v1.GetOrderByIDRequest]) (*connect.Response[v1.GetOrderByIDResponse], error)
	GetOrderItemByID(context.Context, *connect.Request[v1.GetOrderItemByIDRequest]) (*connect.Response[v1.GetOrderItemByIDResponse], error)
	GetOrderItemsByOrderID(context.Context, *connect.Request[v1.GetOrderItemsByOrderIDRequest]) (*connect.Response[v1.GetOrderItemsByOrderIDResponse], error)
	GetOrdersByUserID(context.Context, *connect.Request[v1.GetOrdersByUserIDRequest]) (*connect.Response[v1.GetOrdersByUserIDResponse], error)
	UpdateOrderPaymentStatus(context.Context, *connect.Request[v1.UpdateOrderPaymentStatusRequest]) (*connect.Response[v1.UpdateOrderPaymentStatusResponse], error)
	UpdateOrderStatus(context.Context, *connect.Request[v1.UpdateOrderStatusRequest]) (*connect.Response[v1.UpdateOrderStatusResponse], error)
}

// NewOrdersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrdersServiceHandler(svc OrdersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ordersServiceCreateOrderHandler := connect.NewUnaryHandler(
		OrdersServiceCreateOrderProcedure,
		svc.CreateOrder,
		connect.WithSchema(ordersServiceCreateOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceCreateOrderItemHandler := connect.NewUnaryHandler(
		OrdersServiceCreateOrderItemProcedure,
		svc.CreateOrderItem,
		connect.WithSchema(ordersServiceCreateOrderItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceCreateOrderWithItemsHandler := connect.NewUnaryHandler(
		OrdersServiceCreateOrderWithItemsProcedure,
		svc.CreateOrderWithItems,
		connect.WithSchema(ordersServiceCreateOrderWithItemsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceDeleteOrderByIDHandler := connect.NewUnaryHandler(
		OrdersServiceDeleteOrderByIDProcedure,
		svc.DeleteOrderByID,
		connect.WithSchema(ordersServiceDeleteOrderByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceDeleteOrderItemByIDHandler := connect.NewUnaryHandler(
		OrdersServiceDeleteOrderItemByIDProcedure,
		svc.DeleteOrderItemByID,
		connect.WithSchema(ordersServiceDeleteOrderItemByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceGetOrderByIDHandler := connect.NewUnaryHandler(
		OrdersServiceGetOrderByIDProcedure,
		svc.GetOrderByID,
		connect.WithSchema(ordersServiceGetOrderByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceGetOrderItemByIDHandler := connect.NewUnaryHandler(
		OrdersServiceGetOrderItemByIDProcedure,
		svc.GetOrderItemByID,
		connect.WithSchema(ordersServiceGetOrderItemByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceGetOrderItemsByOrderIDHandler := connect.NewUnaryHandler(
		OrdersServiceGetOrderItemsByOrderIDProcedure,
		svc.GetOrderItemsByOrderID,
		connect.WithSchema(ordersServiceGetOrderItemsByOrderIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceGetOrdersByUserIDHandler := connect.NewUnaryHandler(
		OrdersServiceGetOrdersByUserIDProcedure,
		svc.GetOrdersByUserID,
		connect.WithSchema(ordersServiceGetOrdersByUserIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceUpdateOrderPaymentStatusHandler := connect.NewUnaryHandler(
		OrdersServiceUpdateOrderPaymentStatusProcedure,
		svc.UpdateOrderPaymentStatus,
		connect.WithSchema(ordersServiceUpdateOrderPaymentStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	ordersServiceUpdateOrderStatusHandler := connect.NewUnaryHandler(
		OrdersServiceUpdateOrderStatusProcedure,
		svc.UpdateOrderStatus,
		connect.WithSchema(ordersServiceUpdateOrderStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/orders.v1.OrdersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrdersServiceCreateOrderProcedure:
			ordersServiceCreateOrderHandler.ServeHTTP(w, r)
		case OrdersServiceCreateOrderItemProcedure:
			ordersServiceCreateOrderItemHandler.ServeHTTP(w, r)
		case OrdersServiceCreateOrderWithItemsProcedure:
			ordersServiceCreateOrderWithItemsHandler.ServeHTTP(w, r)
		case OrdersServiceDeleteOrderByIDProcedure:
			ordersServiceDeleteOrderByIDHandler.ServeHTTP(w, r)
		case OrdersServiceDeleteOrderItemByIDProcedure:
			ordersServiceDeleteOrderItemByIDHandler.ServeHTTP(w, r)
		case OrdersServiceGetOrderByIDProcedure:
			ordersServiceGetOrderByIDHandler.ServeHTTP(w, r)
		case OrdersServiceGetOrderItemByIDProcedure:
			ordersServiceGetOrderItemByIDHandler.ServeHTTP(w, r)
		case OrdersServiceGetOrderItemsByOrderIDProcedure:
			ordersServiceGetOrderItemsByOrderIDHandler.ServeHTTP(w, r)
		case OrdersServiceGetOrdersByUserIDProcedure:
			ordersServiceGetOrdersByUserIDHandler.ServeHTTP(w, r)
		case OrdersServiceUpdateOrderPaymentStatusProcedure:
			ordersServiceUpdateOrderPaymentStatusHandler.ServeHTTP(w, r)
		case OrdersServiceUpdateOrderStatusProcedure:
			ordersServiceUpdateOrderStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrdersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrdersServiceHandler struct{}

func (UnimplementedOrdersServiceHandler) CreateOrder(context.Context, *connect.Request[v1.CreateOrderRequest]) (*connect.Response[v1.CreateOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.CreateOrder is not implemented"))
}

func (UnimplementedOrdersServiceHandler) CreateOrderItem(context.Context, *connect.Request[v1.CreateOrderItemRequest]) (*connect.Response[v1.CreateOrderItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.CreateOrderItem is not implemented"))
}

func (UnimplementedOrdersServiceHandler) CreateOrderWithItems(context.Context, *connect.Request[v1.CreateOrderWithItemsRequest]) (*connect.Response[v1.CreateOrderWithItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.CreateOrderWithItems is not implemented"))
}

func (UnimplementedOrdersServiceHandler) DeleteOrderByID(context.Context, *connect.Request[v1.DeleteOrderByIDRequest]) (*connect.Response[v1.DeleteOrderByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.DeleteOrderByID is not implemented"))
}

func (UnimplementedOrdersServiceHandler) DeleteOrderItemByID(context.Context, *connect.Request[v1.DeleteOrderItemByIDRequest]) (*connect.Response[v1.DeleteOrderItemByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.DeleteOrderItemByID is not implemented"))
}

func (UnimplementedOrdersServiceHandler) GetOrderByID(context.Context, *connect.Request[v1.GetOrderByIDRequest]) (*connect.Response[v1.GetOrderByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.GetOrderByID is not implemented"))
}

func (UnimplementedOrdersServiceHandler) GetOrderItemByID(context.Context, *connect.Request[v1.GetOrderItemByIDRequest]) (*connect.Response[v1.GetOrderItemByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.GetOrderItemByID is not implemented"))
}

func (UnimplementedOrdersServiceHandler) GetOrderItemsByOrderID(context.Context, *connect.Request[v1.GetOrderItemsByOrderIDRequest]) (*connect.Response[v1.GetOrderItemsByOrderIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.GetOrderItemsByOrderID is not implemented"))
}

func (UnimplementedOrdersServiceHandler) GetOrdersByUserID(context.Context, *connect.Request[v1.GetOrdersByUserIDRequest]) (*connect.Response[v1.GetOrdersByUserIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.GetOrdersByUserID is not implemented"))
}

func (UnimplementedOrdersServiceHandler) UpdateOrderPaymentStatus(context.Context, *connect.Request[v1.UpdateOrderPaymentStatusRequest]) (*connect.Response[v1.UpdateOrderPaymentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.UpdateOrderPaymentStatus is not implemented"))
}

func (UnimplementedOrdersServiceHandler) UpdateOrderStatus(context.Context, *connect.Request[v1.UpdateOrderStatusRequest]) (*connect.Response[v1.UpdateOrderStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.UpdateOrderStatus is not implemented"))
}
