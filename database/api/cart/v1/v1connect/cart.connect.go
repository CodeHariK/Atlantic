// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cart/v1/cart.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codeharik/Atlantic/database/api/cart/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CartServiceName is the fully-qualified name of the CartService service.
	CartServiceName = "cart.v1.CartService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CartServiceCreateCartProcedure is the fully-qualified name of the CartService's CreateCart RPC.
	CartServiceCreateCartProcedure = "/cart.v1.CartService/CreateCart"
	// CartServiceCreateCartItemProcedure is the fully-qualified name of the CartService's
	// CreateCartItem RPC.
	CartServiceCreateCartItemProcedure = "/cart.v1.CartService/CreateCartItem"
	// CartServiceDeleteCartByIDProcedure is the fully-qualified name of the CartService's
	// DeleteCartByID RPC.
	CartServiceDeleteCartByIDProcedure = "/cart.v1.CartService/DeleteCartByID"
	// CartServiceDeleteCartItemByIDProcedure is the fully-qualified name of the CartService's
	// DeleteCartItemByID RPC.
	CartServiceDeleteCartItemByIDProcedure = "/cart.v1.CartService/DeleteCartItemByID"
	// CartServiceGetCartByIDProcedure is the fully-qualified name of the CartService's GetCartByID RPC.
	CartServiceGetCartByIDProcedure = "/cart.v1.CartService/GetCartByID"
	// CartServiceGetCartItemByIDProcedure is the fully-qualified name of the CartService's
	// GetCartItemByID RPC.
	CartServiceGetCartItemByIDProcedure = "/cart.v1.CartService/GetCartItemByID"
	// CartServiceGetCartItemsByCartIDProcedure is the fully-qualified name of the CartService's
	// GetCartItemsByCartID RPC.
	CartServiceGetCartItemsByCartIDProcedure = "/cart.v1.CartService/GetCartItemsByCartID"
	// CartServiceGetCartsByUserIDProcedure is the fully-qualified name of the CartService's
	// GetCartsByUserID RPC.
	CartServiceGetCartsByUserIDProcedure = "/cart.v1.CartService/GetCartsByUserID"
	// CartServiceUpdateCartItemQuantityProcedure is the fully-qualified name of the CartService's
	// UpdateCartItemQuantity RPC.
	CartServiceUpdateCartItemQuantityProcedure = "/cart.v1.CartService/UpdateCartItemQuantity"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cartServiceServiceDescriptor                      = v1.File_cart_v1_cart_proto.Services().ByName("CartService")
	cartServiceCreateCartMethodDescriptor             = cartServiceServiceDescriptor.Methods().ByName("CreateCart")
	cartServiceCreateCartItemMethodDescriptor         = cartServiceServiceDescriptor.Methods().ByName("CreateCartItem")
	cartServiceDeleteCartByIDMethodDescriptor         = cartServiceServiceDescriptor.Methods().ByName("DeleteCartByID")
	cartServiceDeleteCartItemByIDMethodDescriptor     = cartServiceServiceDescriptor.Methods().ByName("DeleteCartItemByID")
	cartServiceGetCartByIDMethodDescriptor            = cartServiceServiceDescriptor.Methods().ByName("GetCartByID")
	cartServiceGetCartItemByIDMethodDescriptor        = cartServiceServiceDescriptor.Methods().ByName("GetCartItemByID")
	cartServiceGetCartItemsByCartIDMethodDescriptor   = cartServiceServiceDescriptor.Methods().ByName("GetCartItemsByCartID")
	cartServiceGetCartsByUserIDMethodDescriptor       = cartServiceServiceDescriptor.Methods().ByName("GetCartsByUserID")
	cartServiceUpdateCartItemQuantityMethodDescriptor = cartServiceServiceDescriptor.Methods().ByName("UpdateCartItemQuantity")
)

// CartServiceClient is a client for the cart.v1.CartService service.
type CartServiceClient interface {
	CreateCart(context.Context, *connect.Request[v1.CreateCartRequest]) (*connect.Response[v1.CreateCartResponse], error)
	CreateCartItem(context.Context, *connect.Request[v1.CreateCartItemRequest]) (*connect.Response[v1.CreateCartItemResponse], error)
	DeleteCartByID(context.Context, *connect.Request[v1.DeleteCartByIDRequest]) (*connect.Response[v1.DeleteCartByIDResponse], error)
	DeleteCartItemByID(context.Context, *connect.Request[v1.DeleteCartItemByIDRequest]) (*connect.Response[v1.DeleteCartItemByIDResponse], error)
	GetCartByID(context.Context, *connect.Request[v1.GetCartByIDRequest]) (*connect.Response[v1.GetCartByIDResponse], error)
	GetCartItemByID(context.Context, *connect.Request[v1.GetCartItemByIDRequest]) (*connect.Response[v1.GetCartItemByIDResponse], error)
	GetCartItemsByCartID(context.Context, *connect.Request[v1.GetCartItemsByCartIDRequest]) (*connect.Response[v1.GetCartItemsByCartIDResponse], error)
	GetCartsByUserID(context.Context, *connect.Request[v1.GetCartsByUserIDRequest]) (*connect.Response[v1.GetCartsByUserIDResponse], error)
	UpdateCartItemQuantity(context.Context, *connect.Request[v1.UpdateCartItemQuantityRequest]) (*connect.Response[v1.UpdateCartItemQuantityResponse], error)
}

// NewCartServiceClient constructs a client for the cart.v1.CartService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCartServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CartServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cartServiceClient{
		createCart: connect.NewClient[v1.CreateCartRequest, v1.CreateCartResponse](
			httpClient,
			baseURL+CartServiceCreateCartProcedure,
			connect.WithSchema(cartServiceCreateCartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCartItem: connect.NewClient[v1.CreateCartItemRequest, v1.CreateCartItemResponse](
			httpClient,
			baseURL+CartServiceCreateCartItemProcedure,
			connect.WithSchema(cartServiceCreateCartItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCartByID: connect.NewClient[v1.DeleteCartByIDRequest, v1.DeleteCartByIDResponse](
			httpClient,
			baseURL+CartServiceDeleteCartByIDProcedure,
			connect.WithSchema(cartServiceDeleteCartByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCartItemByID: connect.NewClient[v1.DeleteCartItemByIDRequest, v1.DeleteCartItemByIDResponse](
			httpClient,
			baseURL+CartServiceDeleteCartItemByIDProcedure,
			connect.WithSchema(cartServiceDeleteCartItemByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCartByID: connect.NewClient[v1.GetCartByIDRequest, v1.GetCartByIDResponse](
			httpClient,
			baseURL+CartServiceGetCartByIDProcedure,
			connect.WithSchema(cartServiceGetCartByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCartItemByID: connect.NewClient[v1.GetCartItemByIDRequest, v1.GetCartItemByIDResponse](
			httpClient,
			baseURL+CartServiceGetCartItemByIDProcedure,
			connect.WithSchema(cartServiceGetCartItemByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCartItemsByCartID: connect.NewClient[v1.GetCartItemsByCartIDRequest, v1.GetCartItemsByCartIDResponse](
			httpClient,
			baseURL+CartServiceGetCartItemsByCartIDProcedure,
			connect.WithSchema(cartServiceGetCartItemsByCartIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCartsByUserID: connect.NewClient[v1.GetCartsByUserIDRequest, v1.GetCartsByUserIDResponse](
			httpClient,
			baseURL+CartServiceGetCartsByUserIDProcedure,
			connect.WithSchema(cartServiceGetCartsByUserIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCartItemQuantity: connect.NewClient[v1.UpdateCartItemQuantityRequest, v1.UpdateCartItemQuantityResponse](
			httpClient,
			baseURL+CartServiceUpdateCartItemQuantityProcedure,
			connect.WithSchema(cartServiceUpdateCartItemQuantityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cartServiceClient implements CartServiceClient.
type cartServiceClient struct {
	createCart             *connect.Client[v1.CreateCartRequest, v1.CreateCartResponse]
	createCartItem         *connect.Client[v1.CreateCartItemRequest, v1.CreateCartItemResponse]
	deleteCartByID         *connect.Client[v1.DeleteCartByIDRequest, v1.DeleteCartByIDResponse]
	deleteCartItemByID     *connect.Client[v1.DeleteCartItemByIDRequest, v1.DeleteCartItemByIDResponse]
	getCartByID            *connect.Client[v1.GetCartByIDRequest, v1.GetCartByIDResponse]
	getCartItemByID        *connect.Client[v1.GetCartItemByIDRequest, v1.GetCartItemByIDResponse]
	getCartItemsByCartID   *connect.Client[v1.GetCartItemsByCartIDRequest, v1.GetCartItemsByCartIDResponse]
	getCartsByUserID       *connect.Client[v1.GetCartsByUserIDRequest, v1.GetCartsByUserIDResponse]
	updateCartItemQuantity *connect.Client[v1.UpdateCartItemQuantityRequest, v1.UpdateCartItemQuantityResponse]
}

// CreateCart calls cart.v1.CartService.CreateCart.
func (c *cartServiceClient) CreateCart(ctx context.Context, req *connect.Request[v1.CreateCartRequest]) (*connect.Response[v1.CreateCartResponse], error) {
	return c.createCart.CallUnary(ctx, req)
}

// CreateCartItem calls cart.v1.CartService.CreateCartItem.
func (c *cartServiceClient) CreateCartItem(ctx context.Context, req *connect.Request[v1.CreateCartItemRequest]) (*connect.Response[v1.CreateCartItemResponse], error) {
	return c.createCartItem.CallUnary(ctx, req)
}

// DeleteCartByID calls cart.v1.CartService.DeleteCartByID.
func (c *cartServiceClient) DeleteCartByID(ctx context.Context, req *connect.Request[v1.DeleteCartByIDRequest]) (*connect.Response[v1.DeleteCartByIDResponse], error) {
	return c.deleteCartByID.CallUnary(ctx, req)
}

// DeleteCartItemByID calls cart.v1.CartService.DeleteCartItemByID.
func (c *cartServiceClient) DeleteCartItemByID(ctx context.Context, req *connect.Request[v1.DeleteCartItemByIDRequest]) (*connect.Response[v1.DeleteCartItemByIDResponse], error) {
	return c.deleteCartItemByID.CallUnary(ctx, req)
}

// GetCartByID calls cart.v1.CartService.GetCartByID.
func (c *cartServiceClient) GetCartByID(ctx context.Context, req *connect.Request[v1.GetCartByIDRequest]) (*connect.Response[v1.GetCartByIDResponse], error) {
	return c.getCartByID.CallUnary(ctx, req)
}

// GetCartItemByID calls cart.v1.CartService.GetCartItemByID.
func (c *cartServiceClient) GetCartItemByID(ctx context.Context, req *connect.Request[v1.GetCartItemByIDRequest]) (*connect.Response[v1.GetCartItemByIDResponse], error) {
	return c.getCartItemByID.CallUnary(ctx, req)
}

// GetCartItemsByCartID calls cart.v1.CartService.GetCartItemsByCartID.
func (c *cartServiceClient) GetCartItemsByCartID(ctx context.Context, req *connect.Request[v1.GetCartItemsByCartIDRequest]) (*connect.Response[v1.GetCartItemsByCartIDResponse], error) {
	return c.getCartItemsByCartID.CallUnary(ctx, req)
}

// GetCartsByUserID calls cart.v1.CartService.GetCartsByUserID.
func (c *cartServiceClient) GetCartsByUserID(ctx context.Context, req *connect.Request[v1.GetCartsByUserIDRequest]) (*connect.Response[v1.GetCartsByUserIDResponse], error) {
	return c.getCartsByUserID.CallUnary(ctx, req)
}

// UpdateCartItemQuantity calls cart.v1.CartService.UpdateCartItemQuantity.
func (c *cartServiceClient) UpdateCartItemQuantity(ctx context.Context, req *connect.Request[v1.UpdateCartItemQuantityRequest]) (*connect.Response[v1.UpdateCartItemQuantityResponse], error) {
	return c.updateCartItemQuantity.CallUnary(ctx, req)
}

// CartServiceHandler is an implementation of the cart.v1.CartService service.
type CartServiceHandler interface {
	CreateCart(context.Context, *connect.Request[v1.CreateCartRequest]) (*connect.Response[v1.CreateCartResponse], error)
	CreateCartItem(context.Context, *connect.Request[v1.CreateCartItemRequest]) (*connect.Response[v1.CreateCartItemResponse], error)
	DeleteCartByID(context.Context, *connect.Request[v1.DeleteCartByIDRequest]) (*connect.Response[v1.DeleteCartByIDResponse], error)
	DeleteCartItemByID(context.Context, *connect.Request[v1.DeleteCartItemByIDRequest]) (*connect.Response[v1.DeleteCartItemByIDResponse], error)
	GetCartByID(context.Context, *connect.Request[v1.GetCartByIDRequest]) (*connect.Response[v1.GetCartByIDResponse], error)
	GetCartItemByID(context.Context, *connect.Request[v1.GetCartItemByIDRequest]) (*connect.Response[v1.GetCartItemByIDResponse], error)
	GetCartItemsByCartID(context.Context, *connect.Request[v1.GetCartItemsByCartIDRequest]) (*connect.Response[v1.GetCartItemsByCartIDResponse], error)
	GetCartsByUserID(context.Context, *connect.Request[v1.GetCartsByUserIDRequest]) (*connect.Response[v1.GetCartsByUserIDResponse], error)
	UpdateCartItemQuantity(context.Context, *connect.Request[v1.UpdateCartItemQuantityRequest]) (*connect.Response[v1.UpdateCartItemQuantityResponse], error)
}

// NewCartServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCartServiceHandler(svc CartServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cartServiceCreateCartHandler := connect.NewUnaryHandler(
		CartServiceCreateCartProcedure,
		svc.CreateCart,
		connect.WithSchema(cartServiceCreateCartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceCreateCartItemHandler := connect.NewUnaryHandler(
		CartServiceCreateCartItemProcedure,
		svc.CreateCartItem,
		connect.WithSchema(cartServiceCreateCartItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceDeleteCartByIDHandler := connect.NewUnaryHandler(
		CartServiceDeleteCartByIDProcedure,
		svc.DeleteCartByID,
		connect.WithSchema(cartServiceDeleteCartByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceDeleteCartItemByIDHandler := connect.NewUnaryHandler(
		CartServiceDeleteCartItemByIDProcedure,
		svc.DeleteCartItemByID,
		connect.WithSchema(cartServiceDeleteCartItemByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceGetCartByIDHandler := connect.NewUnaryHandler(
		CartServiceGetCartByIDProcedure,
		svc.GetCartByID,
		connect.WithSchema(cartServiceGetCartByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceGetCartItemByIDHandler := connect.NewUnaryHandler(
		CartServiceGetCartItemByIDProcedure,
		svc.GetCartItemByID,
		connect.WithSchema(cartServiceGetCartItemByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceGetCartItemsByCartIDHandler := connect.NewUnaryHandler(
		CartServiceGetCartItemsByCartIDProcedure,
		svc.GetCartItemsByCartID,
		connect.WithSchema(cartServiceGetCartItemsByCartIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceGetCartsByUserIDHandler := connect.NewUnaryHandler(
		CartServiceGetCartsByUserIDProcedure,
		svc.GetCartsByUserID,
		connect.WithSchema(cartServiceGetCartsByUserIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceUpdateCartItemQuantityHandler := connect.NewUnaryHandler(
		CartServiceUpdateCartItemQuantityProcedure,
		svc.UpdateCartItemQuantity,
		connect.WithSchema(cartServiceUpdateCartItemQuantityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cart.v1.CartService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CartServiceCreateCartProcedure:
			cartServiceCreateCartHandler.ServeHTTP(w, r)
		case CartServiceCreateCartItemProcedure:
			cartServiceCreateCartItemHandler.ServeHTTP(w, r)
		case CartServiceDeleteCartByIDProcedure:
			cartServiceDeleteCartByIDHandler.ServeHTTP(w, r)
		case CartServiceDeleteCartItemByIDProcedure:
			cartServiceDeleteCartItemByIDHandler.ServeHTTP(w, r)
		case CartServiceGetCartByIDProcedure:
			cartServiceGetCartByIDHandler.ServeHTTP(w, r)
		case CartServiceGetCartItemByIDProcedure:
			cartServiceGetCartItemByIDHandler.ServeHTTP(w, r)
		case CartServiceGetCartItemsByCartIDProcedure:
			cartServiceGetCartItemsByCartIDHandler.ServeHTTP(w, r)
		case CartServiceGetCartsByUserIDProcedure:
			cartServiceGetCartsByUserIDHandler.ServeHTTP(w, r)
		case CartServiceUpdateCartItemQuantityProcedure:
			cartServiceUpdateCartItemQuantityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCartServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCartServiceHandler struct{}

func (UnimplementedCartServiceHandler) CreateCart(context.Context, *connect.Request[v1.CreateCartRequest]) (*connect.Response[v1.CreateCartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.CreateCart is not implemented"))
}

func (UnimplementedCartServiceHandler) CreateCartItem(context.Context, *connect.Request[v1.CreateCartItemRequest]) (*connect.Response[v1.CreateCartItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.CreateCartItem is not implemented"))
}

func (UnimplementedCartServiceHandler) DeleteCartByID(context.Context, *connect.Request[v1.DeleteCartByIDRequest]) (*connect.Response[v1.DeleteCartByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.DeleteCartByID is not implemented"))
}

func (UnimplementedCartServiceHandler) DeleteCartItemByID(context.Context, *connect.Request[v1.DeleteCartItemByIDRequest]) (*connect.Response[v1.DeleteCartItemByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.DeleteCartItemByID is not implemented"))
}

func (UnimplementedCartServiceHandler) GetCartByID(context.Context, *connect.Request[v1.GetCartByIDRequest]) (*connect.Response[v1.GetCartByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.GetCartByID is not implemented"))
}

func (UnimplementedCartServiceHandler) GetCartItemByID(context.Context, *connect.Request[v1.GetCartItemByIDRequest]) (*connect.Response[v1.GetCartItemByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.GetCartItemByID is not implemented"))
}

func (UnimplementedCartServiceHandler) GetCartItemsByCartID(context.Context, *connect.Request[v1.GetCartItemsByCartIDRequest]) (*connect.Response[v1.GetCartItemsByCartIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.GetCartItemsByCartID is not implemented"))
}

func (UnimplementedCartServiceHandler) GetCartsByUserID(context.Context, *connect.Request[v1.GetCartsByUserIDRequest]) (*connect.Response[v1.GetCartsByUserIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.GetCartsByUserID is not implemented"))
}

func (UnimplementedCartServiceHandler) UpdateCartItemQuantity(context.Context, *connect.Request[v1.UpdateCartItemQuantityRequest]) (*connect.Response[v1.UpdateCartItemQuantityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.UpdateCartItemQuantity is not implemented"))
}
