// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect). DO NOT EDIT.

package seller

import (
	"context"
	"log/slog"

	"connectrpc.com/connect"
	"github.com/jackc/pgx/v5/pgtype"

	pb "sandslash/api/seller/v1"
	"sandslash/api/seller/v1/v1connect"
)

type Service struct {
	v1connect.UnimplementedSellerServiceHandler
	querier *Queries
}

func (s *Service) CreateSeller(ctx context.Context, req *connect.Request[pb.CreateSellerRequest]) (*connect.Response[pb.CreateSellerResponse], error) {
	var arg CreateSellerParams
	arg.Name = req.Msg.GetName()
	if v := req.Msg.GetLocation(); v != nil {
		arg.Location = pgtype.Int4{Valid: true, Int32: v.Value}
	}

	result, err := s.querier.CreateSeller(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "CreateSeller")
		return nil, err
	}
	return connect.NewResponse(&pb.CreateSellerResponse{Value: result}), nil
}

func (s *Service) DeleteSeller(ctx context.Context, req *connect.Request[pb.DeleteSellerRequest]) (*connect.Response[pb.DeleteSellerResponse], error) {
	id := req.Msg.GetId()

	err := s.querier.DeleteSeller(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "DeleteSeller")
		return nil, err
	}
	return connect.NewResponse(&pb.DeleteSellerResponse{}), nil
}

func (s *Service) GetSellerByID(ctx context.Context, req *connect.Request[pb.GetSellerByIDRequest]) (*connect.Response[pb.GetSellerByIDResponse], error) {
	id := req.Msg.GetId()

	result, err := s.querier.GetSellerByID(ctx, id)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "GetSellerByID")
		return nil, err
	}
	return connect.NewResponse(&pb.GetSellerByIDResponse{Seller: toSeller(result)}), nil
}

func (s *Service) ListSellers(ctx context.Context, req *connect.Request[pb.ListSellersRequest]) (*connect.Response[pb.ListSellersResponse], error) {

	result, err := s.querier.ListSellers(ctx)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "ListSellers")
		return nil, err
	}
	res := new(pb.ListSellersResponse)
	for _, r := range result {
		res.List = append(res.List, toSeller(r))
	}
	return connect.NewResponse(res), nil
}

func (s *Service) UpdateSeller(ctx context.Context, req *connect.Request[pb.UpdateSellerRequest]) (*connect.Response[pb.UpdateSellerResponse], error) {
	var arg UpdateSellerParams
	arg.Name = req.Msg.GetName()
	if v := req.Msg.GetLocation(); v != nil {
		arg.Location = pgtype.Int4{Valid: true, Int32: v.Value}
	}
	arg.ID = req.Msg.GetId()

	result, err := s.querier.UpdateSeller(ctx, arg)
	if err != nil {
		slog.Error("sql call failed", "error", err, "method", "UpdateSeller")
		return nil, err
	}
	return connect.NewResponse(&pb.UpdateSellerResponse{Seller: toSeller(result)}), nil
}
