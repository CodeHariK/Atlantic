// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: seller/v1/seller.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "sandslash/api/seller/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SellerServiceName is the fully-qualified name of the SellerService service.
	SellerServiceName = "seller.v1.SellerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SellerServiceCreateSellerProcedure is the fully-qualified name of the SellerService's
	// CreateSeller RPC.
	SellerServiceCreateSellerProcedure = "/seller.v1.SellerService/CreateSeller"
	// SellerServiceDeleteSellerProcedure is the fully-qualified name of the SellerService's
	// DeleteSeller RPC.
	SellerServiceDeleteSellerProcedure = "/seller.v1.SellerService/DeleteSeller"
	// SellerServiceGetSellerByIDProcedure is the fully-qualified name of the SellerService's
	// GetSellerByID RPC.
	SellerServiceGetSellerByIDProcedure = "/seller.v1.SellerService/GetSellerByID"
	// SellerServiceListSellersProcedure is the fully-qualified name of the SellerService's ListSellers
	// RPC.
	SellerServiceListSellersProcedure = "/seller.v1.SellerService/ListSellers"
	// SellerServiceUpdateSellerProcedure is the fully-qualified name of the SellerService's
	// UpdateSeller RPC.
	SellerServiceUpdateSellerProcedure = "/seller.v1.SellerService/UpdateSeller"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sellerServiceServiceDescriptor             = v1.File_seller_v1_seller_proto.Services().ByName("SellerService")
	sellerServiceCreateSellerMethodDescriptor  = sellerServiceServiceDescriptor.Methods().ByName("CreateSeller")
	sellerServiceDeleteSellerMethodDescriptor  = sellerServiceServiceDescriptor.Methods().ByName("DeleteSeller")
	sellerServiceGetSellerByIDMethodDescriptor = sellerServiceServiceDescriptor.Methods().ByName("GetSellerByID")
	sellerServiceListSellersMethodDescriptor   = sellerServiceServiceDescriptor.Methods().ByName("ListSellers")
	sellerServiceUpdateSellerMethodDescriptor  = sellerServiceServiceDescriptor.Methods().ByName("UpdateSeller")
)

// SellerServiceClient is a client for the seller.v1.SellerService service.
type SellerServiceClient interface {
	CreateSeller(context.Context, *connect.Request[v1.CreateSellerRequest]) (*connect.Response[v1.CreateSellerResponse], error)
	DeleteSeller(context.Context, *connect.Request[v1.DeleteSellerRequest]) (*connect.Response[v1.DeleteSellerResponse], error)
	GetSellerByID(context.Context, *connect.Request[v1.GetSellerByIDRequest]) (*connect.Response[v1.GetSellerByIDResponse], error)
	ListSellers(context.Context, *connect.Request[v1.ListSellersRequest]) (*connect.Response[v1.ListSellersResponse], error)
	UpdateSeller(context.Context, *connect.Request[v1.UpdateSellerRequest]) (*connect.Response[v1.UpdateSellerResponse], error)
}

// NewSellerServiceClient constructs a client for the seller.v1.SellerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSellerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SellerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sellerServiceClient{
		createSeller: connect.NewClient[v1.CreateSellerRequest, v1.CreateSellerResponse](
			httpClient,
			baseURL+SellerServiceCreateSellerProcedure,
			connect.WithSchema(sellerServiceCreateSellerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSeller: connect.NewClient[v1.DeleteSellerRequest, v1.DeleteSellerResponse](
			httpClient,
			baseURL+SellerServiceDeleteSellerProcedure,
			connect.WithSchema(sellerServiceDeleteSellerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSellerByID: connect.NewClient[v1.GetSellerByIDRequest, v1.GetSellerByIDResponse](
			httpClient,
			baseURL+SellerServiceGetSellerByIDProcedure,
			connect.WithSchema(sellerServiceGetSellerByIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSellers: connect.NewClient[v1.ListSellersRequest, v1.ListSellersResponse](
			httpClient,
			baseURL+SellerServiceListSellersProcedure,
			connect.WithSchema(sellerServiceListSellersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSeller: connect.NewClient[v1.UpdateSellerRequest, v1.UpdateSellerResponse](
			httpClient,
			baseURL+SellerServiceUpdateSellerProcedure,
			connect.WithSchema(sellerServiceUpdateSellerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sellerServiceClient implements SellerServiceClient.
type sellerServiceClient struct {
	createSeller  *connect.Client[v1.CreateSellerRequest, v1.CreateSellerResponse]
	deleteSeller  *connect.Client[v1.DeleteSellerRequest, v1.DeleteSellerResponse]
	getSellerByID *connect.Client[v1.GetSellerByIDRequest, v1.GetSellerByIDResponse]
	listSellers   *connect.Client[v1.ListSellersRequest, v1.ListSellersResponse]
	updateSeller  *connect.Client[v1.UpdateSellerRequest, v1.UpdateSellerResponse]
}

// CreateSeller calls seller.v1.SellerService.CreateSeller.
func (c *sellerServiceClient) CreateSeller(ctx context.Context, req *connect.Request[v1.CreateSellerRequest]) (*connect.Response[v1.CreateSellerResponse], error) {
	return c.createSeller.CallUnary(ctx, req)
}

// DeleteSeller calls seller.v1.SellerService.DeleteSeller.
func (c *sellerServiceClient) DeleteSeller(ctx context.Context, req *connect.Request[v1.DeleteSellerRequest]) (*connect.Response[v1.DeleteSellerResponse], error) {
	return c.deleteSeller.CallUnary(ctx, req)
}

// GetSellerByID calls seller.v1.SellerService.GetSellerByID.
func (c *sellerServiceClient) GetSellerByID(ctx context.Context, req *connect.Request[v1.GetSellerByIDRequest]) (*connect.Response[v1.GetSellerByIDResponse], error) {
	return c.getSellerByID.CallUnary(ctx, req)
}

// ListSellers calls seller.v1.SellerService.ListSellers.
func (c *sellerServiceClient) ListSellers(ctx context.Context, req *connect.Request[v1.ListSellersRequest]) (*connect.Response[v1.ListSellersResponse], error) {
	return c.listSellers.CallUnary(ctx, req)
}

// UpdateSeller calls seller.v1.SellerService.UpdateSeller.
func (c *sellerServiceClient) UpdateSeller(ctx context.Context, req *connect.Request[v1.UpdateSellerRequest]) (*connect.Response[v1.UpdateSellerResponse], error) {
	return c.updateSeller.CallUnary(ctx, req)
}

// SellerServiceHandler is an implementation of the seller.v1.SellerService service.
type SellerServiceHandler interface {
	CreateSeller(context.Context, *connect.Request[v1.CreateSellerRequest]) (*connect.Response[v1.CreateSellerResponse], error)
	DeleteSeller(context.Context, *connect.Request[v1.DeleteSellerRequest]) (*connect.Response[v1.DeleteSellerResponse], error)
	GetSellerByID(context.Context, *connect.Request[v1.GetSellerByIDRequest]) (*connect.Response[v1.GetSellerByIDResponse], error)
	ListSellers(context.Context, *connect.Request[v1.ListSellersRequest]) (*connect.Response[v1.ListSellersResponse], error)
	UpdateSeller(context.Context, *connect.Request[v1.UpdateSellerRequest]) (*connect.Response[v1.UpdateSellerResponse], error)
}

// NewSellerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSellerServiceHandler(svc SellerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sellerServiceCreateSellerHandler := connect.NewUnaryHandler(
		SellerServiceCreateSellerProcedure,
		svc.CreateSeller,
		connect.WithSchema(sellerServiceCreateSellerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sellerServiceDeleteSellerHandler := connect.NewUnaryHandler(
		SellerServiceDeleteSellerProcedure,
		svc.DeleteSeller,
		connect.WithSchema(sellerServiceDeleteSellerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sellerServiceGetSellerByIDHandler := connect.NewUnaryHandler(
		SellerServiceGetSellerByIDProcedure,
		svc.GetSellerByID,
		connect.WithSchema(sellerServiceGetSellerByIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sellerServiceListSellersHandler := connect.NewUnaryHandler(
		SellerServiceListSellersProcedure,
		svc.ListSellers,
		connect.WithSchema(sellerServiceListSellersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sellerServiceUpdateSellerHandler := connect.NewUnaryHandler(
		SellerServiceUpdateSellerProcedure,
		svc.UpdateSeller,
		connect.WithSchema(sellerServiceUpdateSellerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/seller.v1.SellerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SellerServiceCreateSellerProcedure:
			sellerServiceCreateSellerHandler.ServeHTTP(w, r)
		case SellerServiceDeleteSellerProcedure:
			sellerServiceDeleteSellerHandler.ServeHTTP(w, r)
		case SellerServiceGetSellerByIDProcedure:
			sellerServiceGetSellerByIDHandler.ServeHTTP(w, r)
		case SellerServiceListSellersProcedure:
			sellerServiceListSellersHandler.ServeHTTP(w, r)
		case SellerServiceUpdateSellerProcedure:
			sellerServiceUpdateSellerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSellerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSellerServiceHandler struct{}

func (UnimplementedSellerServiceHandler) CreateSeller(context.Context, *connect.Request[v1.CreateSellerRequest]) (*connect.Response[v1.CreateSellerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("seller.v1.SellerService.CreateSeller is not implemented"))
}

func (UnimplementedSellerServiceHandler) DeleteSeller(context.Context, *connect.Request[v1.DeleteSellerRequest]) (*connect.Response[v1.DeleteSellerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("seller.v1.SellerService.DeleteSeller is not implemented"))
}

func (UnimplementedSellerServiceHandler) GetSellerByID(context.Context, *connect.Request[v1.GetSellerByIDRequest]) (*connect.Response[v1.GetSellerByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("seller.v1.SellerService.GetSellerByID is not implemented"))
}

func (UnimplementedSellerServiceHandler) ListSellers(context.Context, *connect.Request[v1.ListSellersRequest]) (*connect.Response[v1.ListSellersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("seller.v1.SellerService.ListSellers is not implemented"))
}

func (UnimplementedSellerServiceHandler) UpdateSeller(context.Context, *connect.Request[v1.UpdateSellerRequest]) (*connect.Response[v1.UpdateSellerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("seller.v1.SellerService.UpdateSeller is not implemented"))
}
