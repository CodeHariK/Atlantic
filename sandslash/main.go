// Code generated by sqlc-connect (https://github.com/walterwanderley/sqlc-connect).

package main

import (
	"context"
	_ "embed"
	"errors"
	"flag"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"runtime"
	"syscall"
	"time"

	"connectrpc.com/connect"
	"connectrpc.com/otelconnect"
	"github.com/exaring/otelpgx"
	"github.com/flowchartsman/swaggerui"
	"go.uber.org/automaxprocs/maxprocs"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	// database driver
	"github.com/jackc/pgx/v5/pgxpool"

	"sandslash/internal/server/instrumentation/metric"
	"sandslash/internal/server/instrumentation/trace"
)

//go:generate sqlc-connect -tracing -metric -append

const serviceName = "sandslash"

var (
	dbURL                string
	port, prometheusPort int

	otlpEndpoint string

	//go:embed api/apidocs.swagger.json
	openAPISpec []byte
)

func main() {
	var dev bool
	flag.StringVar(&dbURL, "db", "", "The Database connection URL")
	flag.IntVar(&port, "port", 5000, "The server port")
	flag.IntVar(&prometheusPort, "prometheus-port", 0, "The metrics server port")
	flag.BoolVar(&dev, "dev", false, "Set logger to development mode")
	flag.StringVar(&otlpEndpoint, "otlp-endpoint", "", "The Open Telemetry Protocol Endpoint (example: localhost:4317)")

	flag.Parse()

	initLogger(dev)

	if err := run(); err != nil && !errors.Is(err, http.ErrServerClosed) {
		slog.Error("server error", "error", err)
		os.Exit(1)
	}
}

func run() error {
	_, err := maxprocs.Set()
	if err != nil {
		slog.Warn("startup", "error", err)
	}
	slog.Info("startup", "GOMAXPROCS", runtime.GOMAXPROCS(0))

	var db *pgxpool.Pool
	if otlpEndpoint != "" {

		dbCfg, err := pgxpool.ParseConfig(dbURL)
		if err != nil {
			return err
		}
		dbCfg.ConnConfig.Tracer = otelpgx.NewTracer()
		db, err = pgxpool.NewWithConfig(context.Background(), dbCfg)
		if err != nil {
			return err
		}

	} else {
		db, err = pgxpool.New(context.Background(), dbURL)
		if err != nil {
			return err
		}
	}
	defer db.Close()

	mux := http.NewServeMux()
	var interceptors []connect.Interceptor

	if prometheusPort > 0 || otlpEndpoint != "" {
		observability, err := otelconnect.NewInterceptor()
		if err != nil {
			return err
		}
		interceptors = append(interceptors, observability)
	}
	registerHandlers(mux, db, interceptors)
	mux.Handle("/swagger/", http.StripPrefix("/swagger", swaggerui.Handler(openAPISpec)))

	server := &http.Server{
		Addr:    fmt.Sprintf(":%d", port),
		Handler: h2c.NewHandler(mux, &http2.Server{}),
		// Please, configure timeouts!
	}

	if prometheusPort > 0 {
		err := metric.Init(prometheusPort, serviceName)
		if err != nil {
			return err
		}
	}

	if otlpEndpoint != "" {
		shutdown, err := trace.Init(context.Background(), serviceName, otlpEndpoint)
		if err != nil {
			return err
		}
		defer shutdown()
	}

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-done
		slog.Warn("signal detected...", "signal", sig)
		ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
		defer cancel()
		server.Shutdown(ctx)
	}()
	slog.Info("Listening...", "port", port)
	return server.ListenAndServe()
}

func initLogger(dev bool) {
	var handler slog.Handler
	opts := slog.HandlerOptions{
		AddSource: true,
	}
	switch {
	case dev:
		handler = slog.NewTextHandler(os.Stderr, &opts)
	default:
		handler = slog.NewJSONHandler(os.Stderr, &opts)
	}

	logger := slog.New(handler)
	slog.SetDefault(logger)
}
