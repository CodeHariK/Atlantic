// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cart/v1/cart.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codeharik/Atlantic/orders/api/cart/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CartServiceName is the fully-qualified name of the CartService service.
	CartServiceName = "cart.v1.CartService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CartServiceCreateCartProcedure is the fully-qualified name of the CartService's CreateCart RPC.
	CartServiceCreateCartProcedure = "/cart.v1.CartService/CreateCart"
	// CartServiceGetCartProcedure is the fully-qualified name of the CartService's GetCart RPC.
	CartServiceGetCartProcedure = "/cart.v1.CartService/GetCart"
	// CartServiceUpdateCartItemProcedure is the fully-qualified name of the CartService's
	// UpdateCartItem RPC.
	CartServiceUpdateCartItemProcedure = "/cart.v1.CartService/UpdateCartItem"
	// CartServiceCheckoutCartProcedure is the fully-qualified name of the CartService's CheckoutCart
	// RPC.
	CartServiceCheckoutCartProcedure = "/cart.v1.CartService/CheckoutCart"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cartServiceServiceDescriptor              = v1.File_cart_v1_cart_proto.Services().ByName("CartService")
	cartServiceCreateCartMethodDescriptor     = cartServiceServiceDescriptor.Methods().ByName("CreateCart")
	cartServiceGetCartMethodDescriptor        = cartServiceServiceDescriptor.Methods().ByName("GetCart")
	cartServiceUpdateCartItemMethodDescriptor = cartServiceServiceDescriptor.Methods().ByName("UpdateCartItem")
	cartServiceCheckoutCartMethodDescriptor   = cartServiceServiceDescriptor.Methods().ByName("CheckoutCart")
)

// CartServiceClient is a client for the cart.v1.CartService service.
type CartServiceClient interface {
	CreateCart(context.Context, *connect.Request[v1.CreateCartRequest]) (*connect.Response[v1.Cart], error)
	GetCart(context.Context, *connect.Request[v1.GetCartRequest]) (*connect.Response[v1.Cart], error)
	UpdateCartItem(context.Context, *connect.Request[v1.CartItem]) (*connect.Response[v1.Cart], error)
	CheckoutCart(context.Context, *connect.Request[v1.CheckoutCartRequest]) (*connect.Response[v1.CheckoutCartResponse], error)
}

// NewCartServiceClient constructs a client for the cart.v1.CartService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCartServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CartServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cartServiceClient{
		createCart: connect.NewClient[v1.CreateCartRequest, v1.Cart](
			httpClient,
			baseURL+CartServiceCreateCartProcedure,
			connect.WithSchema(cartServiceCreateCartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCart: connect.NewClient[v1.GetCartRequest, v1.Cart](
			httpClient,
			baseURL+CartServiceGetCartProcedure,
			connect.WithSchema(cartServiceGetCartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCartItem: connect.NewClient[v1.CartItem, v1.Cart](
			httpClient,
			baseURL+CartServiceUpdateCartItemProcedure,
			connect.WithSchema(cartServiceUpdateCartItemMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		checkoutCart: connect.NewClient[v1.CheckoutCartRequest, v1.CheckoutCartResponse](
			httpClient,
			baseURL+CartServiceCheckoutCartProcedure,
			connect.WithSchema(cartServiceCheckoutCartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cartServiceClient implements CartServiceClient.
type cartServiceClient struct {
	createCart     *connect.Client[v1.CreateCartRequest, v1.Cart]
	getCart        *connect.Client[v1.GetCartRequest, v1.Cart]
	updateCartItem *connect.Client[v1.CartItem, v1.Cart]
	checkoutCart   *connect.Client[v1.CheckoutCartRequest, v1.CheckoutCartResponse]
}

// CreateCart calls cart.v1.CartService.CreateCart.
func (c *cartServiceClient) CreateCart(ctx context.Context, req *connect.Request[v1.CreateCartRequest]) (*connect.Response[v1.Cart], error) {
	return c.createCart.CallUnary(ctx, req)
}

// GetCart calls cart.v1.CartService.GetCart.
func (c *cartServiceClient) GetCart(ctx context.Context, req *connect.Request[v1.GetCartRequest]) (*connect.Response[v1.Cart], error) {
	return c.getCart.CallUnary(ctx, req)
}

// UpdateCartItem calls cart.v1.CartService.UpdateCartItem.
func (c *cartServiceClient) UpdateCartItem(ctx context.Context, req *connect.Request[v1.CartItem]) (*connect.Response[v1.Cart], error) {
	return c.updateCartItem.CallUnary(ctx, req)
}

// CheckoutCart calls cart.v1.CartService.CheckoutCart.
func (c *cartServiceClient) CheckoutCart(ctx context.Context, req *connect.Request[v1.CheckoutCartRequest]) (*connect.Response[v1.CheckoutCartResponse], error) {
	return c.checkoutCart.CallUnary(ctx, req)
}

// CartServiceHandler is an implementation of the cart.v1.CartService service.
type CartServiceHandler interface {
	CreateCart(context.Context, *connect.Request[v1.CreateCartRequest]) (*connect.Response[v1.Cart], error)
	GetCart(context.Context, *connect.Request[v1.GetCartRequest]) (*connect.Response[v1.Cart], error)
	UpdateCartItem(context.Context, *connect.Request[v1.CartItem]) (*connect.Response[v1.Cart], error)
	CheckoutCart(context.Context, *connect.Request[v1.CheckoutCartRequest]) (*connect.Response[v1.CheckoutCartResponse], error)
}

// NewCartServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCartServiceHandler(svc CartServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cartServiceCreateCartHandler := connect.NewUnaryHandler(
		CartServiceCreateCartProcedure,
		svc.CreateCart,
		connect.WithSchema(cartServiceCreateCartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceGetCartHandler := connect.NewUnaryHandler(
		CartServiceGetCartProcedure,
		svc.GetCart,
		connect.WithSchema(cartServiceGetCartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceUpdateCartItemHandler := connect.NewUnaryHandler(
		CartServiceUpdateCartItemProcedure,
		svc.UpdateCartItem,
		connect.WithSchema(cartServiceUpdateCartItemMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cartServiceCheckoutCartHandler := connect.NewUnaryHandler(
		CartServiceCheckoutCartProcedure,
		svc.CheckoutCart,
		connect.WithSchema(cartServiceCheckoutCartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cart.v1.CartService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CartServiceCreateCartProcedure:
			cartServiceCreateCartHandler.ServeHTTP(w, r)
		case CartServiceGetCartProcedure:
			cartServiceGetCartHandler.ServeHTTP(w, r)
		case CartServiceUpdateCartItemProcedure:
			cartServiceUpdateCartItemHandler.ServeHTTP(w, r)
		case CartServiceCheckoutCartProcedure:
			cartServiceCheckoutCartHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCartServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCartServiceHandler struct{}

func (UnimplementedCartServiceHandler) CreateCart(context.Context, *connect.Request[v1.CreateCartRequest]) (*connect.Response[v1.Cart], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.CreateCart is not implemented"))
}

func (UnimplementedCartServiceHandler) GetCart(context.Context, *connect.Request[v1.GetCartRequest]) (*connect.Response[v1.Cart], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.GetCart is not implemented"))
}

func (UnimplementedCartServiceHandler) UpdateCartItem(context.Context, *connect.Request[v1.CartItem]) (*connect.Response[v1.Cart], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.UpdateCartItem is not implemented"))
}

func (UnimplementedCartServiceHandler) CheckoutCart(context.Context, *connect.Request[v1.CheckoutCartRequest]) (*connect.Response[v1.CheckoutCartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cart.v1.CartService.CheckoutCart is not implemented"))
}
