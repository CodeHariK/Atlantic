// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: orders/v1/orders.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/codeharik/Atlantic/orders/api/orders/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrdersServiceName is the fully-qualified name of the OrdersService service.
	OrdersServiceName = "orders.v1.OrdersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrdersServicePlaceOrderProcedure is the fully-qualified name of the OrdersService's PlaceOrder
	// RPC.
	OrdersServicePlaceOrderProcedure = "/orders.v1.OrdersService/PlaceOrder"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	ordersServiceServiceDescriptor          = v1.File_orders_v1_orders_proto.Services().ByName("OrdersService")
	ordersServicePlaceOrderMethodDescriptor = ordersServiceServiceDescriptor.Methods().ByName("PlaceOrder")
)

// OrdersServiceClient is a client for the orders.v1.OrdersService service.
type OrdersServiceClient interface {
	PlaceOrder(context.Context, *connect.Request[v1.PlaceOrderRequest]) (*connect.Response[v1.PlaceOrderResponse], error)
}

// NewOrdersServiceClient constructs a client for the orders.v1.OrdersService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrdersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrdersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ordersServiceClient{
		placeOrder: connect.NewClient[v1.PlaceOrderRequest, v1.PlaceOrderResponse](
			httpClient,
			baseURL+OrdersServicePlaceOrderProcedure,
			connect.WithSchema(ordersServicePlaceOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// ordersServiceClient implements OrdersServiceClient.
type ordersServiceClient struct {
	placeOrder *connect.Client[v1.PlaceOrderRequest, v1.PlaceOrderResponse]
}

// PlaceOrder calls orders.v1.OrdersService.PlaceOrder.
func (c *ordersServiceClient) PlaceOrder(ctx context.Context, req *connect.Request[v1.PlaceOrderRequest]) (*connect.Response[v1.PlaceOrderResponse], error) {
	return c.placeOrder.CallUnary(ctx, req)
}

// OrdersServiceHandler is an implementation of the orders.v1.OrdersService service.
type OrdersServiceHandler interface {
	PlaceOrder(context.Context, *connect.Request[v1.PlaceOrderRequest]) (*connect.Response[v1.PlaceOrderResponse], error)
}

// NewOrdersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrdersServiceHandler(svc OrdersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	ordersServicePlaceOrderHandler := connect.NewUnaryHandler(
		OrdersServicePlaceOrderProcedure,
		svc.PlaceOrder,
		connect.WithSchema(ordersServicePlaceOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/orders.v1.OrdersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrdersServicePlaceOrderProcedure:
			ordersServicePlaceOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrdersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrdersServiceHandler struct{}

func (UnimplementedOrdersServiceHandler) PlaceOrder(context.Context, *connect.Request[v1.PlaceOrderRequest]) (*connect.Response[v1.PlaceOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orders.v1.OrdersService.PlaceOrder is not implemented"))
}
